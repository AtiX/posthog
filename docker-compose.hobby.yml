#
# `docker-compose` file used ONLY for hobby deployments.
#
# Please take a look at https://posthog.com/docs/self-host/deploy/hobby
# for more info.

version: '3'
services:
    db:
        image: postgres:12-alpine
        restart: on-failure
        environment:
            POSTGRES_USER: posthog
            POSTGRES_DB: posthog
            POSTGRES_PASSWORD: posthog
        volumes:
            - postgres-data:/var/lib/postgresql/data

    web:
        image: &image posthog/posthog:release-1.39.1
        command:
            - /bin/sh
            - -c
            - |
                until [[ "$$(wget -O - http://clickhouse:8123/ping -q)" == "Ok." ]]; do sleep 5; done
                ./bin/migrate
                ./bin/docker-server
                ./bin/docker-frontend
        restart: on-failure
        environment: &env
            SITE_URL: http://localhost:8000
            DISABLE_SECURE_SSL_REDIRECT: 'true'
            SECRET_KEY: $SECRET_KEY
            IS_BEHIND_PROXY: 'true'
            DATABASE_URL: 'postgres://posthog:posthog@db:5432/posthog'
            CLICKHOUSE_HOST: 'clickhouse'
            CLICKHOUSE_DATABASE: 'posthog'
            CLICKHOUSE_SECURE: 'false'
            CLICKHOUSE_VERIFY: 'false'
            REDIS_URL: 'redis://redis:6379/'
            DEPLOYMENT: hobby
        depends_on:
            - db
            - redis
            - clickhouse
            - kafka
            - object_storage

    caddy:
        image: caddy
        restart: unless-stopped
        ports:
            - '80:80'
            - '443:443'
        volumes:
            - ./Caddyfile:/etc/caddy/Caddyfile
        depends_on:
            - web

    redis:
        image: redis:6.2.7-alpine
        restart: on-failure
        command: redis-server --maxmemory-policy allkeys-lru --maxmemory 200mb
    clickhouse:
        #
        # Note: please keep the default version in sync across
        #       `posthog` and the `charts-clickhouse` repos
        #
        image: clickhouse/clickhouse-server:22.3
        restart: on-failure
        depends_on:
            - kafka
            - zookeeper
        volumes:
            - ./posthog/posthog/idl:/idl
            - ./posthog/docker/clickhouse/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
            - ./posthog/docker/clickhouse/config.xml:/etc/clickhouse-server/config.xml
            - ./posthog/docker/clickhouse/users.xml:/etc/clickhouse-server/users.xml
            - clickhouse-data:/var/lib/clickhouse

    zookeeper:
        image: zookeeper:3.7.0
        restart: on-failure
        volumes:
            - zookeeper-datalog:/datalog
            - zookeeper-data:/data
            - zookeeper-logs:/logs
    kafka:
        image: bitnami/kafka:2.8.1-debian-10-r99
        restart: on-failure
        depends_on:
            - zookeeper
        environment:
            KAFKA_BROKER_ID: 1001
            KAFKA_CFG_RESERVED_BROKER_MAX_ID: 1001
            KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
            KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
            KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
            ALLOW_PLAINTEXT_LISTENER: 'true'

    worker:
        image: *image
        command: ./bin/docker-worker-celery --with-scheduler
        restart: on-failure
        environment: *env
        depends_on:
            - db
            - redis
            - clickhouse
            - kafka
            - object_storage

    plugins:
        image: *image
        command: ./bin/plugin-server --no-restart-loop
        restart: on-failure
        environment: *env
        depends_on:
            - db
            - redis
            - clickhouse
            - kafka
            - object_storage

    object_storage:
        image: minio/minio
        restart: on-failure
        volumes:
            - object_storage:/data
        environment:
            MINIO_ROOT_USER: object_storage_root_user
            MINIO_ROOT_PASSWORD: object_storage_root_password
        entrypoint: sh
        command: -c 'mkdir -p /data/posthog && minio server --address ":19000" --console-address ":19001" /data' # create the 'posthog' bucket before starting the service

    asyncmigrationscheck:
        image: *image
        command: python manage.py run_async_migrations --check
        environment: *env
        restart: 'no'
        deploy:
            replicas: 0
        depends_on:
            - db
            - redis
            - clickhouse
            - kafka
            - object_storage

volumes:
    zookeeper-data:
    zookeeper-datalog:
    zookeeper-logs:
    object_storage:
    postgres-data:
    clickhouse-data:
