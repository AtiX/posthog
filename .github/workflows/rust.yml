name: Rust

on:
    workflow_dispatch:
    push:
        paths:
            - 'rust/**'
        branches: [master, main]
    pull_request:
        paths:
            - 'rust/**'

env:
    CARGO_TERM_COLOR: always

jobs:
    build:
        runs-on: depot-ubuntu-22.04-4

        defaults:
            run:
                working-directory: rust

        steps:
            # Checkout project code
            # Use sparse checkout to only select files in rust directory
            # Turning off cone mode ensures that files in the project root are not included during checkout
            - uses: actions/checkout@v3
              with:
                  sparse-checkout: 'rust/'
                  sparse-checkout-cone-mode: false

            - name: Install rust
              uses: dtolnay/rust-toolchain@1.77

            - uses: actions/cache@v3
              with:
                  path: |
                      ~/rust/.cargo/registry
                      ~/rust/.cargo/git
                      rust/target
                  key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

            - name: Run cargo build
              run: cargo build --all --locked --release && find target/release/ -maxdepth 1 -executable -type f | xargs strip

    test:
        runs-on: depot-ubuntu-22.04-4
        timeout-minutes: 10

        defaults:
            run:
                working-directory: rust

        steps:
            # Checkout project code
            # Use sparse checkout to only select files in rust directory
            # Turning off cone mode ensures that files in the project root are not included during checkout
            - uses: actions/checkout@v3
              with:
                  sparse-checkout: 'rust/'
                  sparse-checkout-cone-mode: false

            - name: Login to DockerHub
              uses: docker/login-action@v2
              with:
                  username: posthog
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Setup dependencies
              run: |
                  docker compose up kafka redis db echo_server -d --wait
                  docker compose up setup_test_db
                  echo "127.0.0.1 kafka" | sudo tee -a /etc/hosts

            - name: Install rust
              uses: dtolnay/rust-toolchain@1.77

            - uses: actions/cache@v3
              with:
                  path: |
                      ~/rust/.cargo/registry
                      ~/rust/.cargo/git
                      rust/target
                  key: ${ runner.os }-cargo-debug-${{ hashFiles('**/Cargo.lock') }}

            - name: Run cargo test
              run: cargo test --all-features

    linting:
        runs-on: depot-ubuntu-22.04-4

        defaults:
            run:
                working-directory: rust

        steps:
            # Checkout project code
            # Use sparse checkout to only select files in rust directory
            # Turning off cone mode ensures that files in the project root are not included during checkout
            - uses: actions/checkout@v3
              with:
                  sparse-checkout: 'rust/'
                  sparse-checkout-cone-mode: false

            - name: Install rust
              uses: dtolnay/rust-toolchain@1.77
              with:
                  components: clippy,rustfmt

            - uses: actions/cache@v3
              with:
                  path: |
                      ~/rust/.cargo/registry
                      ~/rust/.cargo/git
                      rust/target
                  key: ${{ runner.os }}-cargo-debug-${{ hashFiles('**/Cargo.lock') }}

            - name: Check format
              run: cargo fmt -- --check

            - name: Run clippy
              run: cargo clippy -- -D warnings

            - name: Run cargo check
              run: cargo check --all-features

    shear:
        runs-on: depot-ubuntu-22.04-4

        defaults:
            run:
                working-directory: rust

        steps:
            # Checkout project code
            # Use sparse checkout to only select files in rust directory
            # Turning off cone mode ensures that files in the project root are not included during checkout
            - uses: actions/checkout@v3
              with:
                  sparse-checkout: 'rust/'
                  sparse-checkout-cone-mode: false

            - name: Install cargo-binstall
              uses: cargo-bins/cargo-binstall@main

            - name: Install cargo-shear
              run: cargo binstall --no-confirm cargo-shear

            - run: cargo shear
