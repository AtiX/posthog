# serializer version: 1
# name: TestErrorTrackingQueryRunner.test_assignee_groups
  '''
  SELECT count() AS occurrences,
         count(DISTINCT events.`$session_id`) AS sessions,
         count(DISTINCT events.distinct_id) AS users,
         max(events.timestamp) AS last_seen,
         min(events.timestamp) AS first_seen,
         any(events.`properties___$exception_message`) AS description,
         any(events.`properties___$exception_type`) AS exception_type,
         multiIf(has([['SyntaxError']], JSONExtract(ifNull(events.`properties___$exception_fingerprint`, '[]'), 'Array(String)')), ['SyntaxError'], has([['custom_fingerprint']], JSONExtract(ifNull(events.`properties___$exception_fingerprint`, '[]'), 'Array(String)')), ['custom_fingerprint'], JSONExtract(ifNull(events.`properties___$exception_fingerprint`, '[]'), 'Array(String)')) AS fingerprint
  FROM
    (SELECT toTimeZone(events.person_created_at, 'UTC') AS person_created_at,
            events.person_properties AS person_properties,
            events.person_id AS person_id,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '') AS `properties___$exception_message`,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '') AS `properties___$exception_type`,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', '') AS `properties___$exception_fingerprint`,
            events.`$session_id` AS `$session_id`,
            events.distinct_id AS distinct_id,
            toTimeZone(events.timestamp, 'UTC') AS timestamp,
            events.event AS event,
            events.`$group_0` AS `$group_0`,
            events.group0_properties AS group0_properties,
            events.group0_created_at AS group0_created_at,
            events.`$group_1` AS `$group_1`,
            events.group1_properties AS group1_properties,
            events.group1_created_at AS group1_created_at,
            events.`$group_2` AS `$group_2`,
            events.group2_properties AS group2_properties,
            events.group2_created_at AS group2_created_at,
            events.`$group_3` AS `$group_3`,
            events.group3_properties AS group3_properties,
            events.group3_created_at AS group3_created_at,
            events.`$group_4` AS `$group_4`,
            events.group4_properties AS group4_properties,
            events.group4_created_at AS group4_created_at
     FROM events
     WHERE equals(events.team_id, 2)) AS events
  WHERE and(ifNull(equals(events.event, '$exception'), 0), 1, has([['SyntaxError'], ['custom_fingerprint']], JSONExtract(ifNull(events.`properties___$exception_fingerprint`, '[]'), 'Array(String)')))
  GROUP BY fingerprint
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_column_names
  '''
  SELECT count() AS occurrences,
         count(DISTINCT events.`$session_id`) AS sessions,
         count(DISTINCT events.distinct_id) AS users,
         max(events.timestamp) AS last_seen,
         min(events.timestamp) AS first_seen,
         any(events.`properties___$exception_message`) AS description,
         any(events.`properties___$exception_type`) AS exception_type,
         JSONExtract(ifNull(events.`properties___$exception_fingerprint`, '[]'), 'Array(String)') AS fingerprint
  FROM
    (SELECT toTimeZone(events.person_created_at, 'UTC') AS person_created_at,
            events.person_properties AS person_properties,
            events.person_id AS person_id,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '') AS `properties___$exception_message`,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '') AS `properties___$exception_type`,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', '') AS `properties___$exception_fingerprint`,
            events.`$session_id` AS `$session_id`,
            events.distinct_id AS distinct_id,
            toTimeZone(events.timestamp, 'UTC') AS timestamp,
            events.event AS event,
            events.person_id AS events___person_id,
            events.`$group_0` AS `$group_0`,
            events.group0_properties AS group0_properties,
            events.group0_created_at AS group0_created_at,
            events.`$group_1` AS `$group_1`,
            events.group1_properties AS group1_properties,
            events.group1_created_at AS group1_created_at,
            events.`$group_2` AS `$group_2`,
            events.group2_properties AS group2_properties,
            events.group2_created_at AS group2_created_at,
            events.`$group_3` AS `$group_3`,
            events.group3_properties AS group3_properties,
            events.group3_created_at AS group3_created_at,
            events.`$group_4` AS `$group_4`,
            events.group4_properties AS group4_properties,
            events.group4_created_at AS group4_created_at
     FROM events
     WHERE equals(events.team_id, 2)) AS events
  LEFT JOIN
    (SELECT person.id AS id,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
     FROM person
     WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                      (SELECT person.id AS id, max(person.version) AS version
                                                       FROM person
                                                       WHERE equals(person.team_id, 2)
                                                       GROUP BY person.id
                                                       HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(events.events___person_id, events__person.id)
  WHERE and(ifNull(equals(events.event, '$exception'), 0), ifNull(notILike(events__person.properties___email, '%@posthog.com%'), 1))
  GROUP BY fingerprint
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_column_names.1
  '''
  SELECT count() AS occurrences,
         count(DISTINCT events.`$session_id`) AS sessions,
         count(DISTINCT events.distinct_id) AS users,
         max(events.timestamp) AS last_seen,
         min(events.timestamp) AS first_seen,
         any(events.`properties___$exception_message`) AS description,
         any(events.`properties___$exception_type`) AS exception_type
  FROM
    (SELECT toTimeZone(events.person_created_at, 'UTC') AS person_created_at,
            events.person_properties AS person_properties,
            events.person_id AS person_id,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '') AS `properties___$exception_message`,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '') AS `properties___$exception_type`,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', '') AS `properties___$exception_fingerprint`,
            events.`$session_id` AS `$session_id`,
            events.distinct_id AS distinct_id,
            toTimeZone(events.timestamp, 'UTC') AS timestamp,
            events.event AS event,
            events.person_id AS events___person_id,
            events.`$group_0` AS `$group_0`,
            events.group0_properties AS group0_properties,
            events.group0_created_at AS group0_created_at,
            events.`$group_1` AS `$group_1`,
            events.group1_properties AS group1_properties,
            events.group1_created_at AS group1_created_at,
            events.`$group_2` AS `$group_2`,
            events.group2_properties AS group2_properties,
            events.group2_created_at AS group2_created_at,
            events.`$group_3` AS `$group_3`,
            events.group3_properties AS group3_properties,
            events.group3_created_at AS group3_created_at,
            events.`$group_4` AS `$group_4`,
            events.group4_properties AS group4_properties,
            events.group4_created_at AS group4_created_at
     FROM events
     WHERE equals(events.team_id, 2)) AS events
  LEFT JOIN
    (SELECT person.id AS id,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
     FROM person
     WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                      (SELECT person.id AS id, max(person.version) AS version
                                                       FROM person
                                                       WHERE equals(person.team_id, 2)
                                                       GROUP BY person.id
                                                       HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(events.events___person_id, events__person.id)
  WHERE and(ifNull(equals(events.event, '$exception'), 0), ifNull(notILike(events__person.properties___email, '%@posthog.com%'), 1), has([['SyntaxError']], JSONExtract(ifNull(events.`properties___$exception_fingerprint`, '[]'), 'Array(String)')))
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_column_names.2
  '''
  SELECT count() AS occurrences,
         count(DISTINCT events.`$session_id`) AS sessions,
         count(DISTINCT events.distinct_id) AS users,
         max(toTimeZone(events.timestamp, 'UTC')) AS last_seen,
         min(toTimeZone(events.timestamp, 'UTC')) AS first_seen,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '')) AS description,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '')) AS exception_type,
         groupArray(tuple(events.uuid, events.distinct_id, events.distinct_id)) AS events
  FROM events
  INNER JOIN
    (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS events__pdi___person_id,
            argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 2)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
  LEFT JOIN
    (SELECT person.id AS id,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
     FROM person
     WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                      (SELECT person.id AS id, max(person.version) AS version
                                                       FROM person
                                                       WHERE equals(person.team_id, 2)
                                                       GROUP BY person.id
                                                       HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__pdi__person ON equals(events__pdi.events__pdi___person_id, events__pdi__person.id)
  WHERE and(equals(events.team_id, 2), equals(events.event, '$exception'), ifNull(notILike(events__pdi__person.properties___email, '%@posthog.com%'), 1), has([['SyntaxError']], JSONExtract(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', ''), '[]'), 'Array(String)')))
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_fingerprints
  '''
  SELECT count() AS occurrences,
         count(DISTINCT events.`$session_id`) AS sessions,
         count(DISTINCT events.distinct_id) AS users,
         max(events.timestamp) AS last_seen,
         min(events.timestamp) AS first_seen,
         any(events.`properties___$exception_message`) AS description,
         any(events.`properties___$exception_type`) AS exception_type
  FROM
    (SELECT toTimeZone(events.person_created_at, 'UTC') AS person_created_at,
            events.person_properties AS person_properties,
            events.person_id AS person_id,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '') AS `properties___$exception_message`,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '') AS `properties___$exception_type`,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', '') AS `properties___$exception_fingerprint`,
            events.`$session_id` AS `$session_id`,
            events.distinct_id AS distinct_id,
            toTimeZone(events.timestamp, 'UTC') AS timestamp,
            events.event AS event,
            events.`$group_0` AS `$group_0`,
            events.group0_properties AS group0_properties,
            events.group0_created_at AS group0_created_at,
            events.`$group_1` AS `$group_1`,
            events.group1_properties AS group1_properties,
            events.group1_created_at AS group1_created_at,
            events.`$group_2` AS `$group_2`,
            events.group2_properties AS group2_properties,
            events.group2_created_at AS group2_created_at,
            events.`$group_3` AS `$group_3`,
            events.group3_properties AS group3_properties,
            events.group3_created_at AS group3_created_at,
            events.`$group_4` AS `$group_4`,
            events.group4_properties AS group4_properties,
            events.group4_created_at AS group4_created_at
     FROM events
     WHERE equals(events.team_id, 2)) AS events
  WHERE and(ifNull(equals(events.event, '$exception'), 0), 1, has([['SyntaxError']], JSONExtract(ifNull(events.`properties___$exception_fingerprint`, '[]'), 'Array(String)')))
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_hogql_filters
  '''
  SELECT count() AS occurrences,
         count(DISTINCT events.`$session_id`) AS sessions,
         count(DISTINCT events.distinct_id) AS users,
         max(events.timestamp) AS last_seen,
         min(events.timestamp) AS first_seen,
         any(events.`properties___$exception_message`) AS description,
         any(events.`properties___$exception_type`) AS exception_type,
         JSONExtract(ifNull(events.`properties___$exception_fingerprint`, '[]'), 'Array(String)') AS fingerprint
  FROM
    (SELECT toTimeZone(events.person_created_at, 'UTC') AS person_created_at,
            events.person_properties AS person_properties,
            events.person_id AS person_id,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '') AS `properties___$exception_message`,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '') AS `properties___$exception_type`,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', '') AS `properties___$exception_fingerprint`,
            events.`$session_id` AS `$session_id`,
            events.distinct_id AS distinct_id,
            toTimeZone(events.timestamp, 'UTC') AS timestamp,
            events.event AS event,
            events.person_id AS events___person_id,
            events.`$group_0` AS `$group_0`,
            events.group0_properties AS group0_properties,
            events.group0_created_at AS group0_created_at,
            events.`$group_1` AS `$group_1`,
            events.group1_properties AS group1_properties,
            events.group1_created_at AS group1_created_at,
            events.`$group_2` AS `$group_2`,
            events.group2_properties AS group2_properties,
            events.group2_created_at AS group2_created_at,
            events.`$group_3` AS `$group_3`,
            events.group3_properties AS group3_properties,
            events.group3_created_at AS group3_created_at,
            events.`$group_4` AS `$group_4`,
            events.group4_properties AS group4_properties,
            events.group4_created_at AS group4_created_at
     FROM events
     WHERE equals(events.team_id, 2)) AS events
  LEFT JOIN
    (SELECT person.id AS id,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
     FROM person
     WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                      (SELECT person.id AS id, max(person.version) AS version
                                                       FROM person
                                                       WHERE equals(person.team_id, 2)
                                                       GROUP BY person.id
                                                       HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__person ON equals(events.events___person_id, events__person.id)
  WHERE and(ifNull(equals(events.event, '$exception'), 0), ifNull(equals(events__person.properties___email, 'email@posthog.com'), 0))
  GROUP BY fingerprint
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
# name: TestErrorTrackingQueryRunner.test_person_colum_expanded
  '''
  SELECT count() AS occurrences,
         count(DISTINCT events.`$session_id`) AS sessions,
         count(DISTINCT events.distinct_id) AS users,
         max(toTimeZone(events.timestamp, 'UTC')) AS last_seen,
         min(toTimeZone(events.timestamp, 'UTC')) AS first_seen,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_message'), ''), 'null'), '^"|"$', '')) AS description,
         any(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_type'), ''), 'null'), '^"|"$', '')) AS exception_type,
         groupArray(tuple(events.uuid, events.distinct_id, events.distinct_id)) AS events
  FROM events
  INNER JOIN
    (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS events__pdi___person_id,
            argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
            person_distinct_id2.distinct_id AS distinct_id
     FROM person_distinct_id2
     WHERE equals(person_distinct_id2.team_id, 2)
     GROUP BY person_distinct_id2.distinct_id
     HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS events__pdi ON equals(events.distinct_id, events__pdi.distinct_id)
  LEFT JOIN
    (SELECT person.id AS id,
            replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email
     FROM person
     WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                      (SELECT person.id AS id, max(person.version) AS version
                                                       FROM person
                                                       WHERE equals(person.team_id, 2)
                                                       GROUP BY person.id
                                                       HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS events__pdi__person ON equals(events__pdi.events__pdi___person_id, events__pdi__person.id)
  WHERE and(equals(events.team_id, 2), equals(events.event, '$exception'), ifNull(notILike(events__pdi__person.properties___email, '%@posthog.com%'), 1), has([['PersonError']], JSONExtract(ifNull(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(events.properties, '$exception_fingerprint'), ''), 'null'), '^"|"$', ''), '[]'), 'Array(String)')))
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0
  '''
# ---
