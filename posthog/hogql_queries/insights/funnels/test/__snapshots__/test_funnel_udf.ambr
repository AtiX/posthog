# serializer version: 1
# name: TestFOSSFunnelUDF.test_funnel_with_precalculated_cohort_step_filter
  '''
  
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = NULL
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_with_precalculated_cohort_step_filter.1
  '''
  /* cohort_calculation: */
  SELECT count(DISTINCT person_id)
  FROM cohortpeople
  WHERE team_id = 2
    AND cohort_id = 2
    AND version = 0
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_with_precalculated_cohort_step_filter.2
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(af, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(af, 1), 0), 0)) AS step_2,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            rowNumberInBlock() AS row_number,
            breakdown AS final_prop
     FROM
       (SELECT arrayJoin(aggregate_funnel_array(2, 1209600, 'first_touch', 'ordered', [[]], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1)])))))) AS af_tuple,
               af_tuple.1 AS af,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings
        FROM
          (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                  e__pdi.person_id AS aggregation_target,
                  if(and(equals(e.event, 'user signed up'), ifNull(in(e__pdi.person_id,
                                                                        (SELECT cohortpeople.person_id AS person_id
                                                                         FROM cohortpeople
                                                                         WHERE and(equals(cohortpeople.team_id, 2), equals(cohortpeople.cohort_id, 2), equals(cohortpeople.version, 0)))), 0)), 1, 0) AS step_0,
                  if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                  if(equals(e.event, 'paid'), 1, 0) AS step_1,
                  if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                  0 AS exclusion_0,
                  0 AS exclusion_1
           FROM events AS e
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
           WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(af, 0), 0))
     GROUP BY breakdown
     ORDER BY step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=23622320128,
                     allow_experimental_analyzer=1
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_with_property_groups
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         sum(step_3) AS step_3,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_2_conversion_times)])[1] AS step_2_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_2_conversion_times)])[1] AS step_2_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(af, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(af, 1), 0), 0)) AS step_2,
            countIf(ifNull(ifNull(equals(af, 2), 0), 0)) AS step_3,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            groupArrayIf(timings[2], ifNull(greater(timings[2], 0), 0)) AS step_2_conversion_times,
            rowNumberInBlock() AS row_number,
            breakdown AS final_prop
     FROM
       (SELECT arrayJoin(aggregate_funnel_array(3, 1209600, 'first_touch', 'ordered', [[]], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1), multiply(3, step_2)])))))) AS af_tuple,
               af_tuple.1 AS af,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings
        FROM
          (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                  e__pdi.person_id AS aggregation_target,
                  if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                  if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                  if(and(equals(e.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), 'aloha.com'), 0)), 1, 0) AS step_1,
                  if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                  if(and(equals(e.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), 'aloha2.com'), 0)), 1, 0) AS step_2,
                  if(ifNull(equals(step_2, 1), 0), timestamp, NULL) AS latest_2,
                  0 AS exclusion_0,
                  0 AS exclusion_1,
                  0 AS exclusion_2
           FROM events AS e
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
           INNER JOIN
             (SELECT person.id AS id,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email,
                     replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'age'), ''), 'null'), '^"|"$', '') AS properties___age
              FROM person
              WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                               (SELECT person.id AS id, max(person.version) AS version
                                                                FROM person
                                                                WHERE equals(person.team_id, 2)
                                                                GROUP BY person.id
                                                                HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
           WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-07-01 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('$pageview', 'user signed up')), or(and(ifNull(ilike(e__pdi__person.properties___email, '%.com%'), 0), ifNull(equals(e__pdi__person.properties___age, '20'), 0)), or(ifNull(ilike(e__pdi__person.properties___email, '%.org%'), 0), ifNull(equals(e__pdi__person.properties___age, '28'), 0)))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(af, 0), 0))
     GROUP BY breakdown
     ORDER BY step_3 DESC, step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=23622320128,
                     allow_experimental_analyzer=1
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_with_property_groups.1
  '''
  SELECT persons.id,
         persons.id AS id,
         persons.created_at AS created_at,
         1
  FROM
    (SELECT aggregation_target AS actor_id
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               avg(step_2_conversion_time) AS step_2_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               median(step_2_conversion_time) AS step_2_median_conversion_time_inner
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  step_2_conversion_time AS step_2_conversion_time
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     step_2 AS step_2,
                     latest_2 AS latest_2,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0), ifNull(lessOrEquals(latest_1, latest_2), 0), ifNull(lessOrEquals(latest_2, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 3, if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1)) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                     if(and(isNotNull(latest_2), ifNull(lessOrEquals(latest_2, plus(toTimeZone(latest_1, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_1, latest_2), NULL) AS step_2_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        step_2 AS step_2,
                        min(latest_2) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_2
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           step_2 AS step_2,
                           if(ifNull(less(latest_2, latest_1), 0), NULL, latest_2) AS latest_2
                    FROM
                      (SELECT aggregation_target AS aggregation_target,
                              timestamp AS timestamp,
                              step_0 AS step_0,
                              latest_0 AS latest_0,
                              step_1 AS step_1,
                              min(latest_1) OVER (PARTITION BY aggregation_target
                                                  ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                                 step_2 AS step_2,
                                                 min(latest_2) OVER (PARTITION BY aggregation_target
                                                                     ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_2
                       FROM
                         (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                                 e__pdi.person_id AS aggregation_target,
                                 if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                                 if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                                 if(and(equals(e.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), 'aloha.com'), 0)), 1, 0) AS step_1,
                                 if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                                 if(and(equals(e.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), 'aloha2.com'), 0)), 1, 0) AS step_2,
                                 if(ifNull(equals(step_2, 1), 0), timestamp, NULL) AS latest_2
                          FROM events AS e
                          INNER JOIN
                            (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                                    argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                                    person_distinct_id2.distinct_id AS distinct_id
                             FROM person_distinct_id2
                             WHERE equals(person_distinct_id2.team_id, 2)
                             GROUP BY person_distinct_id2.distinct_id
                             HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
                          INNER JOIN
                            (SELECT person.id AS id,
                                    replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email,
                                    replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'age'), ''), 'null'), '^"|"$', '') AS properties___age
                             FROM person
                             WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                              (SELECT person.id AS id, max(person.version) AS version
                                                                               FROM person
                                                                               WHERE equals(person.team_id, 2)
                                                                               GROUP BY person.id
                                                                               HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
                          WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-07-01 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('$pageview', 'user signed up')), or(and(ifNull(ilike(e__pdi__person.properties___email, '%.com%'), 0), ifNull(equals(e__pdi__person.properties___age, '20'), 0)), or(ifNull(ilike(e__pdi__person.properties___email, '%.org%'), 0), ifNull(equals(e__pdi__person.properties___age, '28'), 0)))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0)))))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max(max_steps)), isNull(steps)
                      and isNull(max(max_steps))))
     WHERE ifNull(in(steps, [1, 2, 3]), 0)
     ORDER BY aggregation_target ASC) AS source
  INNER JOIN
    (SELECT argMax(toTimeZone(person.created_at, 'UTC'), person.version) AS created_at,
            person.id AS id
     FROM person
     WHERE equals(person.team_id, 2)
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons ON equals(persons.id, source.actor_id)
  ORDER BY persons.created_at DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_with_property_groups.2
  '''
  SELECT persons.id,
         persons.id AS id,
         persons.created_at AS created_at,
         1
  FROM
    (SELECT aggregation_target AS actor_id
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               avg(step_2_conversion_time) AS step_2_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               median(step_2_conversion_time) AS step_2_median_conversion_time_inner
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  step_2_conversion_time AS step_2_conversion_time
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     step_2 AS step_2,
                     latest_2 AS latest_2,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0), ifNull(lessOrEquals(latest_1, latest_2), 0), ifNull(lessOrEquals(latest_2, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 3, if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1)) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                     if(and(isNotNull(latest_2), ifNull(lessOrEquals(latest_2, plus(toTimeZone(latest_1, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_1, latest_2), NULL) AS step_2_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        step_2 AS step_2,
                        min(latest_2) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_2
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           step_2 AS step_2,
                           if(ifNull(less(latest_2, latest_1), 0), NULL, latest_2) AS latest_2
                    FROM
                      (SELECT aggregation_target AS aggregation_target,
                              timestamp AS timestamp,
                              step_0 AS step_0,
                              latest_0 AS latest_0,
                              step_1 AS step_1,
                              min(latest_1) OVER (PARTITION BY aggregation_target
                                                  ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                                 step_2 AS step_2,
                                                 min(latest_2) OVER (PARTITION BY aggregation_target
                                                                     ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_2
                       FROM
                         (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                                 e__pdi.person_id AS aggregation_target,
                                 if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                                 if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                                 if(and(equals(e.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), 'aloha.com'), 0)), 1, 0) AS step_1,
                                 if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                                 if(and(equals(e.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), 'aloha2.com'), 0)), 1, 0) AS step_2,
                                 if(ifNull(equals(step_2, 1), 0), timestamp, NULL) AS latest_2
                          FROM events AS e
                          INNER JOIN
                            (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                                    argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                                    person_distinct_id2.distinct_id AS distinct_id
                             FROM person_distinct_id2
                             WHERE equals(person_distinct_id2.team_id, 2)
                             GROUP BY person_distinct_id2.distinct_id
                             HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
                          INNER JOIN
                            (SELECT person.id AS id,
                                    replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email,
                                    replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'age'), ''), 'null'), '^"|"$', '') AS properties___age
                             FROM person
                             WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                              (SELECT person.id AS id, max(person.version) AS version
                                                                               FROM person
                                                                               WHERE equals(person.team_id, 2)
                                                                               GROUP BY person.id
                                                                               HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
                          WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-07-01 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('$pageview', 'user signed up')), or(and(ifNull(ilike(e__pdi__person.properties___email, '%.com%'), 0), ifNull(equals(e__pdi__person.properties___age, '20'), 0)), or(ifNull(ilike(e__pdi__person.properties___email, '%.org%'), 0), ifNull(equals(e__pdi__person.properties___age, '28'), 0)))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0)))))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max(max_steps)), isNull(steps)
                      and isNull(max(max_steps))))
     WHERE ifNull(in(steps, [2, 3]), 0)
     ORDER BY aggregation_target ASC) AS source
  INNER JOIN
    (SELECT argMax(toTimeZone(person.created_at, 'UTC'), person.version) AS created_at,
            person.id AS id
     FROM person
     WHERE equals(person.team_id, 2)
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons ON equals(persons.id, source.actor_id)
  ORDER BY persons.created_at DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_with_property_groups.3
  '''
  SELECT persons.id,
         persons.id AS id,
         persons.created_at AS created_at,
         1
  FROM
    (SELECT aggregation_target AS actor_id
     FROM
       (SELECT aggregation_target AS aggregation_target,
               steps AS steps,
               avg(step_1_conversion_time) AS step_1_average_conversion_time_inner,
               avg(step_2_conversion_time) AS step_2_average_conversion_time_inner,
               median(step_1_conversion_time) AS step_1_median_conversion_time_inner,
               median(step_2_conversion_time) AS step_2_median_conversion_time_inner
        FROM
          (SELECT aggregation_target AS aggregation_target,
                  steps AS steps,
                  max(steps) OVER (PARTITION BY aggregation_target) AS max_steps,
                                  step_1_conversion_time AS step_1_conversion_time,
                                  step_2_conversion_time AS step_2_conversion_time
           FROM
             (SELECT aggregation_target AS aggregation_target,
                     timestamp AS timestamp,
                     step_0 AS step_0,
                     latest_0 AS latest_0,
                     step_1 AS step_1,
                     latest_1 AS latest_1,
                     step_2 AS step_2,
                     latest_2 AS latest_2,
                     if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0), ifNull(lessOrEquals(latest_1, latest_2), 0), ifNull(lessOrEquals(latest_2, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 3, if(and(ifNull(lessOrEquals(latest_0, latest_1), 0), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), 2, 1)) AS steps,
                     if(and(isNotNull(latest_1), ifNull(lessOrEquals(latest_1, plus(toTimeZone(latest_0, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_0, latest_1), NULL) AS step_1_conversion_time,
                     if(and(isNotNull(latest_2), ifNull(lessOrEquals(latest_2, plus(toTimeZone(latest_1, 'UTC'), toIntervalDay(14))), 0)), dateDiff('second', latest_1, latest_2), NULL) AS step_2_conversion_time
              FROM
                (SELECT aggregation_target AS aggregation_target,
                        timestamp AS timestamp,
                        step_0 AS step_0,
                        latest_0 AS latest_0,
                        step_1 AS step_1,
                        latest_1 AS latest_1,
                        step_2 AS step_2,
                        min(latest_2) OVER (PARTITION BY aggregation_target
                                            ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_2
                 FROM
                   (SELECT aggregation_target AS aggregation_target,
                           timestamp AS timestamp,
                           step_0 AS step_0,
                           latest_0 AS latest_0,
                           step_1 AS step_1,
                           latest_1 AS latest_1,
                           step_2 AS step_2,
                           if(ifNull(less(latest_2, latest_1), 0), NULL, latest_2) AS latest_2
                    FROM
                      (SELECT aggregation_target AS aggregation_target,
                              timestamp AS timestamp,
                              step_0 AS step_0,
                              latest_0 AS latest_0,
                              step_1 AS step_1,
                              min(latest_1) OVER (PARTITION BY aggregation_target
                                                  ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_1,
                                                 step_2 AS step_2,
                                                 min(latest_2) OVER (PARTITION BY aggregation_target
                                                                     ORDER BY timestamp DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING) AS latest_2
                       FROM
                         (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                                 e__pdi.person_id AS aggregation_target,
                                 if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                                 if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                                 if(and(equals(e.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), 'aloha.com'), 0)), 1, 0) AS step_1,
                                 if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                                 if(and(equals(e.event, '$pageview'), ifNull(equals(replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(e.properties, '$current_url'), ''), 'null'), '^"|"$', ''), 'aloha2.com'), 0)), 1, 0) AS step_2,
                                 if(ifNull(equals(step_2, 1), 0), timestamp, NULL) AS latest_2
                          FROM events AS e
                          INNER JOIN
                            (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                                    argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS e__pdi___person_id,
                                    person_distinct_id2.distinct_id AS distinct_id
                             FROM person_distinct_id2
                             WHERE equals(person_distinct_id2.team_id, 2)
                             GROUP BY person_distinct_id2.distinct_id
                             HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
                          INNER JOIN
                            (SELECT person.id AS id,
                                    replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'email'), ''), 'null'), '^"|"$', '') AS properties___email,
                                    replaceRegexpAll(nullIf(nullIf(JSONExtractRaw(person.properties, 'age'), ''), 'null'), '^"|"$', '') AS properties___age
                             FROM person
                             WHERE and(equals(person.team_id, 2), ifNull(in(tuple(person.id, person.version),
                                                                              (SELECT person.id AS id, max(person.version) AS version
                                                                               FROM person
                                                                               WHERE equals(person.team_id, 2)
                                                                               GROUP BY person.id
                                                                               HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)))), 0)) SETTINGS optimize_aggregation_in_order=1) AS e__pdi__person ON equals(e__pdi.e__pdi___person_id, e__pdi__person.id)
                          WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-07-01 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('$pageview', 'user signed up')), or(and(ifNull(ilike(e__pdi__person.properties___email, '%.com%'), 0), ifNull(equals(e__pdi__person.properties___age, '20'), 0)), or(ifNull(ilike(e__pdi__person.properties___email, '%.org%'), 0), ifNull(equals(e__pdi__person.properties___age, '28'), 0)))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0), ifNull(equals(step_2, 1), 0)))))))
              WHERE ifNull(equals(step_0, 1), 0)))
        GROUP BY aggregation_target,
                 steps
        HAVING ifNull(equals(steps, max(max_steps)), isNull(steps)
                      and isNull(max(max_steps))))
     WHERE ifNull(in(steps, [3]), 0)
     ORDER BY aggregation_target ASC) AS source
  INNER JOIN
    (SELECT argMax(toTimeZone(person.created_at, 'UTC'), person.version) AS created_at,
            person.id AS id
     FROM person
     WHERE equals(person.team_id, 2)
     GROUP BY person.id
     HAVING and(ifNull(equals(argMax(person.is_deleted, person.version), 0), 0), ifNull(less(argMax(toTimeZone(person.created_at, 'UTC'), person.version), plus(now64(6, 'UTC'), toIntervalDay(1))), 0)) SETTINGS optimize_aggregation_in_order=1) AS persons ON equals(persons.id, source.actor_id)
  ORDER BY persons.created_at DESC
  LIMIT 101
  OFFSET 0 SETTINGS readonly=2,
                    max_execution_time=60,
                    allow_experimental_object_type=1,
                    format_csv_allow_double_quotes=0,
                    max_ast_elements=4000000,
                    max_expanded_ast_elements=4000000,
                    max_bytes_before_external_group_by=0,
                    allow_experimental_analyzer=1
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_with_static_cohort_step_filter
  '''
  
  SELECT count(DISTINCT person_id)
  FROM person_static_cohort
  WHERE team_id = 2
    AND cohort_id = 2
  '''
# ---
# name: TestFOSSFunnelUDF.test_funnel_with_static_cohort_step_filter.1
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(af, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(af, 1), 0), 0)) AS step_2,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            rowNumberInBlock() AS row_number,
            breakdown AS final_prop
     FROM
       (SELECT arrayJoin(aggregate_funnel_array(2, 1209600, 'first_touch', 'ordered', [[]], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1)])))))) AS af_tuple,
               af_tuple.1 AS af,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings
        FROM
          (SELECT toTimeZone(e.timestamp, 'UTC') AS timestamp,
                  e__pdi.person_id AS aggregation_target,
                  if(and(equals(e.event, 'user signed up'), ifNull(in(e__pdi.person_id,
                                                                        (SELECT person_static_cohort.person_id AS person_id
                                                                         FROM person_static_cohort
                                                                         WHERE and(equals(person_static_cohort.team_id, 2), equals(person_static_cohort.cohort_id, 2)))), 0)), 1, 0) AS step_0,
                  if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                  if(equals(e.event, 'paid'), 1, 0) AS step_1,
                  if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                  0 AS exclusion_0,
                  0 AS exclusion_1
           FROM events AS e
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
           WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'UTC')), lessOrEquals(toTimeZone(e.timestamp, 'UTC'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'UTC'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(af, 0), 0))
     GROUP BY breakdown
     ORDER BY step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=23622320128,
                     allow_experimental_analyzer=1
  '''
# ---
# name: TestFOSSFunnelUDF.test_timezones
  '''
  SELECT sum(step_1) AS step_1,
         sum(step_2) AS step_2,
         arrayMap(x -> if(isNaN(x), NULL, x), [avgArrayOrNull(step_1_conversion_times)])[1] AS step_1_average_conversion_time,
         arrayMap(x -> if(isNaN(x), NULL, x), [medianArrayOrNull(step_1_conversion_times)])[1] AS step_1_median_conversion_time,
         groupArray(row_number) AS row_number,
         final_prop AS final_prop
  FROM
    (SELECT countIf(ifNull(ifNull(equals(af, 0), 0), 0)) AS step_1,
            countIf(ifNull(ifNull(equals(af, 1), 0), 0)) AS step_2,
            groupArrayIf(timings[1], ifNull(greater(timings[1], 0), 0)) AS step_1_conversion_times,
            rowNumberInBlock() AS row_number,
            breakdown AS final_prop
     FROM
       (SELECT arrayJoin(aggregate_funnel_array(2, 1209600, 'first_touch', 'ordered', [[]], arraySort(t -> t.1, groupArray(tuple(accurateCastOrNull(timestamp, 'Float64'), [], arrayFilter(x -> ifNull(notEquals(x, 0), 1), [multiply(1, step_0), multiply(2, step_1)])))))) AS af_tuple,
               af_tuple.1 AS af,
               af_tuple.2 AS breakdown,
               af_tuple.3 AS timings
        FROM
          (SELECT toTimeZone(e.timestamp, 'US/Pacific') AS timestamp,
                  e__pdi.person_id AS aggregation_target,
                  if(equals(e.event, 'user signed up'), 1, 0) AS step_0,
                  if(ifNull(equals(step_0, 1), 0), timestamp, NULL) AS latest_0,
                  if(equals(e.event, 'paid'), 1, 0) AS step_1,
                  if(ifNull(equals(step_1, 1), 0), timestamp, NULL) AS latest_1,
                  0 AS exclusion_0,
                  0 AS exclusion_1
           FROM events AS e
           INNER JOIN
             (SELECT argMax(person_distinct_id2.person_id, person_distinct_id2.version) AS person_id,
                     person_distinct_id2.distinct_id AS distinct_id
              FROM person_distinct_id2
              WHERE equals(person_distinct_id2.team_id, 2)
              GROUP BY person_distinct_id2.distinct_id
              HAVING ifNull(equals(argMax(person_distinct_id2.is_deleted, person_distinct_id2.version), 0), 0) SETTINGS optimize_aggregation_in_order=1) AS e__pdi ON equals(e.distinct_id, e__pdi.distinct_id)
           WHERE and(equals(e.team_id, 2), and(and(greaterOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), toDateTime64('2020-01-01 00:00:00.000000', 6, 'US/Pacific')), lessOrEquals(toTimeZone(e.timestamp, 'US/Pacific'), toDateTime64('2020-01-14 23:59:59.999999', 6, 'US/Pacific'))), in(e.event, tuple('paid', 'user signed up'))), or(ifNull(equals(step_0, 1), 0), ifNull(equals(step_1, 1), 0))))
        GROUP BY aggregation_target
        HAVING ifNull(greaterOrEquals(af, 0), 0))
     GROUP BY breakdown
     ORDER BY step_2 DESC, step_1 DESC)
  GROUP BY final_prop
  LIMIT 100 SETTINGS readonly=2,
                     max_execution_time=60,
                     allow_experimental_object_type=1,
                     format_csv_allow_double_quotes=0,
                     max_ast_elements=4000000,
                     max_expanded_ast_elements=4000000,
                     max_bytes_before_external_group_by=23622320128,
                     allow_experimental_analyzer=1
  '''
# ---
