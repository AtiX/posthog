# Generated from HogQLParser.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,243,1000,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,5,0,140,8,0,10,0,12,0,143,9,
        0,1,0,1,0,1,1,1,1,3,1,149,8,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,158,
        8,3,1,3,1,3,1,4,1,4,1,4,3,4,165,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,3,6,177,8,6,1,7,1,7,5,7,181,8,7,10,7,12,7,184,9,7,1,
        7,1,7,1,8,1,8,3,8,190,8,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,198,8,9,10,
        9,12,9,201,9,9,1,10,1,10,1,10,1,10,1,10,3,10,208,8,10,1,11,3,11,
        211,8,11,1,11,1,11,3,11,215,8,11,1,11,3,11,218,8,11,1,11,1,11,3,
        11,222,8,11,1,11,3,11,225,8,11,1,11,3,11,228,8,11,1,11,3,11,231,
        8,11,1,11,3,11,234,8,11,1,11,1,11,3,11,238,8,11,1,11,1,11,3,11,242,
        8,11,1,11,3,11,245,8,11,1,11,3,11,248,8,11,1,11,3,11,251,8,11,1,
        11,1,11,3,11,255,8,11,1,11,3,11,258,8,11,1,12,1,12,1,12,1,13,1,13,
        1,13,1,13,3,13,267,8,13,1,14,1,14,1,14,1,15,3,15,273,8,15,1,15,1,
        15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,5,16,292,8,16,10,16,12,16,295,9,16,1,17,1,17,1,17,1,
        18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,311,8,
        19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,
        23,1,23,1,23,3,23,328,8,23,1,23,1,23,1,23,1,23,3,23,334,8,23,1,23,
        1,23,1,23,1,23,3,23,340,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,3,23,351,8,23,3,23,353,8,23,1,24,1,24,1,24,1,25,1,25,1,
        25,1,26,1,26,1,26,3,26,364,8,26,1,26,3,26,367,8,26,1,26,1,26,1,26,
        1,26,3,26,373,8,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,381,8,26,1,
        26,1,26,1,26,1,26,5,26,387,8,26,10,26,12,26,390,9,26,1,27,3,27,393,
        8,27,1,27,1,27,1,27,3,27,398,8,27,1,27,3,27,401,8,27,1,27,3,27,404,
        8,27,1,27,1,27,3,27,408,8,27,1,27,1,27,3,27,412,8,27,1,27,3,27,415,
        8,27,3,27,417,8,27,1,27,3,27,420,8,27,1,27,1,27,3,27,424,8,27,1,
        27,1,27,3,27,428,8,27,1,27,3,27,431,8,27,3,27,433,8,27,3,27,435,
        8,27,1,28,1,28,1,28,3,28,440,8,28,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,3,29,451,8,29,1,30,1,30,1,30,1,30,3,30,457,8,30,1,
        31,1,31,1,31,5,31,462,8,31,10,31,12,31,465,9,31,1,32,1,32,3,32,469,
        8,32,1,32,1,32,3,32,473,8,32,1,32,1,32,3,32,477,8,32,1,33,1,33,1,
        33,3,33,482,8,33,1,34,1,34,1,34,5,34,487,8,34,10,34,12,34,490,9,
        34,1,35,1,35,1,35,1,35,1,36,3,36,497,8,36,1,36,3,36,500,8,36,1,36,
        3,36,503,8,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,
        1,39,1,40,1,40,1,40,1,40,1,40,1,40,3,40,522,8,40,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,536,8,41,1,42,
        1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,550,
        8,43,10,43,12,43,553,9,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,
        562,8,43,10,43,12,43,565,9,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        5,43,574,8,43,10,43,12,43,577,9,43,1,43,1,43,1,43,1,43,1,43,3,43,
        584,8,43,1,43,1,43,3,43,588,8,43,1,44,1,44,1,44,5,44,593,8,44,10,
        44,12,44,596,9,44,1,45,1,45,1,45,1,45,1,45,1,45,3,45,604,8,45,1,
        46,1,46,1,46,3,46,609,8,46,1,46,1,46,1,46,1,46,1,46,4,46,616,8,46,
        11,46,12,46,617,1,46,1,46,3,46,622,8,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,653,
        8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,3,46,670,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,3,46,682,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,3,46,692,8,46,1,46,3,46,695,8,46,1,46,1,46,3,46,699,8,46,1,
        46,3,46,702,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
        46,3,46,714,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
        46,1,46,1,46,1,46,1,46,1,46,3,46,731,8,46,1,46,1,46,3,46,735,8,46,
        1,46,1,46,1,46,1,46,3,46,741,8,46,1,46,1,46,1,46,1,46,1,46,3,46,
        748,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,
        760,8,46,1,46,1,46,3,46,764,8,46,1,46,3,46,767,8,46,1,46,1,46,1,
        46,1,46,1,46,1,46,1,46,3,46,776,8,46,1,46,1,46,1,46,1,46,1,46,1,
        46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,790,8,46,1,46,1,46,1,46,1,
        46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
        46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,817,8,46,1,46,1,
        46,1,46,1,46,1,46,1,46,1,46,3,46,826,8,46,5,46,828,8,46,10,46,12,
        46,831,9,46,1,47,1,47,1,47,5,47,836,8,47,10,47,12,47,839,9,47,1,
        48,1,48,3,48,843,8,48,1,49,1,49,1,49,1,49,5,49,849,8,49,10,49,12,
        49,852,9,49,1,49,1,49,1,49,1,49,1,49,5,49,859,8,49,10,49,12,49,862,
        9,49,3,49,864,8,49,1,49,1,49,1,49,1,50,1,50,1,50,5,50,872,8,50,10,
        50,12,50,875,9,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
        51,3,51,887,8,51,1,52,1,52,1,52,1,52,3,52,893,8,52,1,52,3,52,896,
        8,52,1,53,1,53,1,53,5,53,901,8,53,10,53,12,53,904,9,53,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,3,54,913,8,54,1,54,1,54,1,54,1,54,3,54,
        919,8,54,5,54,921,8,54,10,54,12,54,924,9,54,1,55,1,55,1,55,3,55,
        929,8,55,1,55,1,55,1,56,1,56,1,56,3,56,936,8,56,1,56,1,56,1,57,1,
        57,1,57,5,57,943,8,57,10,57,12,57,946,9,57,1,58,1,58,1,58,3,58,951,
        8,58,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,3,60,961,8,60,3,60,
        963,8,60,1,61,3,61,966,8,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,974,
        8,61,1,62,1,62,1,62,3,62,979,8,62,1,63,1,63,1,64,1,64,1,65,1,65,
        1,66,1,66,3,66,989,8,66,1,67,1,67,1,67,3,67,994,8,67,1,68,1,68,1,
        68,1,68,1,68,0,3,52,92,108,69,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
        110,112,114,116,118,120,122,124,126,128,130,132,134,136,0,16,2,0,
        32,32,141,141,2,0,84,84,96,96,3,0,4,4,8,8,12,12,4,0,4,4,7,8,12,12,
        147,147,2,0,96,96,140,140,2,0,4,4,8,8,2,0,11,11,42,43,2,0,62,62,
        93,93,2,0,133,133,143,143,3,0,17,17,95,95,170,170,2,0,79,79,98,98,
        1,0,197,198,2,0,209,209,229,229,8,0,37,37,76,76,108,108,110,110,
        132,132,145,145,186,186,191,191,14,0,2,24,26,36,38,75,77,81,83,107,
        109,109,111,112,114,115,117,130,133,144,146,181,183,185,187,190,
        192,193,4,0,36,36,62,62,77,77,91,91,1121,0,141,1,0,0,0,2,148,1,0,
        0,0,4,150,1,0,0,0,6,152,1,0,0,0,8,164,1,0,0,0,10,166,1,0,0,0,12,
        169,1,0,0,0,14,178,1,0,0,0,16,189,1,0,0,0,18,193,1,0,0,0,20,207,
        1,0,0,0,22,210,1,0,0,0,24,259,1,0,0,0,26,262,1,0,0,0,28,268,1,0,
        0,0,30,272,1,0,0,0,32,278,1,0,0,0,34,296,1,0,0,0,36,299,1,0,0,0,
        38,302,1,0,0,0,40,312,1,0,0,0,42,315,1,0,0,0,44,319,1,0,0,0,46,352,
        1,0,0,0,48,354,1,0,0,0,50,357,1,0,0,0,52,372,1,0,0,0,54,434,1,0,
        0,0,56,439,1,0,0,0,58,450,1,0,0,0,60,452,1,0,0,0,62,458,1,0,0,0,
        64,466,1,0,0,0,66,478,1,0,0,0,68,483,1,0,0,0,70,491,1,0,0,0,72,496,
        1,0,0,0,74,504,1,0,0,0,76,508,1,0,0,0,78,512,1,0,0,0,80,521,1,0,
        0,0,82,535,1,0,0,0,84,537,1,0,0,0,86,587,1,0,0,0,88,589,1,0,0,0,
        90,597,1,0,0,0,92,734,1,0,0,0,94,832,1,0,0,0,96,842,1,0,0,0,98,863,
        1,0,0,0,100,868,1,0,0,0,102,886,1,0,0,0,104,895,1,0,0,0,106,897,
        1,0,0,0,108,912,1,0,0,0,110,925,1,0,0,0,112,935,1,0,0,0,114,939,
        1,0,0,0,116,950,1,0,0,0,118,952,1,0,0,0,120,962,1,0,0,0,122,965,
        1,0,0,0,124,978,1,0,0,0,126,980,1,0,0,0,128,982,1,0,0,0,130,984,
        1,0,0,0,132,988,1,0,0,0,134,993,1,0,0,0,136,995,1,0,0,0,138,140,
        3,2,1,0,139,138,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,
        1,0,0,0,142,144,1,0,0,0,143,141,1,0,0,0,144,145,5,0,0,1,145,1,1,
        0,0,0,146,149,3,6,3,0,147,149,3,8,4,0,148,146,1,0,0,0,148,147,1,
        0,0,0,149,3,1,0,0,0,150,151,3,92,46,0,151,5,1,0,0,0,152,153,5,182,
        0,0,153,157,5,195,0,0,154,155,5,206,0,0,155,156,5,213,0,0,156,158,
        3,4,2,0,157,154,1,0,0,0,157,158,1,0,0,0,158,159,1,0,0,0,159,160,
        5,238,0,0,160,7,1,0,0,0,161,165,3,10,5,0,162,165,3,12,6,0,163,165,
        3,14,7,0,164,161,1,0,0,0,164,162,1,0,0,0,164,163,1,0,0,0,165,9,1,
        0,0,0,166,167,3,4,2,0,167,168,5,238,0,0,168,11,1,0,0,0,169,170,5,
        78,0,0,170,171,5,221,0,0,171,172,3,4,2,0,172,173,5,237,0,0,173,176,
        3,8,4,0,174,175,5,52,0,0,175,177,3,8,4,0,176,174,1,0,0,0,176,177,
        1,0,0,0,177,13,1,0,0,0,178,182,5,219,0,0,179,181,3,2,1,0,180,179,
        1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,185,
        1,0,0,0,184,182,1,0,0,0,185,186,5,235,0,0,186,15,1,0,0,0,187,190,
        3,18,9,0,188,190,3,22,11,0,189,187,1,0,0,0,189,188,1,0,0,0,190,191,
        1,0,0,0,191,192,5,0,0,1,192,17,1,0,0,0,193,199,3,20,10,0,194,195,
        5,176,0,0,195,196,5,4,0,0,196,198,3,20,10,0,197,194,1,0,0,0,198,
        201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,19,1,0,0,0,201,199,
        1,0,0,0,202,208,3,22,11,0,203,204,5,221,0,0,204,205,3,18,9,0,205,
        206,5,237,0,0,206,208,1,0,0,0,207,202,1,0,0,0,207,203,1,0,0,0,208,
        21,1,0,0,0,209,211,3,24,12,0,210,209,1,0,0,0,210,211,1,0,0,0,211,
        212,1,0,0,0,212,214,5,146,0,0,213,215,5,49,0,0,214,213,1,0,0,0,214,
        215,1,0,0,0,215,217,1,0,0,0,216,218,3,26,13,0,217,216,1,0,0,0,217,
        218,1,0,0,0,218,219,1,0,0,0,219,221,3,88,44,0,220,222,3,28,14,0,
        221,220,1,0,0,0,221,222,1,0,0,0,222,224,1,0,0,0,223,225,3,30,15,
        0,224,223,1,0,0,0,224,225,1,0,0,0,225,227,1,0,0,0,226,228,3,34,17,
        0,227,226,1,0,0,0,227,228,1,0,0,0,228,230,1,0,0,0,229,231,3,36,18,
        0,230,229,1,0,0,0,230,231,1,0,0,0,231,233,1,0,0,0,232,234,3,38,19,
        0,233,232,1,0,0,0,233,234,1,0,0,0,234,237,1,0,0,0,235,236,5,190,
        0,0,236,238,7,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,241,1,0,
        0,0,239,240,5,190,0,0,240,242,5,169,0,0,241,239,1,0,0,0,241,242,
        1,0,0,0,242,244,1,0,0,0,243,245,3,40,20,0,244,243,1,0,0,0,244,245,
        1,0,0,0,245,247,1,0,0,0,246,248,3,32,16,0,247,246,1,0,0,0,247,248,
        1,0,0,0,248,250,1,0,0,0,249,251,3,42,21,0,250,249,1,0,0,0,250,251,
        1,0,0,0,251,254,1,0,0,0,252,255,3,46,23,0,253,255,3,48,24,0,254,
        252,1,0,0,0,254,253,1,0,0,0,254,255,1,0,0,0,255,257,1,0,0,0,256,
        258,3,50,25,0,257,256,1,0,0,0,257,258,1,0,0,0,258,23,1,0,0,0,259,
        260,5,190,0,0,260,261,3,100,50,0,261,25,1,0,0,0,262,263,5,168,0,
        0,263,266,5,198,0,0,264,265,5,190,0,0,265,267,5,164,0,0,266,264,
        1,0,0,0,266,267,1,0,0,0,267,27,1,0,0,0,268,269,5,68,0,0,269,270,
        3,52,26,0,270,29,1,0,0,0,271,273,7,1,0,0,272,271,1,0,0,0,272,273,
        1,0,0,0,273,274,1,0,0,0,274,275,5,9,0,0,275,276,5,90,0,0,276,277,
        3,88,44,0,277,31,1,0,0,0,278,279,5,189,0,0,279,280,3,134,67,0,280,
        281,5,10,0,0,281,282,5,221,0,0,282,283,3,72,36,0,283,293,5,237,0,
        0,284,285,5,207,0,0,285,286,3,134,67,0,286,287,5,10,0,0,287,288,
        5,221,0,0,288,289,3,72,36,0,289,290,5,237,0,0,290,292,1,0,0,0,291,
        284,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,
        33,1,0,0,0,295,293,1,0,0,0,296,297,5,129,0,0,297,298,3,92,46,0,298,
        35,1,0,0,0,299,300,5,188,0,0,300,301,3,92,46,0,301,37,1,0,0,0,302,
        303,5,73,0,0,303,310,5,18,0,0,304,305,7,0,0,0,305,306,5,221,0,0,
        306,307,3,88,44,0,307,308,5,237,0,0,308,311,1,0,0,0,309,311,3,88,
        44,0,310,304,1,0,0,0,310,309,1,0,0,0,311,39,1,0,0,0,312,313,5,74,
        0,0,313,314,3,92,46,0,314,41,1,0,0,0,315,316,5,122,0,0,316,317,5,
        18,0,0,317,318,3,62,31,0,318,43,1,0,0,0,319,320,5,122,0,0,320,321,
        5,18,0,0,321,322,3,88,44,0,322,45,1,0,0,0,323,324,5,99,0,0,324,327,
        3,92,46,0,325,326,5,207,0,0,326,328,3,92,46,0,327,325,1,0,0,0,327,
        328,1,0,0,0,328,333,1,0,0,0,329,330,5,190,0,0,330,334,5,164,0,0,
        331,332,5,18,0,0,332,334,3,88,44,0,333,329,1,0,0,0,333,331,1,0,0,
        0,333,334,1,0,0,0,334,353,1,0,0,0,335,336,5,99,0,0,336,339,3,92,
        46,0,337,338,5,190,0,0,338,340,5,164,0,0,339,337,1,0,0,0,339,340,
        1,0,0,0,340,341,1,0,0,0,341,342,5,118,0,0,342,343,3,92,46,0,343,
        353,1,0,0,0,344,345,5,99,0,0,345,346,3,92,46,0,346,347,5,118,0,0,
        347,350,3,92,46,0,348,349,5,18,0,0,349,351,3,88,44,0,350,348,1,0,
        0,0,350,351,1,0,0,0,351,353,1,0,0,0,352,323,1,0,0,0,352,335,1,0,
        0,0,352,344,1,0,0,0,353,47,1,0,0,0,354,355,5,118,0,0,355,356,3,92,
        46,0,356,49,1,0,0,0,357,358,5,150,0,0,358,359,3,68,34,0,359,51,1,
        0,0,0,360,361,6,26,-1,0,361,363,3,108,54,0,362,364,5,61,0,0,363,
        362,1,0,0,0,363,364,1,0,0,0,364,366,1,0,0,0,365,367,3,60,30,0,366,
        365,1,0,0,0,366,367,1,0,0,0,367,373,1,0,0,0,368,369,5,221,0,0,369,
        370,3,52,26,0,370,371,5,237,0,0,371,373,1,0,0,0,372,360,1,0,0,0,
        372,368,1,0,0,0,373,388,1,0,0,0,374,375,10,3,0,0,375,376,3,56,28,
        0,376,377,3,52,26,4,377,387,1,0,0,0,378,380,10,4,0,0,379,381,3,54,
        27,0,380,379,1,0,0,0,380,381,1,0,0,0,381,382,1,0,0,0,382,383,5,90,
        0,0,383,384,3,52,26,0,384,385,3,58,29,0,385,387,1,0,0,0,386,374,
        1,0,0,0,386,378,1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,388,389,
        1,0,0,0,389,53,1,0,0,0,390,388,1,0,0,0,391,393,7,2,0,0,392,391,1,
        0,0,0,392,393,1,0,0,0,393,394,1,0,0,0,394,401,5,84,0,0,395,397,5,
        84,0,0,396,398,7,2,0,0,397,396,1,0,0,0,397,398,1,0,0,0,398,401,1,
        0,0,0,399,401,7,2,0,0,400,392,1,0,0,0,400,395,1,0,0,0,400,399,1,
        0,0,0,401,435,1,0,0,0,402,404,7,3,0,0,403,402,1,0,0,0,403,404,1,
        0,0,0,404,405,1,0,0,0,405,407,7,4,0,0,406,408,5,123,0,0,407,406,
        1,0,0,0,407,408,1,0,0,0,408,417,1,0,0,0,409,411,7,4,0,0,410,412,
        5,123,0,0,411,410,1,0,0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,415,
        7,3,0,0,414,413,1,0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,416,403,
        1,0,0,0,416,409,1,0,0,0,417,435,1,0,0,0,418,420,7,5,0,0,419,418,
        1,0,0,0,419,420,1,0,0,0,420,421,1,0,0,0,421,423,5,69,0,0,422,424,
        5,123,0,0,423,422,1,0,0,0,423,424,1,0,0,0,424,433,1,0,0,0,425,427,
        5,69,0,0,426,428,5,123,0,0,427,426,1,0,0,0,427,428,1,0,0,0,428,430,
        1,0,0,0,429,431,7,5,0,0,430,429,1,0,0,0,430,431,1,0,0,0,431,433,
        1,0,0,0,432,419,1,0,0,0,432,425,1,0,0,0,433,435,1,0,0,0,434,400,
        1,0,0,0,434,416,1,0,0,0,434,432,1,0,0,0,435,55,1,0,0,0,436,437,5,
        31,0,0,437,440,5,90,0,0,438,440,5,207,0,0,439,436,1,0,0,0,439,438,
        1,0,0,0,440,57,1,0,0,0,441,442,5,119,0,0,442,451,3,88,44,0,443,444,
        5,179,0,0,444,445,5,221,0,0,445,446,3,88,44,0,446,447,5,237,0,0,
        447,451,1,0,0,0,448,449,5,179,0,0,449,451,3,88,44,0,450,441,1,0,
        0,0,450,443,1,0,0,0,450,448,1,0,0,0,451,59,1,0,0,0,452,453,5,144,
        0,0,453,456,3,66,33,0,454,455,5,118,0,0,455,457,3,66,33,0,456,454,
        1,0,0,0,456,457,1,0,0,0,457,61,1,0,0,0,458,463,3,64,32,0,459,460,
        5,207,0,0,460,462,3,64,32,0,461,459,1,0,0,0,462,465,1,0,0,0,463,
        461,1,0,0,0,463,464,1,0,0,0,464,63,1,0,0,0,465,463,1,0,0,0,466,468,
        3,92,46,0,467,469,7,6,0,0,468,467,1,0,0,0,468,469,1,0,0,0,469,472,
        1,0,0,0,470,471,5,117,0,0,471,473,7,7,0,0,472,470,1,0,0,0,472,473,
        1,0,0,0,473,476,1,0,0,0,474,475,5,26,0,0,475,477,5,200,0,0,476,474,
        1,0,0,0,476,477,1,0,0,0,477,65,1,0,0,0,478,481,3,122,61,0,479,480,
        5,239,0,0,480,482,3,122,61,0,481,479,1,0,0,0,481,482,1,0,0,0,482,
        67,1,0,0,0,483,488,3,70,35,0,484,485,5,207,0,0,485,487,3,70,35,0,
        486,484,1,0,0,0,487,490,1,0,0,0,488,486,1,0,0,0,488,489,1,0,0,0,
        489,69,1,0,0,0,490,488,1,0,0,0,491,492,3,134,67,0,492,493,5,213,
        0,0,493,494,3,124,62,0,494,71,1,0,0,0,495,497,3,74,37,0,496,495,
        1,0,0,0,496,497,1,0,0,0,497,499,1,0,0,0,498,500,3,76,38,0,499,498,
        1,0,0,0,499,500,1,0,0,0,500,502,1,0,0,0,501,503,3,78,39,0,502,501,
        1,0,0,0,502,503,1,0,0,0,503,73,1,0,0,0,504,505,5,126,0,0,505,506,
        5,18,0,0,506,507,3,88,44,0,507,75,1,0,0,0,508,509,5,122,0,0,509,
        510,5,18,0,0,510,511,3,62,31,0,511,77,1,0,0,0,512,513,7,8,0,0,513,
        514,3,80,40,0,514,79,1,0,0,0,515,522,3,82,41,0,516,517,5,16,0,0,
        517,518,3,82,41,0,518,519,5,6,0,0,519,520,3,82,41,0,520,522,1,0,
        0,0,521,515,1,0,0,0,521,516,1,0,0,0,522,81,1,0,0,0,523,524,5,33,
        0,0,524,536,5,142,0,0,525,526,5,175,0,0,526,536,5,128,0,0,527,528,
        5,175,0,0,528,536,5,64,0,0,529,530,3,122,61,0,530,531,5,128,0,0,
        531,536,1,0,0,0,532,533,3,122,61,0,533,534,5,64,0,0,534,536,1,0,
        0,0,535,523,1,0,0,0,535,525,1,0,0,0,535,527,1,0,0,0,535,529,1,0,
        0,0,535,532,1,0,0,0,536,83,1,0,0,0,537,538,3,92,46,0,538,539,5,0,
        0,1,539,85,1,0,0,0,540,588,3,134,67,0,541,542,3,134,67,0,542,543,
        5,221,0,0,543,544,3,134,67,0,544,551,3,86,43,0,545,546,5,207,0,0,
        546,547,3,134,67,0,547,548,3,86,43,0,548,550,1,0,0,0,549,545,1,0,
        0,0,550,553,1,0,0,0,551,549,1,0,0,0,551,552,1,0,0,0,552,554,1,0,
        0,0,553,551,1,0,0,0,554,555,5,237,0,0,555,588,1,0,0,0,556,557,3,
        134,67,0,557,558,5,221,0,0,558,563,3,136,68,0,559,560,5,207,0,0,
        560,562,3,136,68,0,561,559,1,0,0,0,562,565,1,0,0,0,563,561,1,0,0,
        0,563,564,1,0,0,0,564,566,1,0,0,0,565,563,1,0,0,0,566,567,5,237,
        0,0,567,588,1,0,0,0,568,569,3,134,67,0,569,570,5,221,0,0,570,575,
        3,86,43,0,571,572,5,207,0,0,572,574,3,86,43,0,573,571,1,0,0,0,574,
        577,1,0,0,0,575,573,1,0,0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,
        575,1,0,0,0,578,579,5,237,0,0,579,588,1,0,0,0,580,581,3,134,67,0,
        581,583,5,221,0,0,582,584,3,88,44,0,583,582,1,0,0,0,583,584,1,0,
        0,0,584,585,1,0,0,0,585,586,5,237,0,0,586,588,1,0,0,0,587,540,1,
        0,0,0,587,541,1,0,0,0,587,556,1,0,0,0,587,568,1,0,0,0,587,580,1,
        0,0,0,588,87,1,0,0,0,589,594,3,90,45,0,590,591,5,207,0,0,591,593,
        3,90,45,0,592,590,1,0,0,0,593,596,1,0,0,0,594,592,1,0,0,0,594,595,
        1,0,0,0,595,89,1,0,0,0,596,594,1,0,0,0,597,603,3,92,46,0,598,604,
        3,132,66,0,599,600,5,10,0,0,600,604,3,134,67,0,601,602,5,10,0,0,
        602,604,5,200,0,0,603,598,1,0,0,0,603,599,1,0,0,0,603,601,1,0,0,
        0,603,604,1,0,0,0,604,91,1,0,0,0,605,606,6,46,-1,0,606,608,5,19,
        0,0,607,609,3,92,46,0,608,607,1,0,0,0,608,609,1,0,0,0,609,615,1,
        0,0,0,610,611,5,187,0,0,611,612,3,92,46,0,612,613,5,163,0,0,613,
        614,3,92,46,0,614,616,1,0,0,0,615,610,1,0,0,0,616,617,1,0,0,0,617,
        615,1,0,0,0,617,618,1,0,0,0,618,621,1,0,0,0,619,620,5,52,0,0,620,
        622,3,92,46,0,621,619,1,0,0,0,621,622,1,0,0,0,622,623,1,0,0,0,623,
        624,5,53,0,0,624,735,1,0,0,0,625,626,5,20,0,0,626,627,5,221,0,0,
        627,628,3,92,46,0,628,629,5,10,0,0,629,630,3,86,43,0,630,631,5,237,
        0,0,631,735,1,0,0,0,632,633,5,36,0,0,633,735,5,200,0,0,634,635,5,
        59,0,0,635,636,5,221,0,0,636,637,3,126,63,0,637,638,5,68,0,0,638,
        639,3,92,46,0,639,640,5,237,0,0,640,735,1,0,0,0,641,642,5,86,0,0,
        642,643,3,92,46,0,643,644,3,126,63,0,644,735,1,0,0,0,645,646,5,155,
        0,0,646,647,5,221,0,0,647,648,3,92,46,0,648,649,5,68,0,0,649,652,
        3,92,46,0,650,651,5,65,0,0,651,653,3,92,46,0,652,650,1,0,0,0,652,
        653,1,0,0,0,653,654,1,0,0,0,654,655,5,237,0,0,655,735,1,0,0,0,656,
        657,5,166,0,0,657,735,5,200,0,0,658,659,5,171,0,0,659,660,5,221,
        0,0,660,661,7,9,0,0,661,662,5,200,0,0,662,663,5,68,0,0,663,664,3,
        92,46,0,664,665,5,237,0,0,665,735,1,0,0,0,666,667,3,134,67,0,667,
        669,5,221,0,0,668,670,3,88,44,0,669,668,1,0,0,0,669,670,1,0,0,0,
        670,671,1,0,0,0,671,672,5,237,0,0,672,673,1,0,0,0,673,674,5,125,
        0,0,674,675,5,221,0,0,675,676,3,72,36,0,676,677,5,237,0,0,677,735,
        1,0,0,0,678,679,3,134,67,0,679,681,5,221,0,0,680,682,3,88,44,0,681,
        680,1,0,0,0,681,682,1,0,0,0,682,683,1,0,0,0,683,684,5,237,0,0,684,
        685,1,0,0,0,685,686,5,125,0,0,686,687,3,134,67,0,687,735,1,0,0,0,
        688,694,3,134,67,0,689,691,5,221,0,0,690,692,3,88,44,0,691,690,1,
        0,0,0,691,692,1,0,0,0,692,693,1,0,0,0,693,695,5,237,0,0,694,689,
        1,0,0,0,694,695,1,0,0,0,695,696,1,0,0,0,696,698,5,221,0,0,697,699,
        5,49,0,0,698,697,1,0,0,0,698,699,1,0,0,0,699,701,1,0,0,0,700,702,
        3,94,47,0,701,700,1,0,0,0,701,702,1,0,0,0,702,703,1,0,0,0,703,704,
        5,237,0,0,704,735,1,0,0,0,705,735,3,124,62,0,706,707,5,209,0,0,707,
        735,3,92,46,18,708,709,5,115,0,0,709,735,3,92,46,12,710,711,3,112,
        56,0,711,712,5,211,0,0,712,714,1,0,0,0,713,710,1,0,0,0,713,714,1,
        0,0,0,714,715,1,0,0,0,715,735,5,203,0,0,716,717,5,221,0,0,717,718,
        3,18,9,0,718,719,5,237,0,0,719,735,1,0,0,0,720,721,5,221,0,0,721,
        722,3,92,46,0,722,723,5,237,0,0,723,735,1,0,0,0,724,725,5,221,0,
        0,725,726,3,88,44,0,726,727,5,237,0,0,727,735,1,0,0,0,728,730,5,
        220,0,0,729,731,3,88,44,0,730,729,1,0,0,0,730,731,1,0,0,0,731,732,
        1,0,0,0,732,735,5,236,0,0,733,735,3,104,52,0,734,605,1,0,0,0,734,
        625,1,0,0,0,734,632,1,0,0,0,734,634,1,0,0,0,734,641,1,0,0,0,734,
        645,1,0,0,0,734,656,1,0,0,0,734,658,1,0,0,0,734,666,1,0,0,0,734,
        678,1,0,0,0,734,688,1,0,0,0,734,705,1,0,0,0,734,706,1,0,0,0,734,
        708,1,0,0,0,734,713,1,0,0,0,734,716,1,0,0,0,734,720,1,0,0,0,734,
        724,1,0,0,0,734,728,1,0,0,0,734,733,1,0,0,0,735,829,1,0,0,0,736,
        740,10,17,0,0,737,741,5,203,0,0,738,741,5,239,0,0,739,741,5,228,
        0,0,740,737,1,0,0,0,740,738,1,0,0,0,740,739,1,0,0,0,741,742,1,0,
        0,0,742,828,3,92,46,18,743,747,10,16,0,0,744,748,5,229,0,0,745,748,
        5,209,0,0,746,748,5,208,0,0,747,744,1,0,0,0,747,745,1,0,0,0,747,
        746,1,0,0,0,748,749,1,0,0,0,749,828,3,92,46,17,750,775,10,15,0,0,
        751,776,5,212,0,0,752,776,5,213,0,0,753,776,5,224,0,0,754,776,5,
        222,0,0,755,776,5,223,0,0,756,776,5,214,0,0,757,776,5,215,0,0,758,
        760,5,115,0,0,759,758,1,0,0,0,759,760,1,0,0,0,760,761,1,0,0,0,761,
        763,5,80,0,0,762,764,5,25,0,0,763,762,1,0,0,0,763,764,1,0,0,0,764,
        776,1,0,0,0,765,767,5,115,0,0,766,765,1,0,0,0,766,767,1,0,0,0,767,
        768,1,0,0,0,768,776,7,10,0,0,769,776,5,233,0,0,770,776,5,234,0,0,
        771,776,5,226,0,0,772,776,5,217,0,0,773,776,5,218,0,0,774,776,5,
        225,0,0,775,751,1,0,0,0,775,752,1,0,0,0,775,753,1,0,0,0,775,754,
        1,0,0,0,775,755,1,0,0,0,775,756,1,0,0,0,775,757,1,0,0,0,775,759,
        1,0,0,0,775,766,1,0,0,0,775,769,1,0,0,0,775,770,1,0,0,0,775,771,
        1,0,0,0,775,772,1,0,0,0,775,773,1,0,0,0,775,774,1,0,0,0,776,777,
        1,0,0,0,777,828,3,92,46,16,778,779,10,13,0,0,779,780,5,227,0,0,780,
        828,3,92,46,14,781,782,10,11,0,0,782,783,5,6,0,0,783,828,3,92,46,
        12,784,785,10,10,0,0,785,786,5,121,0,0,786,828,3,92,46,11,787,789,
        10,9,0,0,788,790,5,115,0,0,789,788,1,0,0,0,789,790,1,0,0,0,790,791,
        1,0,0,0,791,792,5,16,0,0,792,793,3,92,46,0,793,794,5,6,0,0,794,795,
        3,92,46,10,795,828,1,0,0,0,796,797,10,8,0,0,797,798,5,230,0,0,798,
        799,3,92,46,0,799,800,5,206,0,0,800,801,3,92,46,8,801,828,1,0,0,
        0,802,803,10,21,0,0,803,804,5,220,0,0,804,805,3,92,46,0,805,806,
        5,236,0,0,806,828,1,0,0,0,807,808,10,20,0,0,808,809,5,211,0,0,809,
        828,5,198,0,0,810,811,10,19,0,0,811,812,5,211,0,0,812,828,3,134,
        67,0,813,814,10,14,0,0,814,816,5,88,0,0,815,817,5,115,0,0,816,815,
        1,0,0,0,816,817,1,0,0,0,817,818,1,0,0,0,818,828,5,116,0,0,819,825,
        10,7,0,0,820,826,3,132,66,0,821,822,5,10,0,0,822,826,3,134,67,0,
        823,824,5,10,0,0,824,826,5,200,0,0,825,820,1,0,0,0,825,821,1,0,0,
        0,825,823,1,0,0,0,826,828,1,0,0,0,827,736,1,0,0,0,827,743,1,0,0,
        0,827,750,1,0,0,0,827,778,1,0,0,0,827,781,1,0,0,0,827,784,1,0,0,
        0,827,787,1,0,0,0,827,796,1,0,0,0,827,802,1,0,0,0,827,807,1,0,0,
        0,827,810,1,0,0,0,827,813,1,0,0,0,827,819,1,0,0,0,828,831,1,0,0,
        0,829,827,1,0,0,0,829,830,1,0,0,0,830,93,1,0,0,0,831,829,1,0,0,0,
        832,837,3,96,48,0,833,834,5,207,0,0,834,836,3,96,48,0,835,833,1,
        0,0,0,836,839,1,0,0,0,837,835,1,0,0,0,837,838,1,0,0,0,838,95,1,0,
        0,0,839,837,1,0,0,0,840,843,3,98,49,0,841,843,3,92,46,0,842,840,
        1,0,0,0,842,841,1,0,0,0,843,97,1,0,0,0,844,845,5,221,0,0,845,850,
        3,134,67,0,846,847,5,207,0,0,847,849,3,134,67,0,848,846,1,0,0,0,
        849,852,1,0,0,0,850,848,1,0,0,0,850,851,1,0,0,0,851,853,1,0,0,0,
        852,850,1,0,0,0,853,854,5,237,0,0,854,864,1,0,0,0,855,860,3,134,
        67,0,856,857,5,207,0,0,857,859,3,134,67,0,858,856,1,0,0,0,859,862,
        1,0,0,0,860,858,1,0,0,0,860,861,1,0,0,0,861,864,1,0,0,0,862,860,
        1,0,0,0,863,844,1,0,0,0,863,855,1,0,0,0,864,865,1,0,0,0,865,866,
        5,202,0,0,866,867,3,92,46,0,867,99,1,0,0,0,868,873,3,102,51,0,869,
        870,5,207,0,0,870,872,3,102,51,0,871,869,1,0,0,0,872,875,1,0,0,0,
        873,871,1,0,0,0,873,874,1,0,0,0,874,101,1,0,0,0,875,873,1,0,0,0,
        876,877,3,134,67,0,877,878,5,10,0,0,878,879,5,221,0,0,879,880,3,
        18,9,0,880,881,5,237,0,0,881,887,1,0,0,0,882,883,3,92,46,0,883,884,
        5,10,0,0,884,885,3,134,67,0,885,887,1,0,0,0,886,876,1,0,0,0,886,
        882,1,0,0,0,887,103,1,0,0,0,888,896,5,201,0,0,889,890,3,112,56,0,
        890,891,5,211,0,0,891,893,1,0,0,0,892,889,1,0,0,0,892,893,1,0,0,
        0,893,894,1,0,0,0,894,896,3,106,53,0,895,888,1,0,0,0,895,892,1,0,
        0,0,896,105,1,0,0,0,897,902,3,134,67,0,898,899,5,211,0,0,899,901,
        3,134,67,0,900,898,1,0,0,0,901,904,1,0,0,0,902,900,1,0,0,0,902,903,
        1,0,0,0,903,107,1,0,0,0,904,902,1,0,0,0,905,906,6,54,-1,0,906,913,
        3,112,56,0,907,913,3,110,55,0,908,909,5,221,0,0,909,910,3,18,9,0,
        910,911,5,237,0,0,911,913,1,0,0,0,912,905,1,0,0,0,912,907,1,0,0,
        0,912,908,1,0,0,0,913,922,1,0,0,0,914,918,10,1,0,0,915,919,3,132,
        66,0,916,917,5,10,0,0,917,919,3,134,67,0,918,915,1,0,0,0,918,916,
        1,0,0,0,919,921,1,0,0,0,920,914,1,0,0,0,921,924,1,0,0,0,922,920,
        1,0,0,0,922,923,1,0,0,0,923,109,1,0,0,0,924,922,1,0,0,0,925,926,
        3,134,67,0,926,928,5,221,0,0,927,929,3,114,57,0,928,927,1,0,0,0,
        928,929,1,0,0,0,929,930,1,0,0,0,930,931,5,237,0,0,931,111,1,0,0,
        0,932,933,3,118,59,0,933,934,5,211,0,0,934,936,1,0,0,0,935,932,1,
        0,0,0,935,936,1,0,0,0,936,937,1,0,0,0,937,938,3,134,67,0,938,113,
        1,0,0,0,939,944,3,116,58,0,940,941,5,207,0,0,941,943,3,116,58,0,
        942,940,1,0,0,0,943,946,1,0,0,0,944,942,1,0,0,0,944,945,1,0,0,0,
        945,115,1,0,0,0,946,944,1,0,0,0,947,951,3,106,53,0,948,951,3,110,
        55,0,949,951,3,124,62,0,950,947,1,0,0,0,950,948,1,0,0,0,950,949,
        1,0,0,0,951,117,1,0,0,0,952,953,3,134,67,0,953,119,1,0,0,0,954,963,
        5,196,0,0,955,956,5,211,0,0,956,963,7,11,0,0,957,958,5,198,0,0,958,
        960,5,211,0,0,959,961,7,11,0,0,960,959,1,0,0,0,960,961,1,0,0,0,961,
        963,1,0,0,0,962,954,1,0,0,0,962,955,1,0,0,0,962,957,1,0,0,0,963,
        121,1,0,0,0,964,966,7,12,0,0,965,964,1,0,0,0,965,966,1,0,0,0,966,
        973,1,0,0,0,967,974,3,120,60,0,968,974,5,197,0,0,969,974,5,198,0,
        0,970,974,5,199,0,0,971,974,5,82,0,0,972,974,5,113,0,0,973,967,1,
        0,0,0,973,968,1,0,0,0,973,969,1,0,0,0,973,970,1,0,0,0,973,971,1,
        0,0,0,973,972,1,0,0,0,974,123,1,0,0,0,975,979,3,122,61,0,976,979,
        5,200,0,0,977,979,5,116,0,0,978,975,1,0,0,0,978,976,1,0,0,0,978,
        977,1,0,0,0,979,125,1,0,0,0,980,981,7,13,0,0,981,127,1,0,0,0,982,
        983,7,14,0,0,983,129,1,0,0,0,984,985,7,15,0,0,985,131,1,0,0,0,986,
        989,5,195,0,0,987,989,3,130,65,0,988,986,1,0,0,0,988,987,1,0,0,0,
        989,133,1,0,0,0,990,994,5,195,0,0,991,994,3,126,63,0,992,994,3,128,
        64,0,993,990,1,0,0,0,993,991,1,0,0,0,993,992,1,0,0,0,994,135,1,0,
        0,0,995,996,5,200,0,0,996,997,5,213,0,0,997,998,3,122,61,0,998,137,
        1,0,0,0,122,141,148,157,164,176,182,189,199,207,210,214,217,221,
        224,227,230,233,237,241,244,247,250,254,257,266,272,293,310,327,
        333,339,350,352,363,366,372,380,386,388,392,397,400,403,407,411,
        414,416,419,423,427,430,432,434,439,450,456,463,468,472,476,481,
        488,496,499,502,521,535,551,563,575,583,587,594,603,608,617,621,
        652,669,681,691,694,698,701,713,730,734,740,747,759,763,766,775,
        789,816,825,827,829,837,842,850,860,863,873,886,892,895,902,912,
        918,922,928,935,944,950,960,962,965,973,978,988,993
    ]

class HogQLParser ( Parser ):

    grammarFileName = "HogQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'false'", "'true'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'->'", "'*'", "'`'", "'\\'", "':'", "','", 
                     "'||'", "'-'", "'$'", "'.'", "'=='", "'='", "'>='", 
                     "'>'", "'#'", "'~*'", "'=~*'", "'{'", "'['", "'('", 
                     "'<='", "'<'", "<INVALID>", "'!~*'", "'!~'", "'??'", 
                     "'%'", "'+'", "'?'", "'\"'", "'''", "'~'", "'=~'", 
                     "'}'", "']'", "')'", "';'", "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "ADD", "AFTER", "ALIAS", "ALL", "ALTER", 
                      "AND", "ANTI", "ANY", "ARRAY", "AS", "ASCENDING", 
                      "ASOF", "AST", "ASYNC", "ATTACH", "BETWEEN", "BOTH", 
                      "BY", "CASE", "CAST", "CHECK", "CLEAR", "CLUSTER", 
                      "CODEC", "COHORT", "COLLATE", "COLUMN", "COMMENT", 
                      "CONSTRAINT", "CREATE", "CROSS", "CUBE", "CURRENT", 
                      "DATABASE", "DATABASES", "DATE", "DAY", "DEDUPLICATE", 
                      "DEFAULT", "DELAY", "DELETE", "DESC", "DESCENDING", 
                      "DESCRIBE", "DETACH", "DICTIONARIES", "DICTIONARY", 
                      "DISK", "DISTINCT", "DISTRIBUTED", "DROP", "ELSE", 
                      "END", "ENGINE", "EVENTS", "EXISTS", "EXPLAIN", "EXPRESSION", 
                      "EXTRACT", "FETCHES", "FINAL", "FIRST", "FLUSH", "FOLLOWING", 
                      "FOR", "FORMAT", "FREEZE", "FROM", "FULL", "FUNCTION", 
                      "GLOBAL", "GRANULARITY", "GROUP", "HAVING", "HIERARCHICAL", 
                      "HOUR", "ID", "IF", "ILIKE", "IN", "INDEX", "INF", 
                      "INJECTIVE", "INNER", "INSERT", "INTERVAL", "INTO", 
                      "IS", "IS_OBJECT_ID", "JOIN", "KEY", "KILL", "LAST", 
                      "LAYOUT", "LEADING", "LEFT", "LIFETIME", "LIKE", "LIMIT", 
                      "LIVE", "LOCAL", "LOGS", "MATERIALIZE", "MATERIALIZED", 
                      "MAX", "MERGES", "MIN", "MINUTE", "MODIFY", "MONTH", 
                      "MOVE", "MUTATION", "NAN_SQL", "NO", "NOT", "NULL_SQL", 
                      "NULLS", "OFFSET", "ON", "OPTIMIZE", "OR", "ORDER", 
                      "OUTER", "OUTFILE", "OVER", "PARTITION", "POPULATE", 
                      "PRECEDING", "PREWHERE", "PRIMARY", "PROJECTION", 
                      "QUARTER", "RANGE", "RELOAD", "REMOVE", "RENAME", 
                      "REPLACE", "REPLICA", "REPLICATED", "RIGHT", "ROLLUP", 
                      "ROW", "ROWS", "SAMPLE", "SECOND", "SELECT", "SEMI", 
                      "SENDS", "SET", "SETTINGS", "SHOW", "SOURCE", "START", 
                      "STOP", "SUBSTRING", "SYNC", "SYNTAX", "SYSTEM", "TABLE", 
                      "TABLES", "TEMPORARY", "TEST", "THEN", "TIES", "TIMEOUT", 
                      "TIMESTAMP", "TO", "TOP", "TOTALS", "TRAILING", "TRIM", 
                      "TRUNCATE", "TTL", "TYPE", "UNBOUNDED", "UNION", "UPDATE", 
                      "USE", "USING", "UUID", "VALUES", "VAR", "VIEW", "VOLUME", 
                      "WATCH", "WEEK", "WHEN", "WHERE", "WINDOW", "WITH", 
                      "YEAR", "JSON_FALSE", "JSON_TRUE", "ESCAPE_CHAR", 
                      "IDENTIFIER", "FLOATING_LITERAL", "OCTAL_LITERAL", 
                      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", 
                      "PLACEHOLDER", "ARROW", "ASTERISK", "BACKQUOTE", "BACKSLASH", 
                      "COLON", "COMMA", "CONCAT", "DASH", "DOLLAR", "DOT", 
                      "EQ_DOUBLE", "EQ_SINGLE", "GT_EQ", "GT", "HASH", "IREGEX_SINGLE", 
                      "IREGEX_DOUBLE", "LBRACE", "LBRACKET", "LPAREN", "LT_EQ", 
                      "LT", "NOT_EQ", "NOT_IREGEX", "NOT_REGEX", "NULLISH", 
                      "PERCENT", "PLUS", "QUERY", "QUOTE_DOUBLE", "QUOTE_SINGLE", 
                      "REGEX_SINGLE", "REGEX_DOUBLE", "RBRACE", "RBRACKET", 
                      "RPAREN", "SEMICOLON", "SLASH", "UNDERSCORE", "MULTI_LINE_COMMENT", 
                      "SINGLE_LINE_COMMENT", "WHITESPACE" ]

    RULE_program = 0
    RULE_declaration = 1
    RULE_expression = 2
    RULE_varDecl = 3
    RULE_statement = 4
    RULE_exprStmt = 5
    RULE_ifStmt = 6
    RULE_block = 7
    RULE_select = 8
    RULE_selectUnionStmt = 9
    RULE_selectStmtWithParens = 10
    RULE_selectStmt = 11
    RULE_withClause = 12
    RULE_topClause = 13
    RULE_fromClause = 14
    RULE_arrayJoinClause = 15
    RULE_windowClause = 16
    RULE_prewhereClause = 17
    RULE_whereClause = 18
    RULE_groupByClause = 19
    RULE_havingClause = 20
    RULE_orderByClause = 21
    RULE_projectionOrderByClause = 22
    RULE_limitAndOffsetClause = 23
    RULE_offsetOnlyClause = 24
    RULE_settingsClause = 25
    RULE_joinExpr = 26
    RULE_joinOp = 27
    RULE_joinOpCross = 28
    RULE_joinConstraintClause = 29
    RULE_sampleClause = 30
    RULE_orderExprList = 31
    RULE_orderExpr = 32
    RULE_ratioExpr = 33
    RULE_settingExprList = 34
    RULE_settingExpr = 35
    RULE_windowExpr = 36
    RULE_winPartitionByClause = 37
    RULE_winOrderByClause = 38
    RULE_winFrameClause = 39
    RULE_winFrameExtend = 40
    RULE_winFrameBound = 41
    RULE_expr = 42
    RULE_columnTypeExpr = 43
    RULE_columnExprList = 44
    RULE_columnExprWithAlias = 45
    RULE_columnExpr = 46
    RULE_columnArgList = 47
    RULE_columnArgExpr = 48
    RULE_columnLambdaExpr = 49
    RULE_withExprList = 50
    RULE_withExpr = 51
    RULE_columnIdentifier = 52
    RULE_nestedIdentifier = 53
    RULE_tableExpr = 54
    RULE_tableFunctionExpr = 55
    RULE_tableIdentifier = 56
    RULE_tableArgList = 57
    RULE_tableArgExpr = 58
    RULE_databaseIdentifier = 59
    RULE_floatingLiteral = 60
    RULE_numberLiteral = 61
    RULE_literal = 62
    RULE_interval = 63
    RULE_keyword = 64
    RULE_keywordForAlias = 65
    RULE_alias = 66
    RULE_identifier = 67
    RULE_enumValue = 68

    ruleNames =  [ "program", "declaration", "expression", "varDecl", "statement", 
                   "exprStmt", "ifStmt", "block", "select", "selectUnionStmt", 
                   "selectStmtWithParens", "selectStmt", "withClause", "topClause", 
                   "fromClause", "arrayJoinClause", "windowClause", "prewhereClause", 
                   "whereClause", "groupByClause", "havingClause", "orderByClause", 
                   "projectionOrderByClause", "limitAndOffsetClause", "offsetOnlyClause", 
                   "settingsClause", "joinExpr", "joinOp", "joinOpCross", 
                   "joinConstraintClause", "sampleClause", "orderExprList", 
                   "orderExpr", "ratioExpr", "settingExprList", "settingExpr", 
                   "windowExpr", "winPartitionByClause", "winOrderByClause", 
                   "winFrameClause", "winFrameExtend", "winFrameBound", 
                   "expr", "columnTypeExpr", "columnExprList", "columnExprWithAlias", 
                   "columnExpr", "columnArgList", "columnArgExpr", "columnLambdaExpr", 
                   "withExprList", "withExpr", "columnIdentifier", "nestedIdentifier", 
                   "tableExpr", "tableFunctionExpr", "tableIdentifier", 
                   "tableArgList", "tableArgExpr", "databaseIdentifier", 
                   "floatingLiteral", "numberLiteral", "literal", "interval", 
                   "keyword", "keywordForAlias", "alias", "identifier", 
                   "enumValue" ]

    EOF = Token.EOF
    ADD=1
    AFTER=2
    ALIAS=3
    ALL=4
    ALTER=5
    AND=6
    ANTI=7
    ANY=8
    ARRAY=9
    AS=10
    ASCENDING=11
    ASOF=12
    AST=13
    ASYNC=14
    ATTACH=15
    BETWEEN=16
    BOTH=17
    BY=18
    CASE=19
    CAST=20
    CHECK=21
    CLEAR=22
    CLUSTER=23
    CODEC=24
    COHORT=25
    COLLATE=26
    COLUMN=27
    COMMENT=28
    CONSTRAINT=29
    CREATE=30
    CROSS=31
    CUBE=32
    CURRENT=33
    DATABASE=34
    DATABASES=35
    DATE=36
    DAY=37
    DEDUPLICATE=38
    DEFAULT=39
    DELAY=40
    DELETE=41
    DESC=42
    DESCENDING=43
    DESCRIBE=44
    DETACH=45
    DICTIONARIES=46
    DICTIONARY=47
    DISK=48
    DISTINCT=49
    DISTRIBUTED=50
    DROP=51
    ELSE=52
    END=53
    ENGINE=54
    EVENTS=55
    EXISTS=56
    EXPLAIN=57
    EXPRESSION=58
    EXTRACT=59
    FETCHES=60
    FINAL=61
    FIRST=62
    FLUSH=63
    FOLLOWING=64
    FOR=65
    FORMAT=66
    FREEZE=67
    FROM=68
    FULL=69
    FUNCTION=70
    GLOBAL=71
    GRANULARITY=72
    GROUP=73
    HAVING=74
    HIERARCHICAL=75
    HOUR=76
    ID=77
    IF=78
    ILIKE=79
    IN=80
    INDEX=81
    INF=82
    INJECTIVE=83
    INNER=84
    INSERT=85
    INTERVAL=86
    INTO=87
    IS=88
    IS_OBJECT_ID=89
    JOIN=90
    KEY=91
    KILL=92
    LAST=93
    LAYOUT=94
    LEADING=95
    LEFT=96
    LIFETIME=97
    LIKE=98
    LIMIT=99
    LIVE=100
    LOCAL=101
    LOGS=102
    MATERIALIZE=103
    MATERIALIZED=104
    MAX=105
    MERGES=106
    MIN=107
    MINUTE=108
    MODIFY=109
    MONTH=110
    MOVE=111
    MUTATION=112
    NAN_SQL=113
    NO=114
    NOT=115
    NULL_SQL=116
    NULLS=117
    OFFSET=118
    ON=119
    OPTIMIZE=120
    OR=121
    ORDER=122
    OUTER=123
    OUTFILE=124
    OVER=125
    PARTITION=126
    POPULATE=127
    PRECEDING=128
    PREWHERE=129
    PRIMARY=130
    PROJECTION=131
    QUARTER=132
    RANGE=133
    RELOAD=134
    REMOVE=135
    RENAME=136
    REPLACE=137
    REPLICA=138
    REPLICATED=139
    RIGHT=140
    ROLLUP=141
    ROW=142
    ROWS=143
    SAMPLE=144
    SECOND=145
    SELECT=146
    SEMI=147
    SENDS=148
    SET=149
    SETTINGS=150
    SHOW=151
    SOURCE=152
    START=153
    STOP=154
    SUBSTRING=155
    SYNC=156
    SYNTAX=157
    SYSTEM=158
    TABLE=159
    TABLES=160
    TEMPORARY=161
    TEST=162
    THEN=163
    TIES=164
    TIMEOUT=165
    TIMESTAMP=166
    TO=167
    TOP=168
    TOTALS=169
    TRAILING=170
    TRIM=171
    TRUNCATE=172
    TTL=173
    TYPE=174
    UNBOUNDED=175
    UNION=176
    UPDATE=177
    USE=178
    USING=179
    UUID=180
    VALUES=181
    VAR=182
    VIEW=183
    VOLUME=184
    WATCH=185
    WEEK=186
    WHEN=187
    WHERE=188
    WINDOW=189
    WITH=190
    YEAR=191
    JSON_FALSE=192
    JSON_TRUE=193
    ESCAPE_CHAR=194
    IDENTIFIER=195
    FLOATING_LITERAL=196
    OCTAL_LITERAL=197
    DECIMAL_LITERAL=198
    HEXADECIMAL_LITERAL=199
    STRING_LITERAL=200
    PLACEHOLDER=201
    ARROW=202
    ASTERISK=203
    BACKQUOTE=204
    BACKSLASH=205
    COLON=206
    COMMA=207
    CONCAT=208
    DASH=209
    DOLLAR=210
    DOT=211
    EQ_DOUBLE=212
    EQ_SINGLE=213
    GT_EQ=214
    GT=215
    HASH=216
    IREGEX_SINGLE=217
    IREGEX_DOUBLE=218
    LBRACE=219
    LBRACKET=220
    LPAREN=221
    LT_EQ=222
    LT=223
    NOT_EQ=224
    NOT_IREGEX=225
    NOT_REGEX=226
    NULLISH=227
    PERCENT=228
    PLUS=229
    QUERY=230
    QUOTE_DOUBLE=231
    QUOTE_SINGLE=232
    REGEX_SINGLE=233
    REGEX_DOUBLE=234
    RBRACE=235
    RBRACKET=236
    RPAREN=237
    SEMICOLON=238
    SLASH=239
    UNDERSCORE=240
    MULTI_LINE_COMMENT=241
    SINGLE_LINE_COMMENT=242
    WHITESPACE=243

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_program

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = HogQLParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -9) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 138379135995) != 0):
                self.state = 138
                self.declaration()
                self.state = 143
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 144
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDecl(self):
            return self.getTypedRuleContext(HogQLParser.VarDeclContext,0)


        def statement(self):
            return self.getTypedRuleContext(HogQLParser.StatementContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = HogQLParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_declaration)
        try:
            self.state = 148
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [182]:
                self.enterOuterAlt(localctx, 1)
                self.state = 146
                self.varDecl()
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 209, 211, 219, 220, 221, 229]:
                self.enterOuterAlt(localctx, 2)
                self.state = 147
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = HogQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 150
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(HogQLParser.VAR, 0)

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_varDecl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDecl" ):
                return visitor.visitVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def varDecl(self):

        localctx = HogQLParser.VarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_varDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 152
            self.match(HogQLParser.VAR)
            self.state = 153
            self.match(HogQLParser.IDENTIFIER)
            self.state = 157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 154
                self.match(HogQLParser.COLON)
                self.state = 155
                self.match(HogQLParser.EQ_SINGLE)
                self.state = 156
                self.expression()


            self.state = 159
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprStmt(self):
            return self.getTypedRuleContext(HogQLParser.ExprStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(HogQLParser.IfStmtContext,0)


        def block(self):
            return self.getTypedRuleContext(HogQLParser.BlockContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = HogQLParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_statement)
        try:
            self.state = 164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 161
                self.exprStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 162
                self.ifStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 163
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(HogQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_exprStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = HogQLParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 166
            self.expression()
            self.state = 167
            self.match(HogQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(HogQLParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.StatementContext)
            else:
                return self.getTypedRuleContext(HogQLParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ifStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = HogQLParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 169
            self.match(HogQLParser.IF)
            self.state = 170
            self.match(HogQLParser.LPAREN)
            self.state = 171
            self.expression()
            self.state = 172
            self.match(HogQLParser.RPAREN)
            self.state = 173
            self.statement()
            self.state = 176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 174
                self.match(HogQLParser.ELSE)
                self.state = 175
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(HogQLParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(HogQLParser.RBRACE, 0)

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(HogQLParser.DeclarationContext,i)


        def getRuleIndex(self):
            return HogQLParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = HogQLParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 178
            self.match(HogQLParser.LBRACE)
            self.state = 182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -9) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 138379135995) != 0):
                self.state = 179
                self.declaration()
                self.state = 184
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 185
            self.match(HogQLParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_select

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect" ):
                return visitor.visitSelect(self)
            else:
                return visitor.visitChildren(self)




    def select(self):

        localctx = HogQLParser.SelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 187
                self.selectUnionStmt()
                pass

            elif la_ == 2:
                self.state = 188
                self.selectStmt()
                pass


            self.state = 191
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectUnionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SelectStmtWithParensContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SelectStmtWithParensContext,i)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.UNION)
            else:
                return self.getToken(HogQLParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.ALL)
            else:
                return self.getToken(HogQLParser.ALL, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectUnionStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectUnionStmt" ):
                return visitor.visitSelectUnionStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectUnionStmt(self):

        localctx = HogQLParser.SelectUnionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_selectUnionStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            self.selectStmtWithParens()
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==176:
                self.state = 194
                self.match(HogQLParser.UNION)
                self.state = 195
                self.match(HogQLParser.ALL)
                self.state = 196
                self.selectStmtWithParens()
                self.state = 201
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtWithParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmtWithParens

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmtWithParens" ):
                return visitor.visitSelectStmtWithParens(self)
            else:
                return visitor.visitChildren(self)




    def selectStmtWithParens(self):

        localctx = HogQLParser.SelectStmtWithParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_selectStmtWithParens)
        try:
            self.state = 207
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [146, 190]:
                self.enterOuterAlt(localctx, 1)
                self.state = 202
                self.selectStmt()
                pass
            elif token in [221]:
                self.enterOuterAlt(localctx, 2)
                self.state = 203
                self.match(HogQLParser.LPAREN)
                self.state = 204
                self.selectUnionStmt()
                self.state = 205
                self.match(HogQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.with_ = None # WithClauseContext
            self.columns = None # ColumnExprListContext
            self.from_ = None # FromClauseContext
            self.where = None # WhereClauseContext

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def topClause(self):
            return self.getTypedRuleContext(HogQLParser.TopClauseContext,0)


        def arrayJoinClause(self):
            return self.getTypedRuleContext(HogQLParser.ArrayJoinClauseContext,0)


        def prewhereClause(self):
            return self.getTypedRuleContext(HogQLParser.PrewhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(HogQLParser.GroupByClauseContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WITH)
            else:
                return self.getToken(HogQLParser.WITH, i)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def havingClause(self):
            return self.getTypedRuleContext(HogQLParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(HogQLParser.WindowClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(HogQLParser.OrderByClauseContext,0)


        def limitAndOffsetClause(self):
            return self.getTypedRuleContext(HogQLParser.LimitAndOffsetClauseContext,0)


        def offsetOnlyClause(self):
            return self.getTypedRuleContext(HogQLParser.OffsetOnlyClauseContext,0)


        def settingsClause(self):
            return self.getTypedRuleContext(HogQLParser.SettingsClauseContext,0)


        def withClause(self):
            return self.getTypedRuleContext(HogQLParser.WithClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(HogQLParser.FromClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(HogQLParser.WhereClauseContext,0)


        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStmt" ):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)




    def selectStmt(self):

        localctx = HogQLParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 209
                localctx.with_ = self.withClause()


            self.state = 212
            self.match(HogQLParser.SELECT)
            self.state = 214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 213
                self.match(HogQLParser.DISTINCT)


            self.state = 217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 216
                self.topClause()


            self.state = 219
            localctx.columns = self.columnExprList()
            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 220
                localctx.from_ = self.fromClause()


            self.state = 224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==84 or _la==96:
                self.state = 223
                self.arrayJoinClause()


            self.state = 227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 226
                self.prewhereClause()


            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 229
                localctx.where = self.whereClause()


            self.state = 233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 232
                self.groupByClause()


            self.state = 237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 235
                self.match(HogQLParser.WITH)
                self.state = 236
                _la = self._input.LA(1)
                if not(_la==32 or _la==141):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 239
                self.match(HogQLParser.WITH)
                self.state = 240
                self.match(HogQLParser.TOTALS)


            self.state = 244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 243
                self.havingClause()


            self.state = 247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==189:
                self.state = 246
                self.windowClause()


            self.state = 250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 249
                self.orderByClause()


            self.state = 254
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [99]:
                self.state = 252
                self.limitAndOffsetClause()
                pass
            elif token in [118]:
                self.state = 253
                self.offsetOnlyClause()
                pass
            elif token in [-1, 150, 176, 237]:
                pass
            else:
                pass
            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 256
                self.settingsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def withExprList(self):
            return self.getTypedRuleContext(HogQLParser.WithExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_withClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithClause" ):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)




    def withClause(self):

        localctx = HogQLParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.match(HogQLParser.WITH)
            self.state = 260
            self.withExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_topClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopClause" ):
                return visitor.visitTopClause(self)
            else:
                return visitor.visitChildren(self)




    def topClause(self):

        localctx = HogQLParser.TopClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_topClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.match(HogQLParser.TOP)
            self.state = 263
            self.match(HogQLParser.DECIMAL_LITERAL)
            self.state = 266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 264
                self.match(HogQLParser.WITH)
                self.state = 265
                self.match(HogQLParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = HogQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.match(HogQLParser.FROM)
            self.state = 269
            self.joinExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayJoinClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_arrayJoinClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayJoinClause" ):
                return visitor.visitArrayJoinClause(self)
            else:
                return visitor.visitChildren(self)




    def arrayJoinClause(self):

        localctx = HogQLParser.ArrayJoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_arrayJoinClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84 or _la==96:
                self.state = 271
                _la = self._input.LA(1)
                if not(_la==84 or _la==96):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 274
            self.match(HogQLParser.ARRAY)
            self.state = 275
            self.match(HogQLParser.JOIN)
            self.state = 276
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.AS)
            else:
                return self.getToken(HogQLParser.AS, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)

        def windowExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WindowExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WindowExprContext,i)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_windowClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = HogQLParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_windowClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.match(HogQLParser.WINDOW)
            self.state = 279
            self.identifier()
            self.state = 280
            self.match(HogQLParser.AS)
            self.state = 281
            self.match(HogQLParser.LPAREN)
            self.state = 282
            self.windowExpr()
            self.state = 283
            self.match(HogQLParser.RPAREN)
            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==207:
                self.state = 284
                self.match(HogQLParser.COMMA)
                self.state = 285
                self.identifier()
                self.state = 286
                self.match(HogQLParser.AS)
                self.state = 287
                self.match(HogQLParser.LPAREN)
                self.state = 288
                self.windowExpr()
                self.state = 289
                self.match(HogQLParser.RPAREN)
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrewhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_prewhereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrewhereClause" ):
                return visitor.visitPrewhereClause(self)
            else:
                return visitor.visitChildren(self)




    def prewhereClause(self):

        localctx = HogQLParser.PrewhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_prewhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(HogQLParser.PREWHERE)
            self.state = 297
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = HogQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(HogQLParser.WHERE)
            self.state = 300
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_groupByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByClause" ):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)




    def groupByClause(self):

        localctx = HogQLParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.match(HogQLParser.GROUP)
            self.state = 303
            self.match(HogQLParser.BY)
            self.state = 310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 304
                _la = self._input.LA(1)
                if not(_la==32 or _la==141):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 305
                self.match(HogQLParser.LPAREN)
                self.state = 306
                self.columnExprList()
                self.state = 307
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 309
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = HogQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(HogQLParser.HAVING)
            self.state = 313
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_orderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = HogQLParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.match(HogQLParser.ORDER)
            self.state = 316
            self.match(HogQLParser.BY)
            self.state = 317
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_projectionOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProjectionOrderByClause" ):
                return visitor.visitProjectionOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def projectionOrderByClause(self):

        localctx = HogQLParser.ProjectionOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_projectionOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.match(HogQLParser.ORDER)
            self.state = 320
            self.match(HogQLParser.BY)
            self.state = 321
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitAndOffsetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitAndOffsetClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitAndOffsetClause" ):
                return visitor.visitLimitAndOffsetClause(self)
            else:
                return visitor.visitChildren(self)




    def limitAndOffsetClause(self):

        localctx = HogQLParser.LimitAndOffsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_limitAndOffsetClause)
        self._la = 0 # Token type
        try:
            self.state = 352
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 323
                self.match(HogQLParser.LIMIT)
                self.state = 324
                self.columnExpr(0)
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 325
                    self.match(HogQLParser.COMMA)
                    self.state = 326
                    self.columnExpr(0)


                self.state = 333
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [190]:
                    self.state = 329
                    self.match(HogQLParser.WITH)
                    self.state = 330
                    self.match(HogQLParser.TIES)
                    pass
                elif token in [18]:
                    self.state = 331
                    self.match(HogQLParser.BY)
                    self.state = 332
                    self.columnExprList()
                    pass
                elif token in [-1, 150, 176, 237]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 335
                self.match(HogQLParser.LIMIT)
                self.state = 336
                self.columnExpr(0)
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 337
                    self.match(HogQLParser.WITH)
                    self.state = 338
                    self.match(HogQLParser.TIES)


                self.state = 341
                self.match(HogQLParser.OFFSET)
                self.state = 342
                self.columnExpr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 344
                self.match(HogQLParser.LIMIT)
                self.state = 345
                self.columnExpr(0)
                self.state = 346
                self.match(HogQLParser.OFFSET)
                self.state = 347
                self.columnExpr(0)
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18:
                    self.state = 348
                    self.match(HogQLParser.BY)
                    self.state = 349
                    self.columnExprList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetOnlyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_offsetOnlyClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOffsetOnlyClause" ):
                return visitor.visitOffsetOnlyClause(self)
            else:
                return visitor.visitChildren(self)




    def offsetOnlyClause(self):

        localctx = HogQLParser.OffsetOnlyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_offsetOnlyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(HogQLParser.OFFSET)
            self.state = 355
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(HogQLParser.SettingExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingsClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingsClause" ):
                return visitor.visitSettingsClause(self)
            else:
                return visitor.visitChildren(self)




    def settingsClause(self):

        localctx = HogQLParser.SettingsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_settingsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(HogQLParser.SETTINGS)
            self.state = 358
            self.settingExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)
        def joinConstraintClause(self):
            return self.getTypedRuleContext(HogQLParser.JoinConstraintClauseContext,0)

        def joinOp(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprOp" ):
                return visitor.visitJoinExprOp(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprTableContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)
        def sampleClause(self):
            return self.getTypedRuleContext(HogQLParser.SampleClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprTable" ):
                return visitor.visitJoinExprTable(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprParensContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprParens" ):
                return visitor.visitJoinExprParens(self)
            else:
                return visitor.visitChildren(self)


    class JoinExprCrossOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext,i)

        def joinOpCross(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpCrossContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinExprCrossOp" ):
                return visitor.visitJoinExprCrossOp(self)
            else:
                return visitor.visitChildren(self)



    def joinExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.JoinExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_joinExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinExprTableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 361
                self.tableExpr(0)
                self.state = 363
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 362
                    self.match(HogQLParser.FINAL)


                self.state = 366
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 365
                    self.sampleClause()


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 368
                self.match(HogQLParser.LPAREN)
                self.state = 369
                self.joinExpr(0)
                self.state = 370
                self.match(HogQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 388
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 386
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.JoinExprCrossOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 374
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 375
                        self.joinOpCross()
                        self.state = 376
                        self.joinExpr(4)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.JoinExprOpContext(self, HogQLParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 378
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 380
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 134250497) != 0) or _la==140 or _la==147:
                            self.state = 379
                            self.joinOp()


                        self.state = 382
                        self.match(HogQLParser.JOIN)
                        self.state = 383
                        self.joinExpr(0)
                        self.state = 384
                        self.joinConstraintClause()
                        pass

             
                self.state = 390
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_joinOp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JoinOpFullContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpFull" ):
                return visitor.visitJoinOpFull(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpInnerContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpInner" ):
                return visitor.visitJoinOpInner(self)
            else:
                return visitor.visitChildren(self)


    class JoinOpLeftRightContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)
        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)
        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)
        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)
        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)
        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpLeftRight" ):
                return visitor.visitJoinOpLeftRight(self)
            else:
                return visitor.visitChildren(self)



    def joinOp(self):

        localctx = HogQLParser.JoinOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_joinOp)
        self._la = 0 # Token type
        try:
            self.state = 434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinOpInnerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 400
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 392
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0):
                        self.state = 391
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 394
                    self.match(HogQLParser.INNER)
                    pass

                elif la_ == 2:
                    self.state = 395
                    self.match(HogQLParser.INNER)
                    self.state = 397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0):
                        self.state = 396
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 3:
                    self.state = 399
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinOpLeftRightContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 416
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 403
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==147:
                        self.state = 402
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==147):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 405
                    _la = self._input.LA(1)
                    if not(_la==96 or _la==140):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==123:
                        self.state = 406
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 409
                    _la = self._input.LA(1)
                    if not(_la==96 or _la==140):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==123:
                        self.state = 410
                        self.match(HogQLParser.OUTER)


                    self.state = 414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==147:
                        self.state = 413
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==147):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 3:
                localctx = HogQLParser.JoinOpFullContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 432
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 419
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==4 or _la==8:
                        self.state = 418
                        _la = self._input.LA(1)
                        if not(_la==4 or _la==8):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 421
                    self.match(HogQLParser.FULL)
                    self.state = 423
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==123:
                        self.state = 422
                        self.match(HogQLParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 425
                    self.match(HogQLParser.FULL)
                    self.state = 427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==123:
                        self.state = 426
                        self.match(HogQLParser.OUTER)


                    self.state = 430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==4 or _la==8:
                        self.state = 429
                        _la = self._input.LA(1)
                        if not(_la==4 or _la==8):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOpCrossContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinOpCross

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinOpCross" ):
                return visitor.visitJoinOpCross(self)
            else:
                return visitor.visitChildren(self)




    def joinOpCross(self):

        localctx = HogQLParser.JoinOpCrossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_joinOpCross)
        try:
            self.state = 439
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31]:
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.match(HogQLParser.CROSS)
                self.state = 437
                self.match(HogQLParser.JOIN)
                pass
            elif token in [207]:
                self.enterOuterAlt(localctx, 2)
                self.state = 438
                self.match(HogQLParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinConstraintClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinConstraintClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinConstraintClause" ):
                return visitor.visitJoinConstraintClause(self)
            else:
                return visitor.visitChildren(self)




    def joinConstraintClause(self):

        localctx = HogQLParser.JoinConstraintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_joinConstraintClause)
        try:
            self.state = 450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 441
                self.match(HogQLParser.ON)
                self.state = 442
                self.columnExprList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 443
                self.match(HogQLParser.USING)
                self.state = 444
                self.match(HogQLParser.LPAREN)
                self.state = 445
                self.columnExprList()
                self.state = 446
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 448
                self.match(HogQLParser.USING)
                self.state = 449
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def ratioExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.RatioExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.RatioExprContext,i)


        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_sampleClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleClause" ):
                return visitor.visitSampleClause(self)
            else:
                return visitor.visitChildren(self)




    def sampleClause(self):

        localctx = HogQLParser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.match(HogQLParser.SAMPLE)
            self.state = 453
            self.ratioExpr()
            self.state = 456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 454
                self.match(HogQLParser.OFFSET)
                self.state = 455
                self.ratioExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.OrderExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.OrderExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExprList" ):
                return visitor.visitOrderExprList(self)
            else:
                return visitor.visitChildren(self)




    def orderExprList(self):

        localctx = HogQLParser.OrderExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_orderExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.orderExpr()
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==207:
                self.state = 459
                self.match(HogQLParser.COMMA)
                self.state = 460
                self.orderExpr()
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderExpr" ):
                return visitor.visitOrderExpr(self)
            else:
                return visitor.visitChildren(self)




    def orderExpr(self):

        localctx = HogQLParser.OrderExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_orderExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.columnExpr(0)
            self.state = 468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13194139535360) != 0):
                self.state = 467
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 13194139535360) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 470
                self.match(HogQLParser.NULLS)
                self.state = 471
                _la = self._input.LA(1)
                if not(_la==62 or _la==93):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 474
                self.match(HogQLParser.COLLATE)
                self.state = 475
                self.match(HogQLParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RatioExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,i)


        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ratioExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRatioExpr" ):
                return visitor.visitRatioExpr(self)
            else:
                return visitor.visitChildren(self)




    def ratioExpr(self):

        localctx = HogQLParser.RatioExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_ratioExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.numberLiteral()
            self.state = 481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 479
                self.match(HogQLParser.SLASH)
                self.state = 480
                self.numberLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settingExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SettingExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SettingExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_settingExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExprList" ):
                return visitor.visitSettingExprList(self)
            else:
                return visitor.visitChildren(self)




    def settingExprList(self):

        localctx = HogQLParser.SettingExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_settingExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.settingExpr()
            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==207:
                self.state = 484
                self.match(HogQLParser.COMMA)
                self.state = 485
                self.settingExpr()
                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_settingExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSettingExpr" ):
                return visitor.visitSettingExpr(self)
            else:
                return visitor.visitChildren(self)




    def settingExpr(self):

        localctx = HogQLParser.SettingExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_settingExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.identifier()
            self.state = 492
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 493
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winPartitionByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinPartitionByClauseContext,0)


        def winOrderByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinOrderByClauseContext,0)


        def winFrameClause(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameClauseContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_windowExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowExpr" ):
                return visitor.visitWindowExpr(self)
            else:
                return visitor.visitChildren(self)




    def windowExpr(self):

        localctx = HogQLParser.WindowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_windowExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 495
                self.winPartitionByClause()


            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 498
                self.winOrderByClause()


            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133 or _la==143:
                self.state = 501
                self.winFrameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinPartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winPartitionByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinPartitionByClause" ):
                return visitor.visitWinPartitionByClause(self)
            else:
                return visitor.visitChildren(self)




    def winPartitionByClause(self):

        localctx = HogQLParser.WinPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_winPartitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(HogQLParser.PARTITION)
            self.state = 505
            self.match(HogQLParser.BY)
            self.state = 506
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winOrderByClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinOrderByClause" ):
                return visitor.visitWinOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def winOrderByClause(self):

        localctx = HogQLParser.WinOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_winOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.match(HogQLParser.ORDER)
            self.state = 509
            self.match(HogQLParser.BY)
            self.state = 510
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winFrameExtend(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameExtendContext,0)


        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameClause" ):
                return visitor.visitWinFrameClause(self)
            else:
                return visitor.visitChildren(self)




    def winFrameClause(self):

        localctx = HogQLParser.WinFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_winFrameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            _la = self._input.LA(1)
            if not(_la==133 or _la==143):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 513
            self.winFrameExtend()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameExtendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameExtend

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FrameStartContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def winFrameBound(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameStart" ):
                return visitor.visitFrameStart(self)
            else:
                return visitor.visitChildren(self)


    class FrameBetweenContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def winFrameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WinFrameBoundContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBetween" ):
                return visitor.visitFrameBetween(self)
            else:
                return visitor.visitChildren(self)



    def winFrameExtend(self):

        localctx = HogQLParser.WinFrameExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_winFrameExtend)
        try:
            self.state = 521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [33, 82, 113, 175, 196, 197, 198, 199, 209, 211, 229]:
                localctx = HogQLParser.FrameStartContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 515
                self.winFrameBound()
                pass
            elif token in [16]:
                localctx = HogQLParser.FrameBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 516
                self.match(HogQLParser.BETWEEN)
                self.state = 517
                self.winFrameBound()
                self.state = 518
                self.match(HogQLParser.AND)
                self.state = 519
                self.winFrameBound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWinFrameBound" ):
                return visitor.visitWinFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def winFrameBound(self):

        localctx = HogQLParser.WinFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_winFrameBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 523
                self.match(HogQLParser.CURRENT)
                self.state = 524
                self.match(HogQLParser.ROW)
                pass

            elif la_ == 2:
                self.state = 525
                self.match(HogQLParser.UNBOUNDED)
                self.state = 526
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 3:
                self.state = 527
                self.match(HogQLParser.UNBOUNDED)
                self.state = 528
                self.match(HogQLParser.FOLLOWING)
                pass

            elif la_ == 4:
                self.state = 529
                self.numberLiteral()
                self.state = 530
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 5:
                self.state = 532
                self.numberLiteral()
                self.state = 533
                self.match(HogQLParser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def EOF(self):
            return self.getToken(HogQLParser.EOF, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = HogQLParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.columnExpr(0)
            self.state = 538
            self.match(HogQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnTypeExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnTypeExprNestedContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprNested" ):
                return visitor.visitColumnTypeExprNested(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprParamContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprParam" ):
                return visitor.visitColumnTypeExprParam(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprSimpleContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprSimple" ):
                return visitor.visitColumnTypeExprSimple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprComplexContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprComplex" ):
                return visitor.visitColumnTypeExprComplex(self)
            else:
                return visitor.visitChildren(self)


    class ColumnTypeExprEnumContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(HogQLParser.EnumValueContext,i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnTypeExprEnum" ):
                return visitor.visitColumnTypeExprEnum(self)
            else:
                return visitor.visitChildren(self)



    def columnTypeExpr(self):

        localctx = HogQLParser.ColumnTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_columnTypeExpr)
        self._la = 0 # Token type
        try:
            self.state = 587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnTypeExprSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 540
                self.identifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnTypeExprNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 541
                self.identifier()
                self.state = 542
                self.match(HogQLParser.LPAREN)
                self.state = 543
                self.identifier()
                self.state = 544
                self.columnTypeExpr()
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==207:
                    self.state = 545
                    self.match(HogQLParser.COMMA)
                    self.state = 546
                    self.identifier()
                    self.state = 547
                    self.columnTypeExpr()
                    self.state = 553
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 554
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnTypeExprEnumContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 556
                self.identifier()
                self.state = 557
                self.match(HogQLParser.LPAREN)
                self.state = 558
                self.enumValue()
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==207:
                    self.state = 559
                    self.match(HogQLParser.COMMA)
                    self.state = 560
                    self.enumValue()
                    self.state = 565
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 566
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnTypeExprComplexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 568
                self.identifier()
                self.state = 569
                self.match(HogQLParser.LPAREN)
                self.state = 570
                self.columnTypeExpr()
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==207:
                    self.state = 571
                    self.match(HogQLParser.COMMA)
                    self.state = 572
                    self.columnTypeExpr()
                    self.state = 577
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 578
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnTypeExprParamContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 580
                self.identifier()
                self.state = 581
                self.match(HogQLParser.LPAREN)
                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -18014398509481993) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 138244918267) != 0):
                    self.state = 582
                    self.columnExprList()


                self.state = 585
                self.match(HogQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExprWithAlias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprWithAliasContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprWithAliasContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprList" ):
                return visitor.visitColumnExprList(self)
            else:
                return visitor.visitChildren(self)




    def columnExprList(self):

        localctx = HogQLParser.ColumnExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_columnExprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.columnExprWithAlias()
            self.state = 594
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 590
                    self.match(HogQLParser.COMMA)
                    self.state = 591
                    self.columnExprWithAlias() 
                self.state = 596
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprWithAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)


        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnExprWithAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWithAlias" ):
                return visitor.visitColumnExprWithAlias(self)
            else:
                return visitor.visitChildren(self)




    def columnExprWithAlias(self):

        localctx = HogQLParser.ColumnExprWithAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_columnExprWithAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.columnExpr(0)
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 598
                self.alias()

            elif la_ == 2:
                self.state = 599
                self.match(HogQLParser.AS)
                self.state = 600
                self.identifier()

            elif la_ == 3:
                self.state = 601
                self.match(HogQLParser.AS)
                self.state = 602
                self.match(HogQLParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_columnExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ColumnExprTernaryOpContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def QUERY(self):
            return self.getToken(HogQLParser.QUERY, 0)
        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTernaryOp" ):
                return visitor.visitColumnExprTernaryOp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAliasContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAlias" ):
                return visitor.visitColumnExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprExtractContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprExtract" ):
                return visitor.visitColumnExprExtract(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNegateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNegate" ):
                return visitor.visitColumnExprNegate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubqueryContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubquery" ):
                return visitor.visitColumnExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprLiteralContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprLiteral" ):
                return visitor.visitColumnExprLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArray" ):
                return visitor.visitColumnExprArray(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprSubstringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprSubstring" ):
                return visitor.visitColumnExprSubstring(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCastContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def columnTypeExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCast" ):
                return visitor.visitColumnExprCast(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprOrContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprOr" ):
                return visitor.visitColumnExprOr(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence1Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(HogQLParser.PERCENT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence1" ):
                return visitor.visitColumnExprPrecedence1(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence2Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)
        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)
        def CONCAT(self):
            return self.getToken(HogQLParser.CONCAT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence2" ):
                return visitor.visitColumnExprPrecedence2(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPrecedence3Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None # ColumnExprContext
            self.operator = None # Token
            self.right = None # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)
        def EQ_DOUBLE(self):
            return self.getToken(HogQLParser.EQ_DOUBLE, 0)
        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)
        def NOT_EQ(self):
            return self.getToken(HogQLParser.NOT_EQ, 0)
        def LT_EQ(self):
            return self.getToken(HogQLParser.LT_EQ, 0)
        def LT(self):
            return self.getToken(HogQLParser.LT, 0)
        def GT_EQ(self):
            return self.getToken(HogQLParser.GT_EQ, 0)
        def GT(self):
            return self.getToken(HogQLParser.GT, 0)
        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)
        def REGEX_SINGLE(self):
            return self.getToken(HogQLParser.REGEX_SINGLE, 0)
        def REGEX_DOUBLE(self):
            return self.getToken(HogQLParser.REGEX_DOUBLE, 0)
        def NOT_REGEX(self):
            return self.getToken(HogQLParser.NOT_REGEX, 0)
        def IREGEX_SINGLE(self):
            return self.getToken(HogQLParser.IREGEX_SINGLE, 0)
        def IREGEX_DOUBLE(self):
            return self.getToken(HogQLParser.IREGEX_DOUBLE, 0)
        def NOT_IREGEX(self):
            return self.getToken(HogQLParser.NOT_IREGEX, 0)
        def COHORT(self):
            return self.getToken(HogQLParser.COHORT, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPrecedence3" ):
                return visitor.visitColumnExprPrecedence3(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIntervalContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprInterval" ):
                return visitor.visitColumnExprInterval(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIsNullContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)
        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIsNull" ):
                return visitor.visitColumnExprIsNull(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionTargetContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunctionTarget" ):
                return visitor.visitColumnExprWinFunctionTarget(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTrimContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)
        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)
        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTrim" ):
                return visitor.visitColumnExprTrim(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTuple" ):
                return visitor.visitColumnExprTuple(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprArrayAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprArrayAccess" ):
                return visitor.visitColumnExprArrayAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprBetweenContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(HogQLParser.AND, 0)
        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprBetween" ):
                return visitor.visitColumnExprBetween(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprPropertyAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprPropertyAccess" ):
                return visitor.visitColumnExprPropertyAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprParensContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprParens" ):
                return visitor.visitColumnExprParens(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTimestampContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTimestamp" ):
                return visitor.visitColumnExprTimestamp(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNullishContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def NULLISH(self):
            return self.getToken(HogQLParser.NULLISH, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNullish" ):
                return visitor.visitColumnExprNullish(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAndContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAnd" ):
                return visitor.visitColumnExprAnd(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprTupleAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)
        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprTupleAccess" ):
                return visitor.visitColumnExprTupleAccess(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprCaseContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.caseExpr = None # ColumnExprContext
            self.whenExpr = None # ColumnExprContext
            self.thenExpr = None # ColumnExprContext
            self.elseExpr = None # ColumnExprContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)
        def END(self):
            return self.getToken(HogQLParser.END, 0)
        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.WHEN)
            else:
                return self.getToken(HogQLParser.WHEN, i)
        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.THEN)
            else:
                return self.getToken(HogQLParser.THEN, i)
        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprCase" ):
                return visitor.visitColumnExprCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprDateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprDate" ):
                return visitor.visitColumnExprDate(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprNotContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprNot" ):
                return visitor.visitColumnExprNot(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprWinFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def windowExpr(self):
            return self.getTypedRuleContext(HogQLParser.WindowExprContext,0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprWinFunction" ):
                return visitor.visitColumnExprWinFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprIdentifierContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.ColumnIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprIdentifier" ):
                return visitor.visitColumnExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)
        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)
        def columnArgList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnArgListContext,0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprFunction" ):
                return visitor.visitColumnExprFunction(self)
            else:
                return visitor.visitChildren(self)


    class ColumnExprAsteriskContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnExprAsterisk" ):
                return visitor.visitColumnExprAsterisk(self)
            else:
                return visitor.visitChildren(self)



    def columnExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.ColumnExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_columnExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 606
                self.match(HogQLParser.CASE)
                self.state = 608
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 607
                    localctx.caseExpr = self.columnExpr(0)


                self.state = 615 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 610
                    self.match(HogQLParser.WHEN)
                    self.state = 611
                    localctx.whenExpr = self.columnExpr(0)
                    self.state = 612
                    self.match(HogQLParser.THEN)
                    self.state = 613
                    localctx.thenExpr = self.columnExpr(0)
                    self.state = 617 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==187):
                        break

                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 619
                    self.match(HogQLParser.ELSE)
                    self.state = 620
                    localctx.elseExpr = self.columnExpr(0)


                self.state = 623
                self.match(HogQLParser.END)
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 625
                self.match(HogQLParser.CAST)
                self.state = 626
                self.match(HogQLParser.LPAREN)
                self.state = 627
                self.columnExpr(0)
                self.state = 628
                self.match(HogQLParser.AS)
                self.state = 629
                self.columnTypeExpr()
                self.state = 630
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnExprDateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 632
                self.match(HogQLParser.DATE)
                self.state = 633
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnExprExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 634
                self.match(HogQLParser.EXTRACT)
                self.state = 635
                self.match(HogQLParser.LPAREN)
                self.state = 636
                self.interval()
                self.state = 637
                self.match(HogQLParser.FROM)
                self.state = 638
                self.columnExpr(0)
                self.state = 639
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 641
                self.match(HogQLParser.INTERVAL)
                self.state = 642
                self.columnExpr(0)
                self.state = 643
                self.interval()
                pass

            elif la_ == 6:
                localctx = HogQLParser.ColumnExprSubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 645
                self.match(HogQLParser.SUBSTRING)
                self.state = 646
                self.match(HogQLParser.LPAREN)
                self.state = 647
                self.columnExpr(0)
                self.state = 648
                self.match(HogQLParser.FROM)
                self.state = 649
                self.columnExpr(0)
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 650
                    self.match(HogQLParser.FOR)
                    self.state = 651
                    self.columnExpr(0)


                self.state = 654
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 7:
                localctx = HogQLParser.ColumnExprTimestampContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 656
                self.match(HogQLParser.TIMESTAMP)
                self.state = 657
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 8:
                localctx = HogQLParser.ColumnExprTrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 658
                self.match(HogQLParser.TRIM)
                self.state = 659
                self.match(HogQLParser.LPAREN)
                self.state = 660
                _la = self._input.LA(1)
                if not(_la==17 or _la==95 or _la==170):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 661
                self.match(HogQLParser.STRING_LITERAL)
                self.state = 662
                self.match(HogQLParser.FROM)
                self.state = 663
                self.columnExpr(0)
                self.state = 664
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 9:
                localctx = HogQLParser.ColumnExprWinFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 666
                self.identifier()

                self.state = 667
                self.match(HogQLParser.LPAREN)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -18014398509481993) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 138244918267) != 0):
                    self.state = 668
                    self.columnExprList()


                self.state = 671
                self.match(HogQLParser.RPAREN)
                self.state = 673
                self.match(HogQLParser.OVER)
                self.state = 674
                self.match(HogQLParser.LPAREN)
                self.state = 675
                self.windowExpr()
                self.state = 676
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 10:
                localctx = HogQLParser.ColumnExprWinFunctionTargetContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 678
                self.identifier()

                self.state = 679
                self.match(HogQLParser.LPAREN)
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -18014398509481993) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 138244918267) != 0):
                    self.state = 680
                    self.columnExprList()


                self.state = 683
                self.match(HogQLParser.RPAREN)
                self.state = 685
                self.match(HogQLParser.OVER)
                self.state = 686
                self.identifier()
                pass

            elif la_ == 11:
                localctx = HogQLParser.ColumnExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 688
                self.identifier()
                self.state = 694
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 689
                    self.match(HogQLParser.LPAREN)
                    self.state = 691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -18014398509481993) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 138244918267) != 0):
                        self.state = 690
                        self.columnExprList()


                    self.state = 693
                    self.match(HogQLParser.RPAREN)


                self.state = 696
                self.match(HogQLParser.LPAREN)
                self.state = 698
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 697
                    self.match(HogQLParser.DISTINCT)


                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -18014398509481993) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 138244918267) != 0):
                    self.state = 700
                    self.columnArgList()


                self.state = 703
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 12:
                localctx = HogQLParser.ColumnExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 705
                self.literal()
                pass

            elif la_ == 13:
                localctx = HogQLParser.ColumnExprNegateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 706
                self.match(HogQLParser.DASH)
                self.state = 707
                self.columnExpr(18)
                pass

            elif la_ == 14:
                localctx = HogQLParser.ColumnExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 708
                self.match(HogQLParser.NOT)
                self.state = 709
                self.columnExpr(12)
                pass

            elif la_ == 15:
                localctx = HogQLParser.ColumnExprAsteriskContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -5066549581053953) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -18014398509481993) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 11) != 0):
                    self.state = 710
                    self.tableIdentifier()
                    self.state = 711
                    self.match(HogQLParser.DOT)


                self.state = 715
                self.match(HogQLParser.ASTERISK)
                pass

            elif la_ == 16:
                localctx = HogQLParser.ColumnExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 716
                self.match(HogQLParser.LPAREN)
                self.state = 717
                self.selectUnionStmt()
                self.state = 718
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 17:
                localctx = HogQLParser.ColumnExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 720
                self.match(HogQLParser.LPAREN)
                self.state = 721
                self.columnExpr(0)
                self.state = 722
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 18:
                localctx = HogQLParser.ColumnExprTupleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 724
                self.match(HogQLParser.LPAREN)
                self.state = 725
                self.columnExprList()
                self.state = 726
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 19:
                localctx = HogQLParser.ColumnExprArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 728
                self.match(HogQLParser.LBRACKET)
                self.state = 730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -18014398509481993) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 138244918267) != 0):
                    self.state = 729
                    self.columnExprList()


                self.state = 732
                self.match(HogQLParser.RBRACKET)
                pass

            elif la_ == 20:
                localctx = HogQLParser.ColumnExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 733
                self.columnIdentifier()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 829
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 827
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.ColumnExprPrecedence1Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 736
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 740
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [203]:
                            self.state = 737
                            localctx.operator = self.match(HogQLParser.ASTERISK)
                            pass
                        elif token in [239]:
                            self.state = 738
                            localctx.operator = self.match(HogQLParser.SLASH)
                            pass
                        elif token in [228]:
                            self.state = 739
                            localctx.operator = self.match(HogQLParser.PERCENT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 742
                        localctx.right = self.columnExpr(18)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.ColumnExprPrecedence2Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 743
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 747
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [229]:
                            self.state = 744
                            localctx.operator = self.match(HogQLParser.PLUS)
                            pass
                        elif token in [209]:
                            self.state = 745
                            localctx.operator = self.match(HogQLParser.DASH)
                            pass
                        elif token in [208]:
                            self.state = 746
                            localctx.operator = self.match(HogQLParser.CONCAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 749
                        localctx.right = self.columnExpr(17)
                        pass

                    elif la_ == 3:
                        localctx = HogQLParser.ColumnExprPrecedence3Context(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 750
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 775
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                        if la_ == 1:
                            self.state = 751
                            localctx.operator = self.match(HogQLParser.EQ_DOUBLE)
                            pass

                        elif la_ == 2:
                            self.state = 752
                            localctx.operator = self.match(HogQLParser.EQ_SINGLE)
                            pass

                        elif la_ == 3:
                            self.state = 753
                            localctx.operator = self.match(HogQLParser.NOT_EQ)
                            pass

                        elif la_ == 4:
                            self.state = 754
                            localctx.operator = self.match(HogQLParser.LT_EQ)
                            pass

                        elif la_ == 5:
                            self.state = 755
                            localctx.operator = self.match(HogQLParser.LT)
                            pass

                        elif la_ == 6:
                            self.state = 756
                            localctx.operator = self.match(HogQLParser.GT_EQ)
                            pass

                        elif la_ == 7:
                            self.state = 757
                            localctx.operator = self.match(HogQLParser.GT)
                            pass

                        elif la_ == 8:
                            self.state = 759
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==115:
                                self.state = 758
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 761
                            self.match(HogQLParser.IN)
                            self.state = 763
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==25:
                                self.state = 762
                                self.match(HogQLParser.COHORT)


                            pass

                        elif la_ == 9:
                            self.state = 766
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==115:
                                self.state = 765
                                localctx.operator = self.match(HogQLParser.NOT)


                            self.state = 768
                            _la = self._input.LA(1)
                            if not(_la==79 or _la==98):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        elif la_ == 10:
                            self.state = 769
                            localctx.operator = self.match(HogQLParser.REGEX_SINGLE)
                            pass

                        elif la_ == 11:
                            self.state = 770
                            localctx.operator = self.match(HogQLParser.REGEX_DOUBLE)
                            pass

                        elif la_ == 12:
                            self.state = 771
                            localctx.operator = self.match(HogQLParser.NOT_REGEX)
                            pass

                        elif la_ == 13:
                            self.state = 772
                            localctx.operator = self.match(HogQLParser.IREGEX_SINGLE)
                            pass

                        elif la_ == 14:
                            self.state = 773
                            localctx.operator = self.match(HogQLParser.IREGEX_DOUBLE)
                            pass

                        elif la_ == 15:
                            self.state = 774
                            localctx.operator = self.match(HogQLParser.NOT_IREGEX)
                            pass


                        self.state = 777
                        localctx.right = self.columnExpr(16)
                        pass

                    elif la_ == 4:
                        localctx = HogQLParser.ColumnExprNullishContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 778
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 779
                        self.match(HogQLParser.NULLISH)
                        self.state = 780
                        self.columnExpr(14)
                        pass

                    elif la_ == 5:
                        localctx = HogQLParser.ColumnExprAndContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 781
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 782
                        self.match(HogQLParser.AND)
                        self.state = 783
                        self.columnExpr(12)
                        pass

                    elif la_ == 6:
                        localctx = HogQLParser.ColumnExprOrContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 784
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 785
                        self.match(HogQLParser.OR)
                        self.state = 786
                        self.columnExpr(11)
                        pass

                    elif la_ == 7:
                        localctx = HogQLParser.ColumnExprBetweenContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 787
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 789
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==115:
                            self.state = 788
                            self.match(HogQLParser.NOT)


                        self.state = 791
                        self.match(HogQLParser.BETWEEN)
                        self.state = 792
                        self.columnExpr(0)
                        self.state = 793
                        self.match(HogQLParser.AND)
                        self.state = 794
                        self.columnExpr(10)
                        pass

                    elif la_ == 8:
                        localctx = HogQLParser.ColumnExprTernaryOpContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 796
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 797
                        self.match(HogQLParser.QUERY)
                        self.state = 798
                        self.columnExpr(0)
                        self.state = 799
                        self.match(HogQLParser.COLON)
                        self.state = 800
                        self.columnExpr(8)
                        pass

                    elif la_ == 9:
                        localctx = HogQLParser.ColumnExprArrayAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 802
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 803
                        self.match(HogQLParser.LBRACKET)
                        self.state = 804
                        self.columnExpr(0)
                        self.state = 805
                        self.match(HogQLParser.RBRACKET)
                        pass

                    elif la_ == 10:
                        localctx = HogQLParser.ColumnExprTupleAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 807
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 808
                        self.match(HogQLParser.DOT)
                        self.state = 809
                        self.match(HogQLParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 11:
                        localctx = HogQLParser.ColumnExprPropertyAccessContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 810
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 811
                        self.match(HogQLParser.DOT)
                        self.state = 812
                        self.identifier()
                        pass

                    elif la_ == 12:
                        localctx = HogQLParser.ColumnExprIsNullContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 813
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 814
                        self.match(HogQLParser.IS)
                        self.state = 816
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==115:
                            self.state = 815
                            self.match(HogQLParser.NOT)


                        self.state = 818
                        self.match(HogQLParser.NULL_SQL)
                        pass

                    elif la_ == 13:
                        localctx = HogQLParser.ColumnExprAliasContext(self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 819
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 825
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                        if la_ == 1:
                            self.state = 820
                            self.alias()
                            pass

                        elif la_ == 2:
                            self.state = 821
                            self.match(HogQLParser.AS)
                            self.state = 822
                            self.identifier()
                            pass

                        elif la_ == 3:
                            self.state = 823
                            self.match(HogQLParser.AS)
                            self.state = 824
                            self.match(HogQLParser.STRING_LITERAL)
                            pass


                        pass

             
                self.state = 831
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ColumnArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnArgExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnArgExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgList" ):
                return visitor.visitColumnArgList(self)
            else:
                return visitor.visitChildren(self)




    def columnArgList(self):

        localctx = HogQLParser.ColumnArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_columnArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.columnArgExpr()
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==207:
                self.state = 833
                self.match(HogQLParser.COMMA)
                self.state = 834
                self.columnArgExpr()
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnLambdaExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnLambdaExprContext,0)


        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnArgExpr" ):
                return visitor.visitColumnArgExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnArgExpr(self):

        localctx = HogQLParser.ColumnArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_columnArgExpr)
        try:
            self.state = 842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 840
                self.columnLambdaExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 841
                self.columnExpr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnLambdaExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(HogQLParser.ARROW, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnLambdaExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnLambdaExpr" ):
                return visitor.visitColumnLambdaExpr(self)
            else:
                return visitor.visitChildren(self)




    def columnLambdaExpr(self):

        localctx = HogQLParser.ColumnLambdaExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_columnLambdaExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [221]:
                self.state = 844
                self.match(HogQLParser.LPAREN)
                self.state = 845
                self.identifier()
                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==207:
                    self.state = 846
                    self.match(HogQLParser.COMMA)
                    self.state = 847
                    self.identifier()
                    self.state = 852
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 853
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195]:
                self.state = 855
                self.identifier()
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==207:
                    self.state = 856
                    self.match(HogQLParser.COMMA)
                    self.state = 857
                    self.identifier()
                    self.state = 862
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 865
            self.match(HogQLParser.ARROW)
            self.state = 866
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WithExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WithExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_withExprList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprList" ):
                return visitor.visitWithExprList(self)
            else:
                return visitor.visitChildren(self)




    def withExprList(self):

        localctx = HogQLParser.WithExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_withExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.withExpr()
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==207:
                self.state = 869
                self.match(HogQLParser.COMMA)
                self.state = 870
                self.withExpr()
                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_withExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WithExprColumnContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprColumn" ):
                return visitor.visitWithExprColumn(self)
            else:
                return visitor.visitChildren(self)


    class WithExprSubqueryContext(WithExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.WithExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithExprSubquery" ):
                return visitor.visitWithExprSubquery(self)
            else:
                return visitor.visitChildren(self)



    def withExpr(self):

        localctx = HogQLParser.WithExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_withExpr)
        try:
            self.state = 886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.WithExprSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 876
                self.identifier()
                self.state = 877
                self.match(HogQLParser.AS)
                self.state = 878
                self.match(HogQLParser.LPAREN)
                self.state = 879
                self.selectUnionStmt()
                self.state = 880
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = HogQLParser.WithExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 882
                self.columnExpr(0)
                self.state = 883
                self.match(HogQLParser.AS)
                self.state = 884
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLACEHOLDER(self):
            return self.getToken(HogQLParser.PLACEHOLDER, 0)

        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext,0)


        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnIdentifier" ):
                return visitor.visitColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def columnIdentifier(self):

        localctx = HogQLParser.ColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_columnIdentifier)
        try:
            self.state = 895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [201]:
                self.enterOuterAlt(localctx, 1)
                self.state = 888
                self.match(HogQLParser.PLACEHOLDER)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195]:
                self.enterOuterAlt(localctx, 2)
                self.state = 892
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 889
                    self.tableIdentifier()
                    self.state = 890
                    self.match(HogQLParser.DOT)


                self.state = 894
                self.nestedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DOT)
            else:
                return self.getToken(HogQLParser.DOT, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_nestedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedIdentifier" ):
                return visitor.visitNestedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def nestedIdentifier(self):

        localctx = HogQLParser.NestedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_nestedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.identifier()
            self.state = 902
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 898
                    self.match(HogQLParser.DOT)
                    self.state = 899
                    self.identifier() 
                self.state = 904
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return HogQLParser.RULE_tableExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TableExprIdentifierContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprIdentifier" ):
                return visitor.visitTableExprIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class TableExprSubqueryContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprSubquery" ):
                return visitor.visitTableExprSubquery(self)
            else:
                return visitor.visitChildren(self)


    class TableExprAliasContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext,0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprAlias" ):
                return visitor.visitTableExprAlias(self)
            else:
                return visitor.visitChildren(self)


    class TableExprFunctionContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableExprFunction" ):
                return visitor.visitTableExprFunction(self)
            else:
                return visitor.visitChildren(self)



    def tableExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.TableExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 108
        self.enterRecursionRule(localctx, 108, self.RULE_tableExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                localctx = HogQLParser.TableExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 906
                self.tableIdentifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.TableExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 907
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                localctx = HogQLParser.TableExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 908
                self.match(HogQLParser.LPAREN)
                self.state = 909
                self.selectUnionStmt()
                self.state = 910
                self.match(HogQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 922
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = HogQLParser.TableExprAliasContext(self, HogQLParser.TableExprContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableExpr)
                    self.state = 914
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 918
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [36, 62, 77, 91, 195]:
                        self.state = 915
                        self.alias()
                        pass
                    elif token in [10]:
                        self.state = 916
                        self.match(HogQLParser.AS)
                        self.state = 917
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 924
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TableFunctionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def tableArgList(self):
            return self.getTypedRuleContext(HogQLParser.TableArgListContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_tableFunctionExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFunctionExpr" ):
                return visitor.visitTableFunctionExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableFunctionExpr(self):

        localctx = HogQLParser.TableFunctionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_tableFunctionExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.identifier()
            self.state = 926
            self.match(HogQLParser.LPAREN)
            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -33554436) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -18014398509481993) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 137439609339) != 0):
                self.state = 927
                self.tableArgList()


            self.state = 930
            self.match(HogQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def databaseIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.DatabaseIdentifierContext,0)


        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = HogQLParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 932
                self.databaseIdentifier()
                self.state = 933
                self.match(HogQLParser.DOT)


            self.state = 937
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.TableArgExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.TableArgExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgList" ):
                return visitor.visitTableArgList(self)
            else:
                return visitor.visitChildren(self)




    def tableArgList(self):

        localctx = HogQLParser.TableArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_tableArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 939
            self.tableArgExpr()
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==207:
                self.state = 940
                self.match(HogQLParser.COMMA)
                self.state = 941
                self.tableArgExpr()
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext,0)


        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext,0)


        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgExpr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableArgExpr" ):
                return visitor.visitTableArgExpr(self)
            else:
                return visitor.visitChildren(self)




    def tableArgExpr(self):

        localctx = HogQLParser.TableArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_tableArgExpr)
        try:
            self.state = 950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 947
                self.nestedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 948
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 949
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_databaseIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabaseIdentifier" ):
                return visitor.visitDatabaseIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def databaseIdentifier(self):

        localctx = HogQLParser.DatabaseIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_databaseIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOATING_LITERAL(self):
            return self.getToken(HogQLParser.FLOATING_LITERAL, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def DECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(HogQLParser.DECIMAL_LITERAL)
            else:
                return self.getToken(HogQLParser.DECIMAL_LITERAL, i)

        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_floatingLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatingLiteral" ):
                return visitor.visitFloatingLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatingLiteral(self):

        localctx = HogQLParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_floatingLiteral)
        self._la = 0 # Token type
        try:
            self.state = 962
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [196]:
                self.enterOuterAlt(localctx, 1)
                self.state = 954
                self.match(HogQLParser.FLOATING_LITERAL)
                pass
            elif token in [211]:
                self.enterOuterAlt(localctx, 2)
                self.state = 955
                self.match(HogQLParser.DOT)
                self.state = 956
                _la = self._input.LA(1)
                if not(_la==197 or _la==198):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [198]:
                self.enterOuterAlt(localctx, 3)
                self.state = 957
                self.match(HogQLParser.DECIMAL_LITERAL)
                self.state = 958
                self.match(HogQLParser.DOT)
                self.state = 960
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 959
                    _la = self._input.LA(1)
                    if not(_la==197 or _la==198):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatingLiteral(self):
            return self.getTypedRuleContext(HogQLParser.FloatingLiteralContext,0)


        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.HEXADECIMAL_LITERAL, 0)

        def INF(self):
            return self.getToken(HogQLParser.INF, 0)

        def NAN_SQL(self):
            return self.getToken(HogQLParser.NAN_SQL, 0)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_numberLiteral

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = HogQLParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==209 or _la==229:
                self.state = 964
                _la = self._input.LA(1)
                if not(_la==209 or _la==229):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 967
                self.floatingLiteral()
                pass

            elif la_ == 2:
                self.state = 968
                self.match(HogQLParser.OCTAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 969
                self.match(HogQLParser.DECIMAL_LITERAL)
                pass

            elif la_ == 4:
                self.state = 970
                self.match(HogQLParser.HEXADECIMAL_LITERAL)
                pass

            elif la_ == 5:
                self.state = 971
                self.match(HogQLParser.INF)
                pass

            elif la_ == 6:
                self.state = 972
                self.match(HogQLParser.NAN_SQL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = HogQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_literal)
        try:
            self.state = 978
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82, 113, 196, 197, 198, 199, 209, 211, 229]:
                self.enterOuterAlt(localctx, 1)
                self.state = 975
                self.numberLiteral()
                pass
            elif token in [200]:
                self.enterOuterAlt(localctx, 2)
                self.state = 976
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 3)
                self.state = 977
                self.match(HogQLParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(HogQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(HogQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(HogQLParser.HOUR, 0)

        def DAY(self):
            return self.getToken(HogQLParser.DAY, 0)

        def WEEK(self):
            return self.getToken(HogQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(HogQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(HogQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(HogQLParser.YEAR, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_interval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = HogQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            _la = self._input.LA(1)
            if not(_la==37 or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 72057615512764417) != 0) or ((((_la - 145)) & ~0x3f) == 0 and ((1 << (_la - 145)) & 72567767433217) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AFTER(self):
            return self.getToken(HogQLParser.AFTER, 0)

        def ALIAS(self):
            return self.getToken(HogQLParser.ALIAS, 0)

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def ALTER(self):
            return self.getToken(HogQLParser.ALTER, 0)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)

        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def AST(self):
            return self.getToken(HogQLParser.AST, 0)

        def ASYNC(self):
            return self.getToken(HogQLParser.ASYNC, 0)

        def ATTACH(self):
            return self.getToken(HogQLParser.ATTACH, 0)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)

        def CHECK(self):
            return self.getToken(HogQLParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(HogQLParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(HogQLParser.CLUSTER, 0)

        def CODEC(self):
            return self.getToken(HogQLParser.CODEC, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def COLUMN(self):
            return self.getToken(HogQLParser.COLUMN, 0)

        def COMMENT(self):
            return self.getToken(HogQLParser.COMMENT, 0)

        def CONSTRAINT(self):
            return self.getToken(HogQLParser.CONSTRAINT, 0)

        def CREATE(self):
            return self.getToken(HogQLParser.CREATE, 0)

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def DATABASE(self):
            return self.getToken(HogQLParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(HogQLParser.DATABASES, 0)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def DEDUPLICATE(self):
            return self.getToken(HogQLParser.DEDUPLICATE, 0)

        def DEFAULT(self):
            return self.getToken(HogQLParser.DEFAULT, 0)

        def DELAY(self):
            return self.getToken(HogQLParser.DELAY, 0)

        def DELETE(self):
            return self.getToken(HogQLParser.DELETE, 0)

        def DESCRIBE(self):
            return self.getToken(HogQLParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(HogQLParser.DETACH, 0)

        def DICTIONARIES(self):
            return self.getToken(HogQLParser.DICTIONARIES, 0)

        def DICTIONARY(self):
            return self.getToken(HogQLParser.DICTIONARY, 0)

        def DISK(self):
            return self.getToken(HogQLParser.DISK, 0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def DISTRIBUTED(self):
            return self.getToken(HogQLParser.DISTRIBUTED, 0)

        def DROP(self):
            return self.getToken(HogQLParser.DROP, 0)

        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def END(self):
            return self.getToken(HogQLParser.END, 0)

        def ENGINE(self):
            return self.getToken(HogQLParser.ENGINE, 0)

        def EVENTS(self):
            return self.getToken(HogQLParser.EVENTS, 0)

        def EXISTS(self):
            return self.getToken(HogQLParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(HogQLParser.EXPLAIN, 0)

        def EXPRESSION(self):
            return self.getToken(HogQLParser.EXPRESSION, 0)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)

        def FETCHES(self):
            return self.getToken(HogQLParser.FETCHES, 0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def FLUSH(self):
            return self.getToken(HogQLParser.FLUSH, 0)

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(HogQLParser.FORMAT, 0)

        def FREEZE(self):
            return self.getToken(HogQLParser.FREEZE, 0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(HogQLParser.FUNCTION, 0)

        def GLOBAL(self):
            return self.getToken(HogQLParser.GLOBAL, 0)

        def GRANULARITY(self):
            return self.getToken(HogQLParser.GRANULARITY, 0)

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def HIERARCHICAL(self):
            return self.getToken(HogQLParser.HIERARCHICAL, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)

        def INDEX(self):
            return self.getToken(HogQLParser.INDEX, 0)

        def INJECTIVE(self):
            return self.getToken(HogQLParser.INJECTIVE, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def INSERT(self):
            return self.getToken(HogQLParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(HogQLParser.INTO, 0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)

        def IS_OBJECT_ID(self):
            return self.getToken(HogQLParser.IS_OBJECT_ID, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def JSON_FALSE(self):
            return self.getToken(HogQLParser.JSON_FALSE, 0)

        def JSON_TRUE(self):
            return self.getToken(HogQLParser.JSON_TRUE, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def KILL(self):
            return self.getToken(HogQLParser.KILL, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def LAYOUT(self):
            return self.getToken(HogQLParser.LAYOUT, 0)

        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def LIFETIME(self):
            return self.getToken(HogQLParser.LIFETIME, 0)

        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def LIVE(self):
            return self.getToken(HogQLParser.LIVE, 0)

        def LOCAL(self):
            return self.getToken(HogQLParser.LOCAL, 0)

        def LOGS(self):
            return self.getToken(HogQLParser.LOGS, 0)

        def MATERIALIZE(self):
            return self.getToken(HogQLParser.MATERIALIZE, 0)

        def MATERIALIZED(self):
            return self.getToken(HogQLParser.MATERIALIZED, 0)

        def MAX(self):
            return self.getToken(HogQLParser.MAX, 0)

        def MERGES(self):
            return self.getToken(HogQLParser.MERGES, 0)

        def MIN(self):
            return self.getToken(HogQLParser.MIN, 0)

        def MODIFY(self):
            return self.getToken(HogQLParser.MODIFY, 0)

        def MOVE(self):
            return self.getToken(HogQLParser.MOVE, 0)

        def MUTATION(self):
            return self.getToken(HogQLParser.MUTATION, 0)

        def NO(self):
            return self.getToken(HogQLParser.NO, 0)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def OPTIMIZE(self):
            return self.getToken(HogQLParser.OPTIMIZE, 0)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)

        def OUTFILE(self):
            return self.getToken(HogQLParser.OUTFILE, 0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def POPULATE(self):
            return self.getToken(HogQLParser.POPULATE, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def PRIMARY(self):
            return self.getToken(HogQLParser.PRIMARY, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def RELOAD(self):
            return self.getToken(HogQLParser.RELOAD, 0)

        def REMOVE(self):
            return self.getToken(HogQLParser.REMOVE, 0)

        def RENAME(self):
            return self.getToken(HogQLParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(HogQLParser.REPLACE, 0)

        def REPLICA(self):
            return self.getToken(HogQLParser.REPLICA, 0)

        def REPLICATED(self):
            return self.getToken(HogQLParser.REPLICATED, 0)

        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)

        def SENDS(self):
            return self.getToken(HogQLParser.SENDS, 0)

        def SET(self):
            return self.getToken(HogQLParser.SET, 0)

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def SHOW(self):
            return self.getToken(HogQLParser.SHOW, 0)

        def SOURCE(self):
            return self.getToken(HogQLParser.SOURCE, 0)

        def START(self):
            return self.getToken(HogQLParser.START, 0)

        def STOP(self):
            return self.getToken(HogQLParser.STOP, 0)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)

        def SYNC(self):
            return self.getToken(HogQLParser.SYNC, 0)

        def SYNTAX(self):
            return self.getToken(HogQLParser.SYNTAX, 0)

        def SYSTEM(self):
            return self.getToken(HogQLParser.SYSTEM, 0)

        def TABLE(self):
            return self.getToken(HogQLParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(HogQLParser.TABLES, 0)

        def TEMPORARY(self):
            return self.getToken(HogQLParser.TEMPORARY, 0)

        def TEST(self):
            return self.getToken(HogQLParser.TEST, 0)

        def THEN(self):
            return self.getToken(HogQLParser.THEN, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def TIMEOUT(self):
            return self.getToken(HogQLParser.TIMEOUT, 0)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(HogQLParser.TRUNCATE, 0)

        def TO(self):
            return self.getToken(HogQLParser.TO, 0)

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def TTL(self):
            return self.getToken(HogQLParser.TTL, 0)

        def TYPE(self):
            return self.getToken(HogQLParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def UNION(self):
            return self.getToken(HogQLParser.UNION, 0)

        def UPDATE(self):
            return self.getToken(HogQLParser.UPDATE, 0)

        def USE(self):
            return self.getToken(HogQLParser.USE, 0)

        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def UUID(self):
            return self.getToken(HogQLParser.UUID, 0)

        def VALUES(self):
            return self.getToken(HogQLParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(HogQLParser.VIEW, 0)

        def VOLUME(self):
            return self.getToken(HogQLParser.VOLUME, 0)

        def WATCH(self):
            return self.getToken(HogQLParser.WATCH, 0)

        def WHEN(self):
            return self.getToken(HogQLParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keyword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = HogQLParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            _la = self._input.LA(1)
            if not(((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & -34368126977) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -1288627627820033) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & -2382404202879025159) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordForAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keywordForAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordForAlias" ):
                return visitor.visitKeywordForAlias(self)
            else:
                return visitor.visitChildren(self)




    def keywordForAlias(self):

        localctx = HogQLParser.KeywordForAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_keywordForAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            _la = self._input.LA(1)
            if not(((((_la - 36)) & ~0x3f) == 0 and ((1 << (_la - 36)) & 36030996109328385) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def keywordForAlias(self):
            return self.getTypedRuleContext(HogQLParser.KeywordForAliasContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = HogQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_alias)
        try:
            self.state = 988
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [195]:
                self.enterOuterAlt(localctx, 1)
                self.state = 986
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [36, 62, 77, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 987
                self.keywordForAlias()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext,0)


        def keyword(self):
            return self.getTypedRuleContext(HogQLParser.KeywordContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = HogQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_identifier)
        try:
            self.state = 993
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [195]:
                self.enterOuterAlt(localctx, 1)
                self.state = 990
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [37, 76, 108, 110, 132, 145, 186, 191]:
                self.enterOuterAlt(localctx, 2)
                self.state = 991
                self.interval()
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 192, 193]:
                self.enterOuterAlt(localctx, 3)
                self.state = 992
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return HogQLParser.RULE_enumValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = HogQLParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.match(HogQLParser.STRING_LITERAL)
            self.state = 996
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 997
            self.numberLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[26] = self.joinExpr_sempred
        self._predicates[46] = self.columnExpr_sempred
        self._predicates[54] = self.tableExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def joinExpr_sempred(self, localctx:JoinExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

    def columnExpr_sempred(self, localctx:ColumnExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 7)
         

    def tableExpr_sempred(self, localctx:TableExprContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         




