# Generated from HogQLParser.g4 by ANTLR 4.11.1
# encoding: utf-8
import sys
from io import StringIO

from antlr4 import *

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        232,
        882,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        2,
        36,
        7,
        36,
        2,
        37,
        7,
        37,
        2,
        38,
        7,
        38,
        2,
        39,
        7,
        39,
        2,
        40,
        7,
        40,
        2,
        41,
        7,
        41,
        2,
        42,
        7,
        42,
        2,
        43,
        7,
        43,
        2,
        44,
        7,
        44,
        2,
        45,
        7,
        45,
        2,
        46,
        7,
        46,
        2,
        47,
        7,
        47,
        2,
        48,
        7,
        48,
        2,
        49,
        7,
        49,
        2,
        50,
        7,
        50,
        2,
        51,
        7,
        51,
        2,
        52,
        7,
        52,
        2,
        53,
        7,
        53,
        2,
        54,
        7,
        54,
        2,
        55,
        7,
        55,
        2,
        56,
        7,
        56,
        2,
        57,
        7,
        57,
        2,
        58,
        7,
        58,
        2,
        59,
        7,
        59,
        1,
        0,
        1,
        0,
        3,
        0,
        123,
        8,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        5,
        1,
        129,
        8,
        1,
        10,
        1,
        12,
        1,
        132,
        9,
        1,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        3,
        2,
        139,
        8,
        2,
        1,
        3,
        3,
        3,
        142,
        8,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        146,
        8,
        3,
        1,
        3,
        3,
        3,
        149,
        8,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        153,
        8,
        3,
        1,
        3,
        3,
        3,
        156,
        8,
        3,
        1,
        3,
        3,
        3,
        159,
        8,
        3,
        1,
        3,
        3,
        3,
        162,
        8,
        3,
        1,
        3,
        3,
        3,
        165,
        8,
        3,
        1,
        3,
        3,
        3,
        168,
        8,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        172,
        8,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        176,
        8,
        3,
        1,
        3,
        3,
        3,
        179,
        8,
        3,
        1,
        3,
        3,
        3,
        182,
        8,
        3,
        1,
        3,
        3,
        3,
        185,
        8,
        3,
        1,
        3,
        3,
        3,
        188,
        8,
        3,
        1,
        3,
        3,
        3,
        191,
        8,
        3,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        3,
        5,
        200,
        8,
        5,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        7,
        3,
        7,
        206,
        8,
        7,
        1,
        7,
        1,
        7,
        1,
        7,
        1,
        7,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        3,
        11,
        233,
        8,
        11,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        3,
        16,
        255,
        8,
        16,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        263,
        8,
        18,
        1,
        18,
        3,
        18,
        266,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        272,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        3,
        18,
        280,
        8,
        18,
        1,
        18,
        3,
        18,
        283,
        8,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        5,
        18,
        289,
        8,
        18,
        10,
        18,
        12,
        18,
        292,
        9,
        18,
        1,
        19,
        3,
        19,
        295,
        8,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        3,
        19,
        300,
        8,
        19,
        1,
        19,
        3,
        19,
        303,
        8,
        19,
        1,
        19,
        3,
        19,
        306,
        8,
        19,
        1,
        19,
        1,
        19,
        3,
        19,
        310,
        8,
        19,
        1,
        19,
        1,
        19,
        3,
        19,
        314,
        8,
        19,
        1,
        19,
        3,
        19,
        317,
        8,
        19,
        3,
        19,
        319,
        8,
        19,
        1,
        19,
        3,
        19,
        322,
        8,
        19,
        1,
        19,
        1,
        19,
        3,
        19,
        326,
        8,
        19,
        1,
        19,
        1,
        19,
        3,
        19,
        330,
        8,
        19,
        1,
        19,
        3,
        19,
        333,
        8,
        19,
        3,
        19,
        335,
        8,
        19,
        3,
        19,
        337,
        8,
        19,
        1,
        20,
        3,
        20,
        340,
        8,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        3,
        20,
        345,
        8,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        3,
        21,
        356,
        8,
        21,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        3,
        22,
        362,
        8,
        22,
        1,
        23,
        1,
        23,
        1,
        23,
        3,
        23,
        367,
        8,
        23,
        1,
        24,
        1,
        24,
        1,
        24,
        5,
        24,
        372,
        8,
        24,
        10,
        24,
        12,
        24,
        375,
        9,
        24,
        1,
        25,
        1,
        25,
        3,
        25,
        379,
        8,
        25,
        1,
        25,
        1,
        25,
        3,
        25,
        383,
        8,
        25,
        1,
        25,
        1,
        25,
        3,
        25,
        387,
        8,
        25,
        1,
        26,
        1,
        26,
        1,
        26,
        3,
        26,
        392,
        8,
        26,
        1,
        27,
        1,
        27,
        1,
        27,
        5,
        27,
        397,
        8,
        27,
        10,
        27,
        12,
        27,
        400,
        9,
        27,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        29,
        3,
        29,
        407,
        8,
        29,
        1,
        29,
        3,
        29,
        410,
        8,
        29,
        1,
        29,
        3,
        29,
        413,
        8,
        29,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        30,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        3,
        33,
        432,
        8,
        33,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        3,
        34,
        446,
        8,
        34,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        5,
        35,
        457,
        8,
        35,
        10,
        35,
        12,
        35,
        460,
        9,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        5,
        35,
        469,
        8,
        35,
        10,
        35,
        12,
        35,
        472,
        9,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        5,
        35,
        481,
        8,
        35,
        10,
        35,
        12,
        35,
        484,
        9,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        3,
        35,
        491,
        8,
        35,
        1,
        35,
        1,
        35,
        3,
        35,
        495,
        8,
        35,
        1,
        36,
        1,
        36,
        1,
        36,
        5,
        36,
        500,
        8,
        36,
        10,
        36,
        12,
        36,
        503,
        9,
        36,
        1,
        37,
        1,
        37,
        1,
        37,
        3,
        37,
        508,
        8,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        3,
        37,
        516,
        8,
        37,
        1,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        521,
        8,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        4,
        38,
        528,
        8,
        38,
        11,
        38,
        12,
        38,
        529,
        1,
        38,
        1,
        38,
        3,
        38,
        534,
        8,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        565,
        8,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        582,
        8,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        594,
        8,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        604,
        8,
        38,
        1,
        38,
        3,
        38,
        607,
        8,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        611,
        8,
        38,
        1,
        38,
        3,
        38,
        614,
        8,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        626,
        8,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        643,
        8,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        647,
        8,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        653,
        8,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        660,
        8,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        672,
        8,
        38,
        1,
        38,
        3,
        38,
        675,
        8,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        679,
        8,
        38,
        1,
        38,
        3,
        38,
        682,
        8,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        693,
        8,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        717,
        8,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        726,
        8,
        38,
        5,
        38,
        728,
        8,
        38,
        10,
        38,
        12,
        38,
        731,
        9,
        38,
        1,
        39,
        1,
        39,
        1,
        39,
        5,
        39,
        736,
        8,
        39,
        10,
        39,
        12,
        39,
        739,
        9,
        39,
        1,
        40,
        1,
        40,
        3,
        40,
        743,
        8,
        40,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        5,
        41,
        749,
        8,
        41,
        10,
        41,
        12,
        41,
        752,
        9,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        5,
        41,
        759,
        8,
        41,
        10,
        41,
        12,
        41,
        762,
        9,
        41,
        3,
        41,
        764,
        8,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        42,
        1,
        42,
        1,
        42,
        3,
        42,
        772,
        8,
        42,
        1,
        42,
        1,
        42,
        1,
        43,
        1,
        43,
        1,
        43,
        5,
        43,
        779,
        8,
        43,
        10,
        43,
        12,
        43,
        782,
        9,
        43,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        3,
        44,
        791,
        8,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        1,
        44,
        3,
        44,
        797,
        8,
        44,
        5,
        44,
        799,
        8,
        44,
        10,
        44,
        12,
        44,
        802,
        9,
        44,
        1,
        45,
        1,
        45,
        1,
        45,
        3,
        45,
        807,
        8,
        45,
        1,
        45,
        1,
        45,
        1,
        46,
        1,
        46,
        1,
        46,
        3,
        46,
        814,
        8,
        46,
        1,
        46,
        1,
        46,
        1,
        47,
        1,
        47,
        1,
        47,
        5,
        47,
        821,
        8,
        47,
        10,
        47,
        12,
        47,
        824,
        9,
        47,
        1,
        48,
        1,
        48,
        1,
        48,
        3,
        48,
        829,
        8,
        48,
        1,
        49,
        1,
        49,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        1,
        50,
        3,
        50,
        839,
        8,
        50,
        3,
        50,
        841,
        8,
        50,
        1,
        51,
        3,
        51,
        844,
        8,
        51,
        1,
        51,
        1,
        51,
        1,
        51,
        1,
        51,
        1,
        51,
        1,
        51,
        3,
        51,
        852,
        8,
        51,
        1,
        52,
        1,
        52,
        1,
        52,
        3,
        52,
        857,
        8,
        52,
        1,
        53,
        1,
        53,
        1,
        54,
        1,
        54,
        1,
        55,
        1,
        55,
        1,
        56,
        1,
        56,
        3,
        56,
        867,
        8,
        56,
        1,
        57,
        1,
        57,
        1,
        57,
        3,
        57,
        872,
        8,
        57,
        1,
        58,
        1,
        58,
        3,
        58,
        876,
        8,
        58,
        1,
        59,
        1,
        59,
        1,
        59,
        1,
        59,
        1,
        59,
        0,
        3,
        36,
        76,
        88,
        60,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        90,
        92,
        94,
        96,
        98,
        100,
        102,
        104,
        106,
        108,
        110,
        112,
        114,
        116,
        118,
        0,
        18,
        2,
        0,
        31,
        31,
        140,
        140,
        2,
        0,
        83,
        83,
        95,
        95,
        2,
        0,
        70,
        70,
        100,
        100,
        3,
        0,
        4,
        4,
        8,
        8,
        12,
        12,
        4,
        0,
        4,
        4,
        7,
        8,
        12,
        12,
        146,
        146,
        2,
        0,
        95,
        95,
        139,
        139,
        2,
        0,
        4,
        4,
        8,
        8,
        2,
        0,
        117,
        117,
        204,
        204,
        2,
        0,
        11,
        11,
        41,
        42,
        2,
        0,
        61,
        61,
        92,
        92,
        2,
        0,
        132,
        132,
        142,
        142,
        3,
        0,
        17,
        17,
        94,
        94,
        169,
        169,
        2,
        0,
        78,
        78,
        97,
        97,
        1,
        0,
        194,
        195,
        2,
        0,
        206,
        206,
        220,
        220,
        8,
        0,
        36,
        36,
        75,
        75,
        107,
        107,
        109,
        109,
        131,
        131,
        144,
        144,
        184,
        184,
        189,
        189,
        12,
        0,
        2,
        35,
        37,
        74,
        76,
        80,
        82,
        106,
        108,
        108,
        110,
        111,
        113,
        114,
        116,
        129,
        132,
        143,
        145,
        183,
        185,
        188,
        190,
        191,
        4,
        0,
        35,
        35,
        61,
        61,
        76,
        76,
        90,
        90,
        991,
        0,
        122,
        1,
        0,
        0,
        0,
        2,
        124,
        1,
        0,
        0,
        0,
        4,
        138,
        1,
        0,
        0,
        0,
        6,
        141,
        1,
        0,
        0,
        0,
        8,
        192,
        1,
        0,
        0,
        0,
        10,
        195,
        1,
        0,
        0,
        0,
        12,
        201,
        1,
        0,
        0,
        0,
        14,
        205,
        1,
        0,
        0,
        0,
        16,
        211,
        1,
        0,
        0,
        0,
        18,
        218,
        1,
        0,
        0,
        0,
        20,
        221,
        1,
        0,
        0,
        0,
        22,
        224,
        1,
        0,
        0,
        0,
        24,
        234,
        1,
        0,
        0,
        0,
        26,
        237,
        1,
        0,
        0,
        0,
        28,
        241,
        1,
        0,
        0,
        0,
        30,
        245,
        1,
        0,
        0,
        0,
        32,
        250,
        1,
        0,
        0,
        0,
        34,
        256,
        1,
        0,
        0,
        0,
        36,
        271,
        1,
        0,
        0,
        0,
        38,
        336,
        1,
        0,
        0,
        0,
        40,
        344,
        1,
        0,
        0,
        0,
        42,
        355,
        1,
        0,
        0,
        0,
        44,
        357,
        1,
        0,
        0,
        0,
        46,
        363,
        1,
        0,
        0,
        0,
        48,
        368,
        1,
        0,
        0,
        0,
        50,
        376,
        1,
        0,
        0,
        0,
        52,
        388,
        1,
        0,
        0,
        0,
        54,
        393,
        1,
        0,
        0,
        0,
        56,
        401,
        1,
        0,
        0,
        0,
        58,
        406,
        1,
        0,
        0,
        0,
        60,
        414,
        1,
        0,
        0,
        0,
        62,
        418,
        1,
        0,
        0,
        0,
        64,
        422,
        1,
        0,
        0,
        0,
        66,
        431,
        1,
        0,
        0,
        0,
        68,
        445,
        1,
        0,
        0,
        0,
        70,
        494,
        1,
        0,
        0,
        0,
        72,
        496,
        1,
        0,
        0,
        0,
        74,
        515,
        1,
        0,
        0,
        0,
        76,
        646,
        1,
        0,
        0,
        0,
        78,
        732,
        1,
        0,
        0,
        0,
        80,
        742,
        1,
        0,
        0,
        0,
        82,
        763,
        1,
        0,
        0,
        0,
        84,
        771,
        1,
        0,
        0,
        0,
        86,
        775,
        1,
        0,
        0,
        0,
        88,
        790,
        1,
        0,
        0,
        0,
        90,
        803,
        1,
        0,
        0,
        0,
        92,
        813,
        1,
        0,
        0,
        0,
        94,
        817,
        1,
        0,
        0,
        0,
        96,
        828,
        1,
        0,
        0,
        0,
        98,
        830,
        1,
        0,
        0,
        0,
        100,
        840,
        1,
        0,
        0,
        0,
        102,
        843,
        1,
        0,
        0,
        0,
        104,
        856,
        1,
        0,
        0,
        0,
        106,
        858,
        1,
        0,
        0,
        0,
        108,
        860,
        1,
        0,
        0,
        0,
        110,
        862,
        1,
        0,
        0,
        0,
        112,
        866,
        1,
        0,
        0,
        0,
        114,
        871,
        1,
        0,
        0,
        0,
        116,
        875,
        1,
        0,
        0,
        0,
        118,
        877,
        1,
        0,
        0,
        0,
        120,
        123,
        3,
        2,
        1,
        0,
        121,
        123,
        3,
        6,
        3,
        0,
        122,
        120,
        1,
        0,
        0,
        0,
        122,
        121,
        1,
        0,
        0,
        0,
        123,
        1,
        1,
        0,
        0,
        0,
        124,
        130,
        3,
        4,
        2,
        0,
        125,
        126,
        5,
        175,
        0,
        0,
        126,
        127,
        5,
        4,
        0,
        0,
        127,
        129,
        3,
        4,
        2,
        0,
        128,
        125,
        1,
        0,
        0,
        0,
        129,
        132,
        1,
        0,
        0,
        0,
        130,
        128,
        1,
        0,
        0,
        0,
        130,
        131,
        1,
        0,
        0,
        0,
        131,
        3,
        1,
        0,
        0,
        0,
        132,
        130,
        1,
        0,
        0,
        0,
        133,
        139,
        3,
        6,
        3,
        0,
        134,
        135,
        5,
        216,
        0,
        0,
        135,
        136,
        3,
        2,
        1,
        0,
        136,
        137,
        5,
        226,
        0,
        0,
        137,
        139,
        1,
        0,
        0,
        0,
        138,
        133,
        1,
        0,
        0,
        0,
        138,
        134,
        1,
        0,
        0,
        0,
        139,
        5,
        1,
        0,
        0,
        0,
        140,
        142,
        3,
        8,
        4,
        0,
        141,
        140,
        1,
        0,
        0,
        0,
        141,
        142,
        1,
        0,
        0,
        0,
        142,
        143,
        1,
        0,
        0,
        0,
        143,
        145,
        5,
        145,
        0,
        0,
        144,
        146,
        5,
        48,
        0,
        0,
        145,
        144,
        1,
        0,
        0,
        0,
        145,
        146,
        1,
        0,
        0,
        0,
        146,
        148,
        1,
        0,
        0,
        0,
        147,
        149,
        3,
        10,
        5,
        0,
        148,
        147,
        1,
        0,
        0,
        0,
        148,
        149,
        1,
        0,
        0,
        0,
        149,
        150,
        1,
        0,
        0,
        0,
        150,
        152,
        3,
        72,
        36,
        0,
        151,
        153,
        3,
        12,
        6,
        0,
        152,
        151,
        1,
        0,
        0,
        0,
        152,
        153,
        1,
        0,
        0,
        0,
        153,
        155,
        1,
        0,
        0,
        0,
        154,
        156,
        3,
        14,
        7,
        0,
        155,
        154,
        1,
        0,
        0,
        0,
        155,
        156,
        1,
        0,
        0,
        0,
        156,
        158,
        1,
        0,
        0,
        0,
        157,
        159,
        3,
        16,
        8,
        0,
        158,
        157,
        1,
        0,
        0,
        0,
        158,
        159,
        1,
        0,
        0,
        0,
        159,
        161,
        1,
        0,
        0,
        0,
        160,
        162,
        3,
        18,
        9,
        0,
        161,
        160,
        1,
        0,
        0,
        0,
        161,
        162,
        1,
        0,
        0,
        0,
        162,
        164,
        1,
        0,
        0,
        0,
        163,
        165,
        3,
        20,
        10,
        0,
        164,
        163,
        1,
        0,
        0,
        0,
        164,
        165,
        1,
        0,
        0,
        0,
        165,
        167,
        1,
        0,
        0,
        0,
        166,
        168,
        3,
        22,
        11,
        0,
        167,
        166,
        1,
        0,
        0,
        0,
        167,
        168,
        1,
        0,
        0,
        0,
        168,
        171,
        1,
        0,
        0,
        0,
        169,
        170,
        5,
        188,
        0,
        0,
        170,
        172,
        7,
        0,
        0,
        0,
        171,
        169,
        1,
        0,
        0,
        0,
        171,
        172,
        1,
        0,
        0,
        0,
        172,
        175,
        1,
        0,
        0,
        0,
        173,
        174,
        5,
        188,
        0,
        0,
        174,
        176,
        5,
        168,
        0,
        0,
        175,
        173,
        1,
        0,
        0,
        0,
        175,
        176,
        1,
        0,
        0,
        0,
        176,
        178,
        1,
        0,
        0,
        0,
        177,
        179,
        3,
        24,
        12,
        0,
        178,
        177,
        1,
        0,
        0,
        0,
        178,
        179,
        1,
        0,
        0,
        0,
        179,
        181,
        1,
        0,
        0,
        0,
        180,
        182,
        3,
        26,
        13,
        0,
        181,
        180,
        1,
        0,
        0,
        0,
        181,
        182,
        1,
        0,
        0,
        0,
        182,
        184,
        1,
        0,
        0,
        0,
        183,
        185,
        3,
        30,
        15,
        0,
        184,
        183,
        1,
        0,
        0,
        0,
        184,
        185,
        1,
        0,
        0,
        0,
        185,
        187,
        1,
        0,
        0,
        0,
        186,
        188,
        3,
        32,
        16,
        0,
        187,
        186,
        1,
        0,
        0,
        0,
        187,
        188,
        1,
        0,
        0,
        0,
        188,
        190,
        1,
        0,
        0,
        0,
        189,
        191,
        3,
        34,
        17,
        0,
        190,
        189,
        1,
        0,
        0,
        0,
        190,
        191,
        1,
        0,
        0,
        0,
        191,
        7,
        1,
        0,
        0,
        0,
        192,
        193,
        5,
        188,
        0,
        0,
        193,
        194,
        3,
        72,
        36,
        0,
        194,
        9,
        1,
        0,
        0,
        0,
        195,
        196,
        5,
        167,
        0,
        0,
        196,
        199,
        5,
        195,
        0,
        0,
        197,
        198,
        5,
        188,
        0,
        0,
        198,
        200,
        5,
        163,
        0,
        0,
        199,
        197,
        1,
        0,
        0,
        0,
        199,
        200,
        1,
        0,
        0,
        0,
        200,
        11,
        1,
        0,
        0,
        0,
        201,
        202,
        5,
        67,
        0,
        0,
        202,
        203,
        3,
        36,
        18,
        0,
        203,
        13,
        1,
        0,
        0,
        0,
        204,
        206,
        7,
        1,
        0,
        0,
        205,
        204,
        1,
        0,
        0,
        0,
        205,
        206,
        1,
        0,
        0,
        0,
        206,
        207,
        1,
        0,
        0,
        0,
        207,
        208,
        5,
        9,
        0,
        0,
        208,
        209,
        5,
        89,
        0,
        0,
        209,
        210,
        3,
        72,
        36,
        0,
        210,
        15,
        1,
        0,
        0,
        0,
        211,
        212,
        5,
        187,
        0,
        0,
        212,
        213,
        3,
        114,
        57,
        0,
        213,
        214,
        5,
        10,
        0,
        0,
        214,
        215,
        5,
        216,
        0,
        0,
        215,
        216,
        3,
        58,
        29,
        0,
        216,
        217,
        5,
        226,
        0,
        0,
        217,
        17,
        1,
        0,
        0,
        0,
        218,
        219,
        5,
        128,
        0,
        0,
        219,
        220,
        3,
        76,
        38,
        0,
        220,
        19,
        1,
        0,
        0,
        0,
        221,
        222,
        5,
        186,
        0,
        0,
        222,
        223,
        3,
        76,
        38,
        0,
        223,
        21,
        1,
        0,
        0,
        0,
        224,
        225,
        5,
        72,
        0,
        0,
        225,
        232,
        5,
        18,
        0,
        0,
        226,
        227,
        7,
        0,
        0,
        0,
        227,
        228,
        5,
        216,
        0,
        0,
        228,
        229,
        3,
        72,
        36,
        0,
        229,
        230,
        5,
        226,
        0,
        0,
        230,
        233,
        1,
        0,
        0,
        0,
        231,
        233,
        3,
        72,
        36,
        0,
        232,
        226,
        1,
        0,
        0,
        0,
        232,
        231,
        1,
        0,
        0,
        0,
        233,
        23,
        1,
        0,
        0,
        0,
        234,
        235,
        5,
        73,
        0,
        0,
        235,
        236,
        3,
        76,
        38,
        0,
        236,
        25,
        1,
        0,
        0,
        0,
        237,
        238,
        5,
        121,
        0,
        0,
        238,
        239,
        5,
        18,
        0,
        0,
        239,
        240,
        3,
        48,
        24,
        0,
        240,
        27,
        1,
        0,
        0,
        0,
        241,
        242,
        5,
        121,
        0,
        0,
        242,
        243,
        5,
        18,
        0,
        0,
        243,
        244,
        3,
        72,
        36,
        0,
        244,
        29,
        1,
        0,
        0,
        0,
        245,
        246,
        5,
        98,
        0,
        0,
        246,
        247,
        3,
        46,
        23,
        0,
        247,
        248,
        5,
        18,
        0,
        0,
        248,
        249,
        3,
        72,
        36,
        0,
        249,
        31,
        1,
        0,
        0,
        0,
        250,
        251,
        5,
        98,
        0,
        0,
        251,
        254,
        3,
        46,
        23,
        0,
        252,
        253,
        5,
        188,
        0,
        0,
        253,
        255,
        5,
        163,
        0,
        0,
        254,
        252,
        1,
        0,
        0,
        0,
        254,
        255,
        1,
        0,
        0,
        0,
        255,
        33,
        1,
        0,
        0,
        0,
        256,
        257,
        5,
        149,
        0,
        0,
        257,
        258,
        3,
        54,
        27,
        0,
        258,
        35,
        1,
        0,
        0,
        0,
        259,
        260,
        6,
        18,
        -1,
        0,
        260,
        262,
        3,
        88,
        44,
        0,
        261,
        263,
        5,
        60,
        0,
        0,
        262,
        261,
        1,
        0,
        0,
        0,
        262,
        263,
        1,
        0,
        0,
        0,
        263,
        265,
        1,
        0,
        0,
        0,
        264,
        266,
        3,
        44,
        22,
        0,
        265,
        264,
        1,
        0,
        0,
        0,
        265,
        266,
        1,
        0,
        0,
        0,
        266,
        272,
        1,
        0,
        0,
        0,
        267,
        268,
        5,
        216,
        0,
        0,
        268,
        269,
        3,
        36,
        18,
        0,
        269,
        270,
        5,
        226,
        0,
        0,
        270,
        272,
        1,
        0,
        0,
        0,
        271,
        259,
        1,
        0,
        0,
        0,
        271,
        267,
        1,
        0,
        0,
        0,
        272,
        290,
        1,
        0,
        0,
        0,
        273,
        274,
        10,
        3,
        0,
        0,
        274,
        275,
        3,
        40,
        20,
        0,
        275,
        276,
        3,
        36,
        18,
        4,
        276,
        289,
        1,
        0,
        0,
        0,
        277,
        279,
        10,
        4,
        0,
        0,
        278,
        280,
        7,
        2,
        0,
        0,
        279,
        278,
        1,
        0,
        0,
        0,
        279,
        280,
        1,
        0,
        0,
        0,
        280,
        282,
        1,
        0,
        0,
        0,
        281,
        283,
        3,
        38,
        19,
        0,
        282,
        281,
        1,
        0,
        0,
        0,
        282,
        283,
        1,
        0,
        0,
        0,
        283,
        284,
        1,
        0,
        0,
        0,
        284,
        285,
        5,
        89,
        0,
        0,
        285,
        286,
        3,
        36,
        18,
        0,
        286,
        287,
        3,
        42,
        21,
        0,
        287,
        289,
        1,
        0,
        0,
        0,
        288,
        273,
        1,
        0,
        0,
        0,
        288,
        277,
        1,
        0,
        0,
        0,
        289,
        292,
        1,
        0,
        0,
        0,
        290,
        288,
        1,
        0,
        0,
        0,
        290,
        291,
        1,
        0,
        0,
        0,
        291,
        37,
        1,
        0,
        0,
        0,
        292,
        290,
        1,
        0,
        0,
        0,
        293,
        295,
        7,
        3,
        0,
        0,
        294,
        293,
        1,
        0,
        0,
        0,
        294,
        295,
        1,
        0,
        0,
        0,
        295,
        296,
        1,
        0,
        0,
        0,
        296,
        303,
        5,
        83,
        0,
        0,
        297,
        299,
        5,
        83,
        0,
        0,
        298,
        300,
        7,
        3,
        0,
        0,
        299,
        298,
        1,
        0,
        0,
        0,
        299,
        300,
        1,
        0,
        0,
        0,
        300,
        303,
        1,
        0,
        0,
        0,
        301,
        303,
        7,
        3,
        0,
        0,
        302,
        294,
        1,
        0,
        0,
        0,
        302,
        297,
        1,
        0,
        0,
        0,
        302,
        301,
        1,
        0,
        0,
        0,
        303,
        337,
        1,
        0,
        0,
        0,
        304,
        306,
        7,
        4,
        0,
        0,
        305,
        304,
        1,
        0,
        0,
        0,
        305,
        306,
        1,
        0,
        0,
        0,
        306,
        307,
        1,
        0,
        0,
        0,
        307,
        309,
        7,
        5,
        0,
        0,
        308,
        310,
        5,
        122,
        0,
        0,
        309,
        308,
        1,
        0,
        0,
        0,
        309,
        310,
        1,
        0,
        0,
        0,
        310,
        319,
        1,
        0,
        0,
        0,
        311,
        313,
        7,
        5,
        0,
        0,
        312,
        314,
        5,
        122,
        0,
        0,
        313,
        312,
        1,
        0,
        0,
        0,
        313,
        314,
        1,
        0,
        0,
        0,
        314,
        316,
        1,
        0,
        0,
        0,
        315,
        317,
        7,
        4,
        0,
        0,
        316,
        315,
        1,
        0,
        0,
        0,
        316,
        317,
        1,
        0,
        0,
        0,
        317,
        319,
        1,
        0,
        0,
        0,
        318,
        305,
        1,
        0,
        0,
        0,
        318,
        311,
        1,
        0,
        0,
        0,
        319,
        337,
        1,
        0,
        0,
        0,
        320,
        322,
        7,
        6,
        0,
        0,
        321,
        320,
        1,
        0,
        0,
        0,
        321,
        322,
        1,
        0,
        0,
        0,
        322,
        323,
        1,
        0,
        0,
        0,
        323,
        325,
        5,
        68,
        0,
        0,
        324,
        326,
        5,
        122,
        0,
        0,
        325,
        324,
        1,
        0,
        0,
        0,
        325,
        326,
        1,
        0,
        0,
        0,
        326,
        335,
        1,
        0,
        0,
        0,
        327,
        329,
        5,
        68,
        0,
        0,
        328,
        330,
        5,
        122,
        0,
        0,
        329,
        328,
        1,
        0,
        0,
        0,
        329,
        330,
        1,
        0,
        0,
        0,
        330,
        332,
        1,
        0,
        0,
        0,
        331,
        333,
        7,
        6,
        0,
        0,
        332,
        331,
        1,
        0,
        0,
        0,
        332,
        333,
        1,
        0,
        0,
        0,
        333,
        335,
        1,
        0,
        0,
        0,
        334,
        321,
        1,
        0,
        0,
        0,
        334,
        327,
        1,
        0,
        0,
        0,
        335,
        337,
        1,
        0,
        0,
        0,
        336,
        302,
        1,
        0,
        0,
        0,
        336,
        318,
        1,
        0,
        0,
        0,
        336,
        334,
        1,
        0,
        0,
        0,
        337,
        39,
        1,
        0,
        0,
        0,
        338,
        340,
        7,
        2,
        0,
        0,
        339,
        338,
        1,
        0,
        0,
        0,
        339,
        340,
        1,
        0,
        0,
        0,
        340,
        341,
        1,
        0,
        0,
        0,
        341,
        342,
        5,
        30,
        0,
        0,
        342,
        345,
        5,
        89,
        0,
        0,
        343,
        345,
        5,
        204,
        0,
        0,
        344,
        339,
        1,
        0,
        0,
        0,
        344,
        343,
        1,
        0,
        0,
        0,
        345,
        41,
        1,
        0,
        0,
        0,
        346,
        347,
        5,
        118,
        0,
        0,
        347,
        356,
        3,
        72,
        36,
        0,
        348,
        349,
        5,
        178,
        0,
        0,
        349,
        350,
        5,
        216,
        0,
        0,
        350,
        351,
        3,
        72,
        36,
        0,
        351,
        352,
        5,
        226,
        0,
        0,
        352,
        356,
        1,
        0,
        0,
        0,
        353,
        354,
        5,
        178,
        0,
        0,
        354,
        356,
        3,
        72,
        36,
        0,
        355,
        346,
        1,
        0,
        0,
        0,
        355,
        348,
        1,
        0,
        0,
        0,
        355,
        353,
        1,
        0,
        0,
        0,
        356,
        43,
        1,
        0,
        0,
        0,
        357,
        358,
        5,
        143,
        0,
        0,
        358,
        361,
        3,
        52,
        26,
        0,
        359,
        360,
        5,
        117,
        0,
        0,
        360,
        362,
        3,
        52,
        26,
        0,
        361,
        359,
        1,
        0,
        0,
        0,
        361,
        362,
        1,
        0,
        0,
        0,
        362,
        45,
        1,
        0,
        0,
        0,
        363,
        366,
        3,
        76,
        38,
        0,
        364,
        365,
        7,
        7,
        0,
        0,
        365,
        367,
        3,
        76,
        38,
        0,
        366,
        364,
        1,
        0,
        0,
        0,
        366,
        367,
        1,
        0,
        0,
        0,
        367,
        47,
        1,
        0,
        0,
        0,
        368,
        373,
        3,
        50,
        25,
        0,
        369,
        370,
        5,
        204,
        0,
        0,
        370,
        372,
        3,
        50,
        25,
        0,
        371,
        369,
        1,
        0,
        0,
        0,
        372,
        375,
        1,
        0,
        0,
        0,
        373,
        371,
        1,
        0,
        0,
        0,
        373,
        374,
        1,
        0,
        0,
        0,
        374,
        49,
        1,
        0,
        0,
        0,
        375,
        373,
        1,
        0,
        0,
        0,
        376,
        378,
        3,
        76,
        38,
        0,
        377,
        379,
        7,
        8,
        0,
        0,
        378,
        377,
        1,
        0,
        0,
        0,
        378,
        379,
        1,
        0,
        0,
        0,
        379,
        382,
        1,
        0,
        0,
        0,
        380,
        381,
        5,
        116,
        0,
        0,
        381,
        383,
        7,
        9,
        0,
        0,
        382,
        380,
        1,
        0,
        0,
        0,
        382,
        383,
        1,
        0,
        0,
        0,
        383,
        386,
        1,
        0,
        0,
        0,
        384,
        385,
        5,
        25,
        0,
        0,
        385,
        387,
        5,
        198,
        0,
        0,
        386,
        384,
        1,
        0,
        0,
        0,
        386,
        387,
        1,
        0,
        0,
        0,
        387,
        51,
        1,
        0,
        0,
        0,
        388,
        391,
        3,
        102,
        51,
        0,
        389,
        390,
        5,
        228,
        0,
        0,
        390,
        392,
        3,
        102,
        51,
        0,
        391,
        389,
        1,
        0,
        0,
        0,
        391,
        392,
        1,
        0,
        0,
        0,
        392,
        53,
        1,
        0,
        0,
        0,
        393,
        398,
        3,
        56,
        28,
        0,
        394,
        395,
        5,
        204,
        0,
        0,
        395,
        397,
        3,
        56,
        28,
        0,
        396,
        394,
        1,
        0,
        0,
        0,
        397,
        400,
        1,
        0,
        0,
        0,
        398,
        396,
        1,
        0,
        0,
        0,
        398,
        399,
        1,
        0,
        0,
        0,
        399,
        55,
        1,
        0,
        0,
        0,
        400,
        398,
        1,
        0,
        0,
        0,
        401,
        402,
        3,
        114,
        57,
        0,
        402,
        403,
        5,
        210,
        0,
        0,
        403,
        404,
        3,
        104,
        52,
        0,
        404,
        57,
        1,
        0,
        0,
        0,
        405,
        407,
        3,
        60,
        30,
        0,
        406,
        405,
        1,
        0,
        0,
        0,
        406,
        407,
        1,
        0,
        0,
        0,
        407,
        409,
        1,
        0,
        0,
        0,
        408,
        410,
        3,
        62,
        31,
        0,
        409,
        408,
        1,
        0,
        0,
        0,
        409,
        410,
        1,
        0,
        0,
        0,
        410,
        412,
        1,
        0,
        0,
        0,
        411,
        413,
        3,
        64,
        32,
        0,
        412,
        411,
        1,
        0,
        0,
        0,
        412,
        413,
        1,
        0,
        0,
        0,
        413,
        59,
        1,
        0,
        0,
        0,
        414,
        415,
        5,
        125,
        0,
        0,
        415,
        416,
        5,
        18,
        0,
        0,
        416,
        417,
        3,
        72,
        36,
        0,
        417,
        61,
        1,
        0,
        0,
        0,
        418,
        419,
        5,
        121,
        0,
        0,
        419,
        420,
        5,
        18,
        0,
        0,
        420,
        421,
        3,
        48,
        24,
        0,
        421,
        63,
        1,
        0,
        0,
        0,
        422,
        423,
        7,
        10,
        0,
        0,
        423,
        424,
        3,
        66,
        33,
        0,
        424,
        65,
        1,
        0,
        0,
        0,
        425,
        432,
        3,
        68,
        34,
        0,
        426,
        427,
        5,
        16,
        0,
        0,
        427,
        428,
        3,
        68,
        34,
        0,
        428,
        429,
        5,
        6,
        0,
        0,
        429,
        430,
        3,
        68,
        34,
        0,
        430,
        432,
        1,
        0,
        0,
        0,
        431,
        425,
        1,
        0,
        0,
        0,
        431,
        426,
        1,
        0,
        0,
        0,
        432,
        67,
        1,
        0,
        0,
        0,
        433,
        434,
        5,
        32,
        0,
        0,
        434,
        446,
        5,
        141,
        0,
        0,
        435,
        436,
        5,
        174,
        0,
        0,
        436,
        446,
        5,
        127,
        0,
        0,
        437,
        438,
        5,
        174,
        0,
        0,
        438,
        446,
        5,
        63,
        0,
        0,
        439,
        440,
        3,
        102,
        51,
        0,
        440,
        441,
        5,
        127,
        0,
        0,
        441,
        446,
        1,
        0,
        0,
        0,
        442,
        443,
        3,
        102,
        51,
        0,
        443,
        444,
        5,
        63,
        0,
        0,
        444,
        446,
        1,
        0,
        0,
        0,
        445,
        433,
        1,
        0,
        0,
        0,
        445,
        435,
        1,
        0,
        0,
        0,
        445,
        437,
        1,
        0,
        0,
        0,
        445,
        439,
        1,
        0,
        0,
        0,
        445,
        442,
        1,
        0,
        0,
        0,
        446,
        69,
        1,
        0,
        0,
        0,
        447,
        495,
        3,
        114,
        57,
        0,
        448,
        449,
        3,
        114,
        57,
        0,
        449,
        450,
        5,
        216,
        0,
        0,
        450,
        451,
        3,
        114,
        57,
        0,
        451,
        458,
        3,
        70,
        35,
        0,
        452,
        453,
        5,
        204,
        0,
        0,
        453,
        454,
        3,
        114,
        57,
        0,
        454,
        455,
        3,
        70,
        35,
        0,
        455,
        457,
        1,
        0,
        0,
        0,
        456,
        452,
        1,
        0,
        0,
        0,
        457,
        460,
        1,
        0,
        0,
        0,
        458,
        456,
        1,
        0,
        0,
        0,
        458,
        459,
        1,
        0,
        0,
        0,
        459,
        461,
        1,
        0,
        0,
        0,
        460,
        458,
        1,
        0,
        0,
        0,
        461,
        462,
        5,
        226,
        0,
        0,
        462,
        495,
        1,
        0,
        0,
        0,
        463,
        464,
        3,
        114,
        57,
        0,
        464,
        465,
        5,
        216,
        0,
        0,
        465,
        470,
        3,
        118,
        59,
        0,
        466,
        467,
        5,
        204,
        0,
        0,
        467,
        469,
        3,
        118,
        59,
        0,
        468,
        466,
        1,
        0,
        0,
        0,
        469,
        472,
        1,
        0,
        0,
        0,
        470,
        468,
        1,
        0,
        0,
        0,
        470,
        471,
        1,
        0,
        0,
        0,
        471,
        473,
        1,
        0,
        0,
        0,
        472,
        470,
        1,
        0,
        0,
        0,
        473,
        474,
        5,
        226,
        0,
        0,
        474,
        495,
        1,
        0,
        0,
        0,
        475,
        476,
        3,
        114,
        57,
        0,
        476,
        477,
        5,
        216,
        0,
        0,
        477,
        482,
        3,
        70,
        35,
        0,
        478,
        479,
        5,
        204,
        0,
        0,
        479,
        481,
        3,
        70,
        35,
        0,
        480,
        478,
        1,
        0,
        0,
        0,
        481,
        484,
        1,
        0,
        0,
        0,
        482,
        480,
        1,
        0,
        0,
        0,
        482,
        483,
        1,
        0,
        0,
        0,
        483,
        485,
        1,
        0,
        0,
        0,
        484,
        482,
        1,
        0,
        0,
        0,
        485,
        486,
        5,
        226,
        0,
        0,
        486,
        495,
        1,
        0,
        0,
        0,
        487,
        488,
        3,
        114,
        57,
        0,
        488,
        490,
        5,
        216,
        0,
        0,
        489,
        491,
        3,
        72,
        36,
        0,
        490,
        489,
        1,
        0,
        0,
        0,
        490,
        491,
        1,
        0,
        0,
        0,
        491,
        492,
        1,
        0,
        0,
        0,
        492,
        493,
        5,
        226,
        0,
        0,
        493,
        495,
        1,
        0,
        0,
        0,
        494,
        447,
        1,
        0,
        0,
        0,
        494,
        448,
        1,
        0,
        0,
        0,
        494,
        463,
        1,
        0,
        0,
        0,
        494,
        475,
        1,
        0,
        0,
        0,
        494,
        487,
        1,
        0,
        0,
        0,
        495,
        71,
        1,
        0,
        0,
        0,
        496,
        501,
        3,
        74,
        37,
        0,
        497,
        498,
        5,
        204,
        0,
        0,
        498,
        500,
        3,
        74,
        37,
        0,
        499,
        497,
        1,
        0,
        0,
        0,
        500,
        503,
        1,
        0,
        0,
        0,
        501,
        499,
        1,
        0,
        0,
        0,
        501,
        502,
        1,
        0,
        0,
        0,
        502,
        73,
        1,
        0,
        0,
        0,
        503,
        501,
        1,
        0,
        0,
        0,
        504,
        505,
        3,
        92,
        46,
        0,
        505,
        506,
        5,
        208,
        0,
        0,
        506,
        508,
        1,
        0,
        0,
        0,
        507,
        504,
        1,
        0,
        0,
        0,
        507,
        508,
        1,
        0,
        0,
        0,
        508,
        509,
        1,
        0,
        0,
        0,
        509,
        516,
        5,
        200,
        0,
        0,
        510,
        511,
        5,
        216,
        0,
        0,
        511,
        512,
        3,
        2,
        1,
        0,
        512,
        513,
        5,
        226,
        0,
        0,
        513,
        516,
        1,
        0,
        0,
        0,
        514,
        516,
        3,
        76,
        38,
        0,
        515,
        507,
        1,
        0,
        0,
        0,
        515,
        510,
        1,
        0,
        0,
        0,
        515,
        514,
        1,
        0,
        0,
        0,
        516,
        75,
        1,
        0,
        0,
        0,
        517,
        518,
        6,
        38,
        -1,
        0,
        518,
        520,
        5,
        19,
        0,
        0,
        519,
        521,
        3,
        76,
        38,
        0,
        520,
        519,
        1,
        0,
        0,
        0,
        520,
        521,
        1,
        0,
        0,
        0,
        521,
        527,
        1,
        0,
        0,
        0,
        522,
        523,
        5,
        185,
        0,
        0,
        523,
        524,
        3,
        76,
        38,
        0,
        524,
        525,
        5,
        162,
        0,
        0,
        525,
        526,
        3,
        76,
        38,
        0,
        526,
        528,
        1,
        0,
        0,
        0,
        527,
        522,
        1,
        0,
        0,
        0,
        528,
        529,
        1,
        0,
        0,
        0,
        529,
        527,
        1,
        0,
        0,
        0,
        529,
        530,
        1,
        0,
        0,
        0,
        530,
        533,
        1,
        0,
        0,
        0,
        531,
        532,
        5,
        51,
        0,
        0,
        532,
        534,
        3,
        76,
        38,
        0,
        533,
        531,
        1,
        0,
        0,
        0,
        533,
        534,
        1,
        0,
        0,
        0,
        534,
        535,
        1,
        0,
        0,
        0,
        535,
        536,
        5,
        52,
        0,
        0,
        536,
        647,
        1,
        0,
        0,
        0,
        537,
        538,
        5,
        20,
        0,
        0,
        538,
        539,
        5,
        216,
        0,
        0,
        539,
        540,
        3,
        76,
        38,
        0,
        540,
        541,
        5,
        10,
        0,
        0,
        541,
        542,
        3,
        70,
        35,
        0,
        542,
        543,
        5,
        226,
        0,
        0,
        543,
        647,
        1,
        0,
        0,
        0,
        544,
        545,
        5,
        35,
        0,
        0,
        545,
        647,
        5,
        198,
        0,
        0,
        546,
        547,
        5,
        58,
        0,
        0,
        547,
        548,
        5,
        216,
        0,
        0,
        548,
        549,
        3,
        106,
        53,
        0,
        549,
        550,
        5,
        67,
        0,
        0,
        550,
        551,
        3,
        76,
        38,
        0,
        551,
        552,
        5,
        226,
        0,
        0,
        552,
        647,
        1,
        0,
        0,
        0,
        553,
        554,
        5,
        85,
        0,
        0,
        554,
        555,
        3,
        76,
        38,
        0,
        555,
        556,
        3,
        106,
        53,
        0,
        556,
        647,
        1,
        0,
        0,
        0,
        557,
        558,
        5,
        154,
        0,
        0,
        558,
        559,
        5,
        216,
        0,
        0,
        559,
        560,
        3,
        76,
        38,
        0,
        560,
        561,
        5,
        67,
        0,
        0,
        561,
        564,
        3,
        76,
        38,
        0,
        562,
        563,
        5,
        64,
        0,
        0,
        563,
        565,
        3,
        76,
        38,
        0,
        564,
        562,
        1,
        0,
        0,
        0,
        564,
        565,
        1,
        0,
        0,
        0,
        565,
        566,
        1,
        0,
        0,
        0,
        566,
        567,
        5,
        226,
        0,
        0,
        567,
        647,
        1,
        0,
        0,
        0,
        568,
        569,
        5,
        165,
        0,
        0,
        569,
        647,
        5,
        198,
        0,
        0,
        570,
        571,
        5,
        170,
        0,
        0,
        571,
        572,
        5,
        216,
        0,
        0,
        572,
        573,
        7,
        11,
        0,
        0,
        573,
        574,
        5,
        198,
        0,
        0,
        574,
        575,
        5,
        67,
        0,
        0,
        575,
        576,
        3,
        76,
        38,
        0,
        576,
        577,
        5,
        226,
        0,
        0,
        577,
        647,
        1,
        0,
        0,
        0,
        578,
        579,
        3,
        114,
        57,
        0,
        579,
        581,
        5,
        216,
        0,
        0,
        580,
        582,
        3,
        72,
        36,
        0,
        581,
        580,
        1,
        0,
        0,
        0,
        581,
        582,
        1,
        0,
        0,
        0,
        582,
        583,
        1,
        0,
        0,
        0,
        583,
        584,
        5,
        226,
        0,
        0,
        584,
        585,
        1,
        0,
        0,
        0,
        585,
        586,
        5,
        124,
        0,
        0,
        586,
        587,
        5,
        216,
        0,
        0,
        587,
        588,
        3,
        58,
        29,
        0,
        588,
        589,
        5,
        226,
        0,
        0,
        589,
        647,
        1,
        0,
        0,
        0,
        590,
        591,
        3,
        114,
        57,
        0,
        591,
        593,
        5,
        216,
        0,
        0,
        592,
        594,
        3,
        72,
        36,
        0,
        593,
        592,
        1,
        0,
        0,
        0,
        593,
        594,
        1,
        0,
        0,
        0,
        594,
        595,
        1,
        0,
        0,
        0,
        595,
        596,
        5,
        226,
        0,
        0,
        596,
        597,
        1,
        0,
        0,
        0,
        597,
        598,
        5,
        124,
        0,
        0,
        598,
        599,
        3,
        114,
        57,
        0,
        599,
        647,
        1,
        0,
        0,
        0,
        600,
        606,
        3,
        114,
        57,
        0,
        601,
        603,
        5,
        216,
        0,
        0,
        602,
        604,
        3,
        72,
        36,
        0,
        603,
        602,
        1,
        0,
        0,
        0,
        603,
        604,
        1,
        0,
        0,
        0,
        604,
        605,
        1,
        0,
        0,
        0,
        605,
        607,
        5,
        226,
        0,
        0,
        606,
        601,
        1,
        0,
        0,
        0,
        606,
        607,
        1,
        0,
        0,
        0,
        607,
        608,
        1,
        0,
        0,
        0,
        608,
        610,
        5,
        216,
        0,
        0,
        609,
        611,
        5,
        48,
        0,
        0,
        610,
        609,
        1,
        0,
        0,
        0,
        610,
        611,
        1,
        0,
        0,
        0,
        611,
        613,
        1,
        0,
        0,
        0,
        612,
        614,
        3,
        78,
        39,
        0,
        613,
        612,
        1,
        0,
        0,
        0,
        613,
        614,
        1,
        0,
        0,
        0,
        614,
        615,
        1,
        0,
        0,
        0,
        615,
        616,
        5,
        226,
        0,
        0,
        616,
        647,
        1,
        0,
        0,
        0,
        617,
        647,
        3,
        104,
        52,
        0,
        618,
        619,
        5,
        206,
        0,
        0,
        619,
        647,
        3,
        76,
        38,
        17,
        620,
        621,
        5,
        114,
        0,
        0,
        621,
        647,
        3,
        76,
        38,
        12,
        622,
        623,
        3,
        92,
        46,
        0,
        623,
        624,
        5,
        208,
        0,
        0,
        624,
        626,
        1,
        0,
        0,
        0,
        625,
        622,
        1,
        0,
        0,
        0,
        625,
        626,
        1,
        0,
        0,
        0,
        626,
        627,
        1,
        0,
        0,
        0,
        627,
        647,
        5,
        200,
        0,
        0,
        628,
        629,
        5,
        216,
        0,
        0,
        629,
        630,
        3,
        2,
        1,
        0,
        630,
        631,
        5,
        226,
        0,
        0,
        631,
        647,
        1,
        0,
        0,
        0,
        632,
        633,
        5,
        216,
        0,
        0,
        633,
        634,
        3,
        76,
        38,
        0,
        634,
        635,
        5,
        226,
        0,
        0,
        635,
        647,
        1,
        0,
        0,
        0,
        636,
        637,
        5,
        216,
        0,
        0,
        637,
        638,
        3,
        72,
        36,
        0,
        638,
        639,
        5,
        226,
        0,
        0,
        639,
        647,
        1,
        0,
        0,
        0,
        640,
        642,
        5,
        214,
        0,
        0,
        641,
        643,
        3,
        72,
        36,
        0,
        642,
        641,
        1,
        0,
        0,
        0,
        642,
        643,
        1,
        0,
        0,
        0,
        643,
        644,
        1,
        0,
        0,
        0,
        644,
        647,
        5,
        225,
        0,
        0,
        645,
        647,
        3,
        84,
        42,
        0,
        646,
        517,
        1,
        0,
        0,
        0,
        646,
        537,
        1,
        0,
        0,
        0,
        646,
        544,
        1,
        0,
        0,
        0,
        646,
        546,
        1,
        0,
        0,
        0,
        646,
        553,
        1,
        0,
        0,
        0,
        646,
        557,
        1,
        0,
        0,
        0,
        646,
        568,
        1,
        0,
        0,
        0,
        646,
        570,
        1,
        0,
        0,
        0,
        646,
        578,
        1,
        0,
        0,
        0,
        646,
        590,
        1,
        0,
        0,
        0,
        646,
        600,
        1,
        0,
        0,
        0,
        646,
        617,
        1,
        0,
        0,
        0,
        646,
        618,
        1,
        0,
        0,
        0,
        646,
        620,
        1,
        0,
        0,
        0,
        646,
        625,
        1,
        0,
        0,
        0,
        646,
        628,
        1,
        0,
        0,
        0,
        646,
        632,
        1,
        0,
        0,
        0,
        646,
        636,
        1,
        0,
        0,
        0,
        646,
        640,
        1,
        0,
        0,
        0,
        646,
        645,
        1,
        0,
        0,
        0,
        647,
        729,
        1,
        0,
        0,
        0,
        648,
        652,
        10,
        16,
        0,
        0,
        649,
        653,
        5,
        200,
        0,
        0,
        650,
        653,
        5,
        228,
        0,
        0,
        651,
        653,
        5,
        219,
        0,
        0,
        652,
        649,
        1,
        0,
        0,
        0,
        652,
        650,
        1,
        0,
        0,
        0,
        652,
        651,
        1,
        0,
        0,
        0,
        653,
        654,
        1,
        0,
        0,
        0,
        654,
        728,
        3,
        76,
        38,
        17,
        655,
        659,
        10,
        15,
        0,
        0,
        656,
        660,
        5,
        220,
        0,
        0,
        657,
        660,
        5,
        206,
        0,
        0,
        658,
        660,
        5,
        205,
        0,
        0,
        659,
        656,
        1,
        0,
        0,
        0,
        659,
        657,
        1,
        0,
        0,
        0,
        659,
        658,
        1,
        0,
        0,
        0,
        660,
        661,
        1,
        0,
        0,
        0,
        661,
        728,
        3,
        76,
        38,
        16,
        662,
        681,
        10,
        14,
        0,
        0,
        663,
        682,
        5,
        209,
        0,
        0,
        664,
        682,
        5,
        210,
        0,
        0,
        665,
        682,
        5,
        218,
        0,
        0,
        666,
        682,
        5,
        215,
        0,
        0,
        667,
        682,
        5,
        211,
        0,
        0,
        668,
        682,
        5,
        217,
        0,
        0,
        669,
        682,
        5,
        212,
        0,
        0,
        670,
        672,
        5,
        70,
        0,
        0,
        671,
        670,
        1,
        0,
        0,
        0,
        671,
        672,
        1,
        0,
        0,
        0,
        672,
        674,
        1,
        0,
        0,
        0,
        673,
        675,
        5,
        114,
        0,
        0,
        674,
        673,
        1,
        0,
        0,
        0,
        674,
        675,
        1,
        0,
        0,
        0,
        675,
        676,
        1,
        0,
        0,
        0,
        676,
        682,
        5,
        79,
        0,
        0,
        677,
        679,
        5,
        114,
        0,
        0,
        678,
        677,
        1,
        0,
        0,
        0,
        678,
        679,
        1,
        0,
        0,
        0,
        679,
        680,
        1,
        0,
        0,
        0,
        680,
        682,
        7,
        12,
        0,
        0,
        681,
        663,
        1,
        0,
        0,
        0,
        681,
        664,
        1,
        0,
        0,
        0,
        681,
        665,
        1,
        0,
        0,
        0,
        681,
        666,
        1,
        0,
        0,
        0,
        681,
        667,
        1,
        0,
        0,
        0,
        681,
        668,
        1,
        0,
        0,
        0,
        681,
        669,
        1,
        0,
        0,
        0,
        681,
        671,
        1,
        0,
        0,
        0,
        681,
        678,
        1,
        0,
        0,
        0,
        682,
        683,
        1,
        0,
        0,
        0,
        683,
        728,
        3,
        76,
        38,
        15,
        684,
        685,
        10,
        11,
        0,
        0,
        685,
        686,
        5,
        6,
        0,
        0,
        686,
        728,
        3,
        76,
        38,
        12,
        687,
        688,
        10,
        10,
        0,
        0,
        688,
        689,
        5,
        120,
        0,
        0,
        689,
        728,
        3,
        76,
        38,
        11,
        690,
        692,
        10,
        9,
        0,
        0,
        691,
        693,
        5,
        114,
        0,
        0,
        692,
        691,
        1,
        0,
        0,
        0,
        692,
        693,
        1,
        0,
        0,
        0,
        693,
        694,
        1,
        0,
        0,
        0,
        694,
        695,
        5,
        16,
        0,
        0,
        695,
        696,
        3,
        76,
        38,
        0,
        696,
        697,
        5,
        6,
        0,
        0,
        697,
        698,
        3,
        76,
        38,
        10,
        698,
        728,
        1,
        0,
        0,
        0,
        699,
        700,
        10,
        8,
        0,
        0,
        700,
        701,
        5,
        221,
        0,
        0,
        701,
        702,
        3,
        76,
        38,
        0,
        702,
        703,
        5,
        203,
        0,
        0,
        703,
        704,
        3,
        76,
        38,
        8,
        704,
        728,
        1,
        0,
        0,
        0,
        705,
        706,
        10,
        19,
        0,
        0,
        706,
        707,
        5,
        214,
        0,
        0,
        707,
        708,
        3,
        76,
        38,
        0,
        708,
        709,
        5,
        225,
        0,
        0,
        709,
        728,
        1,
        0,
        0,
        0,
        710,
        711,
        10,
        18,
        0,
        0,
        711,
        712,
        5,
        208,
        0,
        0,
        712,
        728,
        5,
        195,
        0,
        0,
        713,
        714,
        10,
        13,
        0,
        0,
        714,
        716,
        5,
        87,
        0,
        0,
        715,
        717,
        5,
        114,
        0,
        0,
        716,
        715,
        1,
        0,
        0,
        0,
        716,
        717,
        1,
        0,
        0,
        0,
        717,
        718,
        1,
        0,
        0,
        0,
        718,
        728,
        5,
        115,
        0,
        0,
        719,
        725,
        10,
        7,
        0,
        0,
        720,
        726,
        3,
        112,
        56,
        0,
        721,
        722,
        5,
        10,
        0,
        0,
        722,
        726,
        3,
        114,
        57,
        0,
        723,
        724,
        5,
        10,
        0,
        0,
        724,
        726,
        5,
        198,
        0,
        0,
        725,
        720,
        1,
        0,
        0,
        0,
        725,
        721,
        1,
        0,
        0,
        0,
        725,
        723,
        1,
        0,
        0,
        0,
        726,
        728,
        1,
        0,
        0,
        0,
        727,
        648,
        1,
        0,
        0,
        0,
        727,
        655,
        1,
        0,
        0,
        0,
        727,
        662,
        1,
        0,
        0,
        0,
        727,
        684,
        1,
        0,
        0,
        0,
        727,
        687,
        1,
        0,
        0,
        0,
        727,
        690,
        1,
        0,
        0,
        0,
        727,
        699,
        1,
        0,
        0,
        0,
        727,
        705,
        1,
        0,
        0,
        0,
        727,
        710,
        1,
        0,
        0,
        0,
        727,
        713,
        1,
        0,
        0,
        0,
        727,
        719,
        1,
        0,
        0,
        0,
        728,
        731,
        1,
        0,
        0,
        0,
        729,
        727,
        1,
        0,
        0,
        0,
        729,
        730,
        1,
        0,
        0,
        0,
        730,
        77,
        1,
        0,
        0,
        0,
        731,
        729,
        1,
        0,
        0,
        0,
        732,
        737,
        3,
        80,
        40,
        0,
        733,
        734,
        5,
        204,
        0,
        0,
        734,
        736,
        3,
        80,
        40,
        0,
        735,
        733,
        1,
        0,
        0,
        0,
        736,
        739,
        1,
        0,
        0,
        0,
        737,
        735,
        1,
        0,
        0,
        0,
        737,
        738,
        1,
        0,
        0,
        0,
        738,
        79,
        1,
        0,
        0,
        0,
        739,
        737,
        1,
        0,
        0,
        0,
        740,
        743,
        3,
        82,
        41,
        0,
        741,
        743,
        3,
        76,
        38,
        0,
        742,
        740,
        1,
        0,
        0,
        0,
        742,
        741,
        1,
        0,
        0,
        0,
        743,
        81,
        1,
        0,
        0,
        0,
        744,
        745,
        5,
        216,
        0,
        0,
        745,
        750,
        3,
        114,
        57,
        0,
        746,
        747,
        5,
        204,
        0,
        0,
        747,
        749,
        3,
        114,
        57,
        0,
        748,
        746,
        1,
        0,
        0,
        0,
        749,
        752,
        1,
        0,
        0,
        0,
        750,
        748,
        1,
        0,
        0,
        0,
        750,
        751,
        1,
        0,
        0,
        0,
        751,
        753,
        1,
        0,
        0,
        0,
        752,
        750,
        1,
        0,
        0,
        0,
        753,
        754,
        5,
        226,
        0,
        0,
        754,
        764,
        1,
        0,
        0,
        0,
        755,
        760,
        3,
        114,
        57,
        0,
        756,
        757,
        5,
        204,
        0,
        0,
        757,
        759,
        3,
        114,
        57,
        0,
        758,
        756,
        1,
        0,
        0,
        0,
        759,
        762,
        1,
        0,
        0,
        0,
        760,
        758,
        1,
        0,
        0,
        0,
        760,
        761,
        1,
        0,
        0,
        0,
        761,
        764,
        1,
        0,
        0,
        0,
        762,
        760,
        1,
        0,
        0,
        0,
        763,
        744,
        1,
        0,
        0,
        0,
        763,
        755,
        1,
        0,
        0,
        0,
        764,
        765,
        1,
        0,
        0,
        0,
        765,
        766,
        5,
        199,
        0,
        0,
        766,
        767,
        3,
        76,
        38,
        0,
        767,
        83,
        1,
        0,
        0,
        0,
        768,
        769,
        3,
        92,
        46,
        0,
        769,
        770,
        5,
        208,
        0,
        0,
        770,
        772,
        1,
        0,
        0,
        0,
        771,
        768,
        1,
        0,
        0,
        0,
        771,
        772,
        1,
        0,
        0,
        0,
        772,
        773,
        1,
        0,
        0,
        0,
        773,
        774,
        3,
        86,
        43,
        0,
        774,
        85,
        1,
        0,
        0,
        0,
        775,
        780,
        3,
        114,
        57,
        0,
        776,
        777,
        5,
        208,
        0,
        0,
        777,
        779,
        3,
        114,
        57,
        0,
        778,
        776,
        1,
        0,
        0,
        0,
        779,
        782,
        1,
        0,
        0,
        0,
        780,
        778,
        1,
        0,
        0,
        0,
        780,
        781,
        1,
        0,
        0,
        0,
        781,
        87,
        1,
        0,
        0,
        0,
        782,
        780,
        1,
        0,
        0,
        0,
        783,
        784,
        6,
        44,
        -1,
        0,
        784,
        791,
        3,
        92,
        46,
        0,
        785,
        791,
        3,
        90,
        45,
        0,
        786,
        787,
        5,
        216,
        0,
        0,
        787,
        788,
        3,
        2,
        1,
        0,
        788,
        789,
        5,
        226,
        0,
        0,
        789,
        791,
        1,
        0,
        0,
        0,
        790,
        783,
        1,
        0,
        0,
        0,
        790,
        785,
        1,
        0,
        0,
        0,
        790,
        786,
        1,
        0,
        0,
        0,
        791,
        800,
        1,
        0,
        0,
        0,
        792,
        796,
        10,
        1,
        0,
        0,
        793,
        797,
        3,
        112,
        56,
        0,
        794,
        795,
        5,
        10,
        0,
        0,
        795,
        797,
        3,
        114,
        57,
        0,
        796,
        793,
        1,
        0,
        0,
        0,
        796,
        794,
        1,
        0,
        0,
        0,
        797,
        799,
        1,
        0,
        0,
        0,
        798,
        792,
        1,
        0,
        0,
        0,
        799,
        802,
        1,
        0,
        0,
        0,
        800,
        798,
        1,
        0,
        0,
        0,
        800,
        801,
        1,
        0,
        0,
        0,
        801,
        89,
        1,
        0,
        0,
        0,
        802,
        800,
        1,
        0,
        0,
        0,
        803,
        804,
        3,
        114,
        57,
        0,
        804,
        806,
        5,
        216,
        0,
        0,
        805,
        807,
        3,
        94,
        47,
        0,
        806,
        805,
        1,
        0,
        0,
        0,
        806,
        807,
        1,
        0,
        0,
        0,
        807,
        808,
        1,
        0,
        0,
        0,
        808,
        809,
        5,
        226,
        0,
        0,
        809,
        91,
        1,
        0,
        0,
        0,
        810,
        811,
        3,
        98,
        49,
        0,
        811,
        812,
        5,
        208,
        0,
        0,
        812,
        814,
        1,
        0,
        0,
        0,
        813,
        810,
        1,
        0,
        0,
        0,
        813,
        814,
        1,
        0,
        0,
        0,
        814,
        815,
        1,
        0,
        0,
        0,
        815,
        816,
        3,
        114,
        57,
        0,
        816,
        93,
        1,
        0,
        0,
        0,
        817,
        822,
        3,
        96,
        48,
        0,
        818,
        819,
        5,
        204,
        0,
        0,
        819,
        821,
        3,
        96,
        48,
        0,
        820,
        818,
        1,
        0,
        0,
        0,
        821,
        824,
        1,
        0,
        0,
        0,
        822,
        820,
        1,
        0,
        0,
        0,
        822,
        823,
        1,
        0,
        0,
        0,
        823,
        95,
        1,
        0,
        0,
        0,
        824,
        822,
        1,
        0,
        0,
        0,
        825,
        829,
        3,
        86,
        43,
        0,
        826,
        829,
        3,
        90,
        45,
        0,
        827,
        829,
        3,
        104,
        52,
        0,
        828,
        825,
        1,
        0,
        0,
        0,
        828,
        826,
        1,
        0,
        0,
        0,
        828,
        827,
        1,
        0,
        0,
        0,
        829,
        97,
        1,
        0,
        0,
        0,
        830,
        831,
        3,
        114,
        57,
        0,
        831,
        99,
        1,
        0,
        0,
        0,
        832,
        841,
        5,
        193,
        0,
        0,
        833,
        834,
        5,
        208,
        0,
        0,
        834,
        841,
        7,
        13,
        0,
        0,
        835,
        836,
        5,
        195,
        0,
        0,
        836,
        838,
        5,
        208,
        0,
        0,
        837,
        839,
        7,
        13,
        0,
        0,
        838,
        837,
        1,
        0,
        0,
        0,
        838,
        839,
        1,
        0,
        0,
        0,
        839,
        841,
        1,
        0,
        0,
        0,
        840,
        832,
        1,
        0,
        0,
        0,
        840,
        833,
        1,
        0,
        0,
        0,
        840,
        835,
        1,
        0,
        0,
        0,
        841,
        101,
        1,
        0,
        0,
        0,
        842,
        844,
        7,
        14,
        0,
        0,
        843,
        842,
        1,
        0,
        0,
        0,
        843,
        844,
        1,
        0,
        0,
        0,
        844,
        851,
        1,
        0,
        0,
        0,
        845,
        852,
        3,
        100,
        50,
        0,
        846,
        852,
        5,
        194,
        0,
        0,
        847,
        852,
        5,
        195,
        0,
        0,
        848,
        852,
        5,
        196,
        0,
        0,
        849,
        852,
        5,
        81,
        0,
        0,
        850,
        852,
        5,
        112,
        0,
        0,
        851,
        845,
        1,
        0,
        0,
        0,
        851,
        846,
        1,
        0,
        0,
        0,
        851,
        847,
        1,
        0,
        0,
        0,
        851,
        848,
        1,
        0,
        0,
        0,
        851,
        849,
        1,
        0,
        0,
        0,
        851,
        850,
        1,
        0,
        0,
        0,
        852,
        103,
        1,
        0,
        0,
        0,
        853,
        857,
        3,
        102,
        51,
        0,
        854,
        857,
        5,
        198,
        0,
        0,
        855,
        857,
        5,
        115,
        0,
        0,
        856,
        853,
        1,
        0,
        0,
        0,
        856,
        854,
        1,
        0,
        0,
        0,
        856,
        855,
        1,
        0,
        0,
        0,
        857,
        105,
        1,
        0,
        0,
        0,
        858,
        859,
        7,
        15,
        0,
        0,
        859,
        107,
        1,
        0,
        0,
        0,
        860,
        861,
        7,
        16,
        0,
        0,
        861,
        109,
        1,
        0,
        0,
        0,
        862,
        863,
        7,
        17,
        0,
        0,
        863,
        111,
        1,
        0,
        0,
        0,
        864,
        867,
        5,
        192,
        0,
        0,
        865,
        867,
        3,
        110,
        55,
        0,
        866,
        864,
        1,
        0,
        0,
        0,
        866,
        865,
        1,
        0,
        0,
        0,
        867,
        113,
        1,
        0,
        0,
        0,
        868,
        872,
        5,
        192,
        0,
        0,
        869,
        872,
        3,
        106,
        53,
        0,
        870,
        872,
        3,
        108,
        54,
        0,
        871,
        868,
        1,
        0,
        0,
        0,
        871,
        869,
        1,
        0,
        0,
        0,
        871,
        870,
        1,
        0,
        0,
        0,
        872,
        115,
        1,
        0,
        0,
        0,
        873,
        876,
        3,
        114,
        57,
        0,
        874,
        876,
        5,
        115,
        0,
        0,
        875,
        873,
        1,
        0,
        0,
        0,
        875,
        874,
        1,
        0,
        0,
        0,
        876,
        117,
        1,
        0,
        0,
        0,
        877,
        878,
        5,
        198,
        0,
        0,
        878,
        879,
        5,
        210,
        0,
        0,
        879,
        880,
        3,
        102,
        51,
        0,
        880,
        119,
        1,
        0,
        0,
        0,
        114,
        122,
        130,
        138,
        141,
        145,
        148,
        152,
        155,
        158,
        161,
        164,
        167,
        171,
        175,
        178,
        181,
        184,
        187,
        190,
        199,
        205,
        232,
        254,
        262,
        265,
        271,
        279,
        282,
        288,
        290,
        294,
        299,
        302,
        305,
        309,
        313,
        316,
        318,
        321,
        325,
        329,
        332,
        334,
        336,
        339,
        344,
        355,
        361,
        366,
        373,
        378,
        382,
        386,
        391,
        398,
        406,
        409,
        412,
        431,
        445,
        458,
        470,
        482,
        490,
        494,
        501,
        507,
        515,
        520,
        529,
        533,
        564,
        581,
        593,
        603,
        606,
        610,
        613,
        625,
        642,
        646,
        652,
        659,
        671,
        674,
        678,
        681,
        692,
        716,
        725,
        727,
        729,
        737,
        742,
        750,
        760,
        763,
        771,
        780,
        790,
        796,
        800,
        806,
        813,
        822,
        828,
        838,
        840,
        843,
        851,
        856,
        866,
        871,
        875,
    ]


class HogQLParser(Parser):

    grammarFileName = "HogQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'false'",
        "'true'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'->'",
        "'*'",
        "'`'",
        "'\\'",
        "':'",
        "','",
        "'||'",
        "'-'",
        "'$'",
        "'.'",
        "'=='",
        "'='",
        "'>='",
        "'>'",
        "'{'",
        "'['",
        "'<='",
        "'('",
        "'<'",
        "<INVALID>",
        "'%'",
        "'+'",
        "'?'",
        "'\"'",
        "'''",
        "'}'",
        "']'",
        "')'",
        "';'",
        "'/'",
        "'_'",
    ]

    symbolicNames = [
        "<INVALID>",
        "ADD",
        "AFTER",
        "ALIAS",
        "ALL",
        "ALTER",
        "AND",
        "ANTI",
        "ANY",
        "ARRAY",
        "AS",
        "ASCENDING",
        "ASOF",
        "AST",
        "ASYNC",
        "ATTACH",
        "BETWEEN",
        "BOTH",
        "BY",
        "CASE",
        "CAST",
        "CHECK",
        "CLEAR",
        "CLUSTER",
        "CODEC",
        "COLLATE",
        "COLUMN",
        "COMMENT",
        "CONSTRAINT",
        "CREATE",
        "CROSS",
        "CUBE",
        "CURRENT",
        "DATABASE",
        "DATABASES",
        "DATE",
        "DAY",
        "DEDUPLICATE",
        "DEFAULT",
        "DELAY",
        "DELETE",
        "DESC",
        "DESCENDING",
        "DESCRIBE",
        "DETACH",
        "DICTIONARIES",
        "DICTIONARY",
        "DISK",
        "DISTINCT",
        "DISTRIBUTED",
        "DROP",
        "ELSE",
        "END",
        "ENGINE",
        "EVENTS",
        "EXISTS",
        "EXPLAIN",
        "EXPRESSION",
        "EXTRACT",
        "FETCHES",
        "FINAL",
        "FIRST",
        "FLUSH",
        "FOLLOWING",
        "FOR",
        "FORMAT",
        "FREEZE",
        "FROM",
        "FULL",
        "FUNCTION",
        "GLOBAL",
        "GRANULARITY",
        "GROUP",
        "HAVING",
        "HIERARCHICAL",
        "HOUR",
        "ID",
        "IF",
        "ILIKE",
        "IN",
        "INDEX",
        "INF",
        "INJECTIVE",
        "INNER",
        "INSERT",
        "INTERVAL",
        "INTO",
        "IS",
        "IS_OBJECT_ID",
        "JOIN",
        "KEY",
        "KILL",
        "LAST",
        "LAYOUT",
        "LEADING",
        "LEFT",
        "LIFETIME",
        "LIKE",
        "LIMIT",
        "LIVE",
        "LOCAL",
        "LOGS",
        "MATERIALIZE",
        "MATERIALIZED",
        "MAX",
        "MERGES",
        "MIN",
        "MINUTE",
        "MODIFY",
        "MONTH",
        "MOVE",
        "MUTATION",
        "NAN_SQL",
        "NO",
        "NOT",
        "NULL_SQL",
        "NULLS",
        "OFFSET",
        "ON",
        "OPTIMIZE",
        "OR",
        "ORDER",
        "OUTER",
        "OUTFILE",
        "OVER",
        "PARTITION",
        "POPULATE",
        "PRECEDING",
        "PREWHERE",
        "PRIMARY",
        "PROJECTION",
        "QUARTER",
        "RANGE",
        "RELOAD",
        "REMOVE",
        "RENAME",
        "REPLACE",
        "REPLICA",
        "REPLICATED",
        "RIGHT",
        "ROLLUP",
        "ROW",
        "ROWS",
        "SAMPLE",
        "SECOND",
        "SELECT",
        "SEMI",
        "SENDS",
        "SET",
        "SETTINGS",
        "SHOW",
        "SOURCE",
        "START",
        "STOP",
        "SUBSTRING",
        "SYNC",
        "SYNTAX",
        "SYSTEM",
        "TABLE",
        "TABLES",
        "TEMPORARY",
        "TEST",
        "THEN",
        "TIES",
        "TIMEOUT",
        "TIMESTAMP",
        "TO",
        "TOP",
        "TOTALS",
        "TRAILING",
        "TRIM",
        "TRUNCATE",
        "TTL",
        "TYPE",
        "UNBOUNDED",
        "UNION",
        "UPDATE",
        "USE",
        "USING",
        "UUID",
        "VALUES",
        "VIEW",
        "VOLUME",
        "WATCH",
        "WEEK",
        "WHEN",
        "WHERE",
        "WINDOW",
        "WITH",
        "YEAR",
        "JSON_FALSE",
        "JSON_TRUE",
        "IDENTIFIER",
        "FLOATING_LITERAL",
        "OCTAL_LITERAL",
        "DECIMAL_LITERAL",
        "HEXADECIMAL_LITERAL",
        "ESCAPE_CHAR",
        "STRING_LITERAL",
        "ARROW",
        "ASTERISK",
        "BACKQUOTE",
        "BACKSLASH",
        "COLON",
        "COMMA",
        "CONCAT",
        "DASH",
        "DOLLAR",
        "DOT",
        "EQ_DOUBLE",
        "EQ_SINGLE",
        "GE",
        "GT",
        "LBRACE",
        "LBRACKET",
        "LE",
        "LPAREN",
        "LT",
        "NOT_EQ",
        "PERCENT",
        "PLUS",
        "QUERY",
        "QUOTE_DOUBLE",
        "QUOTE_SINGLE",
        "RBRACE",
        "RBRACKET",
        "RPAREN",
        "SEMICOLON",
        "SLASH",
        "UNDERSCORE",
        "MULTI_LINE_COMMENT",
        "SINGLE_LINE_COMMENT",
        "WHITESPACE",
    ]

    RULE_selectQuery = 0
    RULE_selectUnionStmt = 1
    RULE_selectStmtWithParens = 2
    RULE_selectStmt = 3
    RULE_withClause = 4
    RULE_topClause = 5
    RULE_fromClause = 6
    RULE_arrayJoinClause = 7
    RULE_windowClause = 8
    RULE_prewhereClause = 9
    RULE_whereClause = 10
    RULE_groupByClause = 11
    RULE_havingClause = 12
    RULE_orderByClause = 13
    RULE_projectionOrderByClause = 14
    RULE_limitByClause = 15
    RULE_limitClause = 16
    RULE_settingsClause = 17
    RULE_joinExpr = 18
    RULE_joinOp = 19
    RULE_joinOpCross = 20
    RULE_joinConstraintClause = 21
    RULE_sampleClause = 22
    RULE_limitExpr = 23
    RULE_orderExprList = 24
    RULE_orderExpr = 25
    RULE_ratioExpr = 26
    RULE_settingExprList = 27
    RULE_settingExpr = 28
    RULE_windowExpr = 29
    RULE_winPartitionByClause = 30
    RULE_winOrderByClause = 31
    RULE_winFrameClause = 32
    RULE_winFrameExtend = 33
    RULE_winFrameBound = 34
    RULE_columnTypeExpr = 35
    RULE_columnExprList = 36
    RULE_columnsExpr = 37
    RULE_columnExpr = 38
    RULE_columnArgList = 39
    RULE_columnArgExpr = 40
    RULE_columnLambdaExpr = 41
    RULE_columnIdentifier = 42
    RULE_nestedIdentifier = 43
    RULE_tableExpr = 44
    RULE_tableFunctionExpr = 45
    RULE_tableIdentifier = 46
    RULE_tableArgList = 47
    RULE_tableArgExpr = 48
    RULE_databaseIdentifier = 49
    RULE_floatingLiteral = 50
    RULE_numberLiteral = 51
    RULE_literal = 52
    RULE_interval = 53
    RULE_keyword = 54
    RULE_keywordForAlias = 55
    RULE_alias = 56
    RULE_identifier = 57
    RULE_identifierOrNull = 58
    RULE_enumValue = 59

    ruleNames = [
        "selectQuery",
        "selectUnionStmt",
        "selectStmtWithParens",
        "selectStmt",
        "withClause",
        "topClause",
        "fromClause",
        "arrayJoinClause",
        "windowClause",
        "prewhereClause",
        "whereClause",
        "groupByClause",
        "havingClause",
        "orderByClause",
        "projectionOrderByClause",
        "limitByClause",
        "limitClause",
        "settingsClause",
        "joinExpr",
        "joinOp",
        "joinOpCross",
        "joinConstraintClause",
        "sampleClause",
        "limitExpr",
        "orderExprList",
        "orderExpr",
        "ratioExpr",
        "settingExprList",
        "settingExpr",
        "windowExpr",
        "winPartitionByClause",
        "winOrderByClause",
        "winFrameClause",
        "winFrameExtend",
        "winFrameBound",
        "columnTypeExpr",
        "columnExprList",
        "columnsExpr",
        "columnExpr",
        "columnArgList",
        "columnArgExpr",
        "columnLambdaExpr",
        "columnIdentifier",
        "nestedIdentifier",
        "tableExpr",
        "tableFunctionExpr",
        "tableIdentifier",
        "tableArgList",
        "tableArgExpr",
        "databaseIdentifier",
        "floatingLiteral",
        "numberLiteral",
        "literal",
        "interval",
        "keyword",
        "keywordForAlias",
        "alias",
        "identifier",
        "identifierOrNull",
        "enumValue",
    ]

    EOF = Token.EOF
    ADD = 1
    AFTER = 2
    ALIAS = 3
    ALL = 4
    ALTER = 5
    AND = 6
    ANTI = 7
    ANY = 8
    ARRAY = 9
    AS = 10
    ASCENDING = 11
    ASOF = 12
    AST = 13
    ASYNC = 14
    ATTACH = 15
    BETWEEN = 16
    BOTH = 17
    BY = 18
    CASE = 19
    CAST = 20
    CHECK = 21
    CLEAR = 22
    CLUSTER = 23
    CODEC = 24
    COLLATE = 25
    COLUMN = 26
    COMMENT = 27
    CONSTRAINT = 28
    CREATE = 29
    CROSS = 30
    CUBE = 31
    CURRENT = 32
    DATABASE = 33
    DATABASES = 34
    DATE = 35
    DAY = 36
    DEDUPLICATE = 37
    DEFAULT = 38
    DELAY = 39
    DELETE = 40
    DESC = 41
    DESCENDING = 42
    DESCRIBE = 43
    DETACH = 44
    DICTIONARIES = 45
    DICTIONARY = 46
    DISK = 47
    DISTINCT = 48
    DISTRIBUTED = 49
    DROP = 50
    ELSE = 51
    END = 52
    ENGINE = 53
    EVENTS = 54
    EXISTS = 55
    EXPLAIN = 56
    EXPRESSION = 57
    EXTRACT = 58
    FETCHES = 59
    FINAL = 60
    FIRST = 61
    FLUSH = 62
    FOLLOWING = 63
    FOR = 64
    FORMAT = 65
    FREEZE = 66
    FROM = 67
    FULL = 68
    FUNCTION = 69
    GLOBAL = 70
    GRANULARITY = 71
    GROUP = 72
    HAVING = 73
    HIERARCHICAL = 74
    HOUR = 75
    ID = 76
    IF = 77
    ILIKE = 78
    IN = 79
    INDEX = 80
    INF = 81
    INJECTIVE = 82
    INNER = 83
    INSERT = 84
    INTERVAL = 85
    INTO = 86
    IS = 87
    IS_OBJECT_ID = 88
    JOIN = 89
    KEY = 90
    KILL = 91
    LAST = 92
    LAYOUT = 93
    LEADING = 94
    LEFT = 95
    LIFETIME = 96
    LIKE = 97
    LIMIT = 98
    LIVE = 99
    LOCAL = 100
    LOGS = 101
    MATERIALIZE = 102
    MATERIALIZED = 103
    MAX = 104
    MERGES = 105
    MIN = 106
    MINUTE = 107
    MODIFY = 108
    MONTH = 109
    MOVE = 110
    MUTATION = 111
    NAN_SQL = 112
    NO = 113
    NOT = 114
    NULL_SQL = 115
    NULLS = 116
    OFFSET = 117
    ON = 118
    OPTIMIZE = 119
    OR = 120
    ORDER = 121
    OUTER = 122
    OUTFILE = 123
    OVER = 124
    PARTITION = 125
    POPULATE = 126
    PRECEDING = 127
    PREWHERE = 128
    PRIMARY = 129
    PROJECTION = 130
    QUARTER = 131
    RANGE = 132
    RELOAD = 133
    REMOVE = 134
    RENAME = 135
    REPLACE = 136
    REPLICA = 137
    REPLICATED = 138
    RIGHT = 139
    ROLLUP = 140
    ROW = 141
    ROWS = 142
    SAMPLE = 143
    SECOND = 144
    SELECT = 145
    SEMI = 146
    SENDS = 147
    SET = 148
    SETTINGS = 149
    SHOW = 150
    SOURCE = 151
    START = 152
    STOP = 153
    SUBSTRING = 154
    SYNC = 155
    SYNTAX = 156
    SYSTEM = 157
    TABLE = 158
    TABLES = 159
    TEMPORARY = 160
    TEST = 161
    THEN = 162
    TIES = 163
    TIMEOUT = 164
    TIMESTAMP = 165
    TO = 166
    TOP = 167
    TOTALS = 168
    TRAILING = 169
    TRIM = 170
    TRUNCATE = 171
    TTL = 172
    TYPE = 173
    UNBOUNDED = 174
    UNION = 175
    UPDATE = 176
    USE = 177
    USING = 178
    UUID = 179
    VALUES = 180
    VIEW = 181
    VOLUME = 182
    WATCH = 183
    WEEK = 184
    WHEN = 185
    WHERE = 186
    WINDOW = 187
    WITH = 188
    YEAR = 189
    JSON_FALSE = 190
    JSON_TRUE = 191
    IDENTIFIER = 192
    FLOATING_LITERAL = 193
    OCTAL_LITERAL = 194
    DECIMAL_LITERAL = 195
    HEXADECIMAL_LITERAL = 196
    ESCAPE_CHAR = 197
    STRING_LITERAL = 198
    ARROW = 199
    ASTERISK = 200
    BACKQUOTE = 201
    BACKSLASH = 202
    COLON = 203
    COMMA = 204
    CONCAT = 205
    DASH = 206
    DOLLAR = 207
    DOT = 208
    EQ_DOUBLE = 209
    EQ_SINGLE = 210
    GE = 211
    GT = 212
    LBRACE = 213
    LBRACKET = 214
    LE = 215
    LPAREN = 216
    LT = 217
    NOT_EQ = 218
    PERCENT = 219
    PLUS = 220
    QUERY = 221
    QUOTE_DOUBLE = 222
    QUOTE_SINGLE = 223
    RBRACE = 224
    RBRACKET = 225
    RPAREN = 226
    SEMICOLON = 227
    SLASH = 228
    UNDERSCORE = 229
    MULTI_LINE_COMMENT = 230
    SINGLE_LINE_COMMENT = 231
    WHITESPACE = 232

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class SelectQueryContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext, 0)

        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectQuery

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectQuery"):
                listener.enterSelectQuery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectQuery"):
                listener.exitSelectQuery(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectQuery"):
                return visitor.visitSelectQuery(self)
            else:
                return visitor.visitChildren(self)

    def selectQuery(self):

        localctx = HogQLParser.SelectQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_selectQuery)
        try:
            self.state = 122
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 0, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 120
                self.selectUnionStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 121
                self.selectStmt()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectUnionStmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SelectStmtWithParensContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SelectStmtWithParensContext, i)

        def UNION(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.UNION)
            else:
                return self.getToken(HogQLParser.UNION, i)

        def ALL(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.ALL)
            else:
                return self.getToken(HogQLParser.ALL, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectUnionStmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectUnionStmt"):
                listener.enterSelectUnionStmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectUnionStmt"):
                listener.exitSelectUnionStmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectUnionStmt"):
                return visitor.visitSelectUnionStmt(self)
            else:
                return visitor.visitChildren(self)

    def selectUnionStmt(self):

        localctx = HogQLParser.SelectUnionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_selectUnionStmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 124
            self.selectStmtWithParens()
            self.state = 130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 175:
                self.state = 125
                self.match(HogQLParser.UNION)
                self.state = 126
                self.match(HogQLParser.ALL)
                self.state = 127
                self.selectStmtWithParens()
                self.state = 132
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectStmtWithParensContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectStmtContext, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmtWithParens

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectStmtWithParens"):
                listener.enterSelectStmtWithParens(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectStmtWithParens"):
                listener.exitSelectStmtWithParens(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectStmtWithParens"):
                return visitor.visitSelectStmtWithParens(self)
            else:
                return visitor.visitChildren(self)

    def selectStmtWithParens(self):

        localctx = HogQLParser.SelectStmtWithParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_selectStmtWithParens)
        try:
            self.state = 138
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [145, 188]:
                self.enterOuterAlt(localctx, 1)
                self.state = 133
                self.selectStmt()
                pass
            elif token in [216]:
                self.enterOuterAlt(localctx, 2)
                self.state = 134
                self.match(HogQLParser.LPAREN)
                self.state = 135
                self.selectUnionStmt()
                self.state = 136
                self.match(HogQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectStmtContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.with_ = None  # WithClauseContext
            self.columns = None  # ColumnExprListContext
            self.from_ = None  # FromClauseContext
            self.where = None  # WhereClauseContext

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext, 0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def topClause(self):
            return self.getTypedRuleContext(HogQLParser.TopClauseContext, 0)

        def arrayJoinClause(self):
            return self.getTypedRuleContext(HogQLParser.ArrayJoinClauseContext, 0)

        def windowClause(self):
            return self.getTypedRuleContext(HogQLParser.WindowClauseContext, 0)

        def prewhereClause(self):
            return self.getTypedRuleContext(HogQLParser.PrewhereClauseContext, 0)

        def groupByClause(self):
            return self.getTypedRuleContext(HogQLParser.GroupByClauseContext, 0)

        def WITH(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.WITH)
            else:
                return self.getToken(HogQLParser.WITH, i)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def havingClause(self):
            return self.getTypedRuleContext(HogQLParser.HavingClauseContext, 0)

        def orderByClause(self):
            return self.getTypedRuleContext(HogQLParser.OrderByClauseContext, 0)

        def limitByClause(self):
            return self.getTypedRuleContext(HogQLParser.LimitByClauseContext, 0)

        def limitClause(self):
            return self.getTypedRuleContext(HogQLParser.LimitClauseContext, 0)

        def settingsClause(self):
            return self.getTypedRuleContext(HogQLParser.SettingsClauseContext, 0)

        def withClause(self):
            return self.getTypedRuleContext(HogQLParser.WithClauseContext, 0)

        def fromClause(self):
            return self.getTypedRuleContext(HogQLParser.FromClauseContext, 0)

        def whereClause(self):
            return self.getTypedRuleContext(HogQLParser.WhereClauseContext, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_selectStmt

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSelectStmt"):
                listener.enterSelectStmt(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSelectStmt"):
                listener.exitSelectStmt(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSelectStmt"):
                return visitor.visitSelectStmt(self)
            else:
                return visitor.visitChildren(self)

    def selectStmt(self):

        localctx = HogQLParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_selectStmt)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 188:
                self.state = 140
                localctx.with_ = self.withClause()

            self.state = 143
            self.match(HogQLParser.SELECT)
            self.state = 145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 4, self._ctx)
            if la_ == 1:
                self.state = 144
                self.match(HogQLParser.DISTINCT)

            self.state = 148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 5, self._ctx)
            if la_ == 1:
                self.state = 147
                self.topClause()

            self.state = 150
            localctx.columns = self.columnExprList()
            self.state = 152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 67:
                self.state = 151
                localctx.from_ = self.fromClause()

            self.state = 155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 9 or _la == 83 or _la == 95:
                self.state = 154
                self.arrayJoinClause()

            self.state = 158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 187:
                self.state = 157
                self.windowClause()

            self.state = 161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 128:
                self.state = 160
                self.prewhereClause()

            self.state = 164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 186:
                self.state = 163
                localctx.where = self.whereClause()

            self.state = 167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 72:
                self.state = 166
                self.groupByClause()

            self.state = 171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
            if la_ == 1:
                self.state = 169
                self.match(HogQLParser.WITH)
                self.state = 170
                _la = self._input.LA(1)
                if not (_la == 31 or _la == 140):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 188:
                self.state = 173
                self.match(HogQLParser.WITH)
                self.state = 174
                self.match(HogQLParser.TOTALS)

            self.state = 178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 73:
                self.state = 177
                self.havingClause()

            self.state = 181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 121:
                self.state = 180
                self.orderByClause()

            self.state = 184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 16, self._ctx)
            if la_ == 1:
                self.state = 183
                self.limitByClause()

            self.state = 187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 98:
                self.state = 186
                self.limitClause()

            self.state = 190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 149:
                self.state = 189
                self.settingsClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WithClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_withClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWithClause"):
                listener.enterWithClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWithClause"):
                listener.exitWithClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWithClause"):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)

    def withClause(self):

        localctx = HogQLParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 192
            self.match(HogQLParser.WITH)
            self.state = 193
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TopClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_topClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTopClause"):
                listener.enterTopClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTopClause"):
                listener.exitTopClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTopClause"):
                return visitor.visitTopClause(self)
            else:
                return visitor.visitChildren(self)

    def topClause(self):

        localctx = HogQLParser.TopClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_topClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.match(HogQLParser.TOP)
            self.state = 196
            self.match(HogQLParser.DECIMAL_LITERAL)
            self.state = 199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 19, self._ctx)
            if la_ == 1:
                self.state = 197
                self.match(HogQLParser.WITH)
                self.state = 198
                self.match(HogQLParser.TIES)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FromClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_fromClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFromClause"):
                listener.enterFromClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFromClause"):
                listener.exitFromClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFromClause"):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)

    def fromClause(self):

        localctx = HogQLParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self.match(HogQLParser.FROM)
            self.state = 202
            self.joinExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayJoinClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext, 0)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_arrayJoinClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArrayJoinClause"):
                listener.enterArrayJoinClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArrayJoinClause"):
                listener.exitArrayJoinClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArrayJoinClause"):
                return visitor.visitArrayJoinClause(self)
            else:
                return visitor.visitChildren(self)

    def arrayJoinClause(self):

        localctx = HogQLParser.ArrayJoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_arrayJoinClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 83 or _la == 95:
                self.state = 204
                _la = self._input.LA(1)
                if not (_la == 83 or _la == 95):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 207
            self.match(HogQLParser.ARRAY)
            self.state = 208
            self.match(HogQLParser.JOIN)
            self.state = 209
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WindowClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext, 0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def windowExpr(self):
            return self.getTypedRuleContext(HogQLParser.WindowExprContext, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_windowClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWindowClause"):
                listener.enterWindowClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWindowClause"):
                listener.exitWindowClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWindowClause"):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)

    def windowClause(self):

        localctx = HogQLParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.match(HogQLParser.WINDOW)
            self.state = 212
            self.identifier()
            self.state = 213
            self.match(HogQLParser.AS)
            self.state = 214
            self.match(HogQLParser.LPAREN)
            self.state = 215
            self.windowExpr()
            self.state = 216
            self.match(HogQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrewhereClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_prewhereClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrewhereClause"):
                listener.enterPrewhereClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrewhereClause"):
                listener.exitPrewhereClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrewhereClause"):
                return visitor.visitPrewhereClause(self)
            else:
                return visitor.visitChildren(self)

    def prewhereClause(self):

        localctx = HogQLParser.PrewhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_prewhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.match(HogQLParser.PREWHERE)
            self.state = 219
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhereClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_whereClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhereClause"):
                listener.enterWhereClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhereClause"):
                listener.exitWhereClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWhereClause"):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)

    def whereClause(self):

        localctx = HogQLParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self.match(HogQLParser.WHERE)
            self.state = 222
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupByClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_groupByClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGroupByClause"):
                listener.enterGroupByClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGroupByClause"):
                listener.exitGroupByClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGroupByClause"):
                return visitor.visitGroupByClause(self)
            else:
                return visitor.visitChildren(self)

    def groupByClause(self):

        localctx = HogQLParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_groupByClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.match(HogQLParser.GROUP)
            self.state = 225
            self.match(HogQLParser.BY)
            self.state = 232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 21, self._ctx)
            if la_ == 1:
                self.state = 226
                _la = self._input.LA(1)
                if not (_la == 31 or _la == 140):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 227
                self.match(HogQLParser.LPAREN)
                self.state = 228
                self.columnExprList()
                self.state = 229
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 231
                self.columnExprList()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HavingClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_havingClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHavingClause"):
                listener.enterHavingClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHavingClause"):
                listener.exitHavingClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitHavingClause"):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)

    def havingClause(self):

        localctx = HogQLParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.match(HogQLParser.HAVING)
            self.state = 235
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderByClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderByClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrderByClause"):
                listener.enterOrderByClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrderByClause"):
                listener.exitOrderByClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOrderByClause"):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)

    def orderByClause(self):

        localctx = HogQLParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.match(HogQLParser.ORDER)
            self.state = 238
            self.match(HogQLParser.BY)
            self.state = 239
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProjectionOrderByClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_projectionOrderByClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProjectionOrderByClause"):
                listener.enterProjectionOrderByClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProjectionOrderByClause"):
                listener.exitProjectionOrderByClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitProjectionOrderByClause"):
                return visitor.visitProjectionOrderByClause(self)
            else:
                return visitor.visitChildren(self)

    def projectionOrderByClause(self):

        localctx = HogQLParser.ProjectionOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_projectionOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.match(HogQLParser.ORDER)
            self.state = 242
            self.match(HogQLParser.BY)
            self.state = 243
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LimitByClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def limitExpr(self):
            return self.getTypedRuleContext(HogQLParser.LimitExprContext, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitByClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLimitByClause"):
                listener.enterLimitByClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLimitByClause"):
                listener.exitLimitByClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLimitByClause"):
                return visitor.visitLimitByClause(self)
            else:
                return visitor.visitChildren(self)

    def limitByClause(self):

        localctx = HogQLParser.LimitByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_limitByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.match(HogQLParser.LIMIT)
            self.state = 246
            self.limitExpr()
            self.state = 247
            self.match(HogQLParser.BY)
            self.state = 248
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LimitClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def limitExpr(self):
            return self.getTypedRuleContext(HogQLParser.LimitExprContext, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLimitClause"):
                listener.enterLimitClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLimitClause"):
                listener.exitLimitClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLimitClause"):
                return visitor.visitLimitClause(self)
            else:
                return visitor.visitChildren(self)

    def limitClause(self):

        localctx = HogQLParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_limitClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.match(HogQLParser.LIMIT)
            self.state = 251
            self.limitExpr()
            self.state = 254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 188:
                self.state = 252
                self.match(HogQLParser.WITH)
                self.state = 253
                self.match(HogQLParser.TIES)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SettingsClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(HogQLParser.SettingExprListContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_settingsClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSettingsClause"):
                listener.enterSettingsClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSettingsClause"):
                listener.exitSettingsClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSettingsClause"):
                return visitor.visitSettingsClause(self)
            else:
                return visitor.visitChildren(self)

    def settingsClause(self):

        localctx = HogQLParser.SettingsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_settingsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.match(HogQLParser.SETTINGS)
            self.state = 257
            self.settingExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return HogQLParser.RULE_joinExpr

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class JoinExprOpContext(JoinExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext, i)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def joinConstraintClause(self):
            return self.getTypedRuleContext(HogQLParser.JoinConstraintClauseContext, 0)

        def joinOp(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpContext, 0)

        def GLOBAL(self):
            return self.getToken(HogQLParser.GLOBAL, 0)

        def LOCAL(self):
            return self.getToken(HogQLParser.LOCAL, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoinExprOp"):
                listener.enterJoinExprOp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoinExprOp"):
                listener.exitJoinExprOp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinExprOp"):
                return visitor.visitJoinExprOp(self)
            else:
                return visitor.visitChildren(self)

    class JoinExprTableContext(JoinExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext, 0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)

        def sampleClause(self):
            return self.getTypedRuleContext(HogQLParser.SampleClauseContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoinExprTable"):
                listener.enterJoinExprTable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoinExprTable"):
                listener.exitJoinExprTable(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinExprTable"):
                return visitor.visitJoinExprTable(self)
            else:
                return visitor.visitChildren(self)

    class JoinExprParensContext(JoinExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def joinExpr(self):
            return self.getTypedRuleContext(HogQLParser.JoinExprContext, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoinExprParens"):
                listener.enterJoinExprParens(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoinExprParens"):
                listener.exitJoinExprParens(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinExprParens"):
                return visitor.visitJoinExprParens(self)
            else:
                return visitor.visitChildren(self)

    class JoinExprCrossOpContext(JoinExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.JoinExprContext, i)

        def joinOpCross(self):
            return self.getTypedRuleContext(HogQLParser.JoinOpCrossContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoinExprCrossOp"):
                listener.enterJoinExprCrossOp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoinExprCrossOp"):
                listener.exitJoinExprCrossOp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinExprCrossOp"):
                return visitor.visitJoinExprCrossOp(self)
            else:
                return visitor.visitChildren(self)

    def joinExpr(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.JoinExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_joinExpr, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 25, self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinExprTableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 260
                self.tableExpr(0)
                self.state = 262
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 23, self._ctx)
                if la_ == 1:
                    self.state = 261
                    self.match(HogQLParser.FINAL)

                self.state = 265
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 24, self._ctx)
                if la_ == 1:
                    self.state = 264
                    self.sampleClause()

                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 267
                self.match(HogQLParser.LPAREN)
                self.state = 268
                self.joinExpr(0)
                self.state = 269
                self.match(HogQLParser.RPAREN)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 290
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 29, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 288
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 28, self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.JoinExprCrossOpContext(
                            self, HogQLParser.JoinExprContext(self, _parentctx, _parentState)
                        )
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 273
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 274
                        self.joinOpCross()
                        self.state = 275
                        self.joinExpr(4)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.JoinExprOpContext(
                            self, HogQLParser.JoinExprContext(self, _parentctx, _parentState)
                        )
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 277
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 279
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 70 or _la == 100:
                            self.state = 278
                            _la = self._input.LA(1)
                            if not (_la == 70 or _la == 100):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()

                        self.state = 282
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (
                            ((_la) & ~0x3F) == 0
                            and ((1 << _la) & 4496) != 0
                            or (((_la - 68)) & ~0x3F) == 0
                            and ((1 << (_la - 68)) & 134250497) != 0
                            or _la == 139
                            or _la == 146
                        ):
                            self.state = 281
                            self.joinOp()

                        self.state = 284
                        self.match(HogQLParser.JOIN)
                        self.state = 285
                        self.joinExpr(0)
                        self.state = 286
                        self.joinConstraintClause()
                        pass

                self.state = 292
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 29, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class JoinOpContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return HogQLParser.RULE_joinOp

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class JoinOpFullContext(JoinOpContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)

        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoinOpFull"):
                listener.enterJoinOpFull(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoinOpFull"):
                listener.exitJoinOpFull(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinOpFull"):
                return visitor.visitJoinOpFull(self)
            else:
                return visitor.visitChildren(self)

    class JoinOpInnerContext(JoinOpContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoinOpInner"):
                listener.enterJoinOpInner(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoinOpInner"):
                listener.exitJoinOpInner(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinOpInner"):
                return visitor.visitJoinOpInner(self)
            else:
                return visitor.visitChildren(self)

    class JoinOpLeftRightContext(JoinOpContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)

        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoinOpLeftRight"):
                listener.enterJoinOpLeftRight(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoinOpLeftRight"):
                listener.exitJoinOpLeftRight(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinOpLeftRight"):
                return visitor.visitJoinOpLeftRight(self)
            else:
                return visitor.visitChildren(self)

    def joinOp(self):

        localctx = HogQLParser.JoinOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_joinOp)
        self._la = 0  # Token type
        try:
            self.state = 336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 43, self._ctx)
            if la_ == 1:
                localctx = HogQLParser.JoinOpInnerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 32, self._ctx)
                if la_ == 1:
                    self.state = 294
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3F) == 0 and ((1 << _la) & 4368) != 0:
                        self.state = 293
                        _la = self._input.LA(1)
                        if not (((_la) & ~0x3F) == 0 and ((1 << _la) & 4368) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    self.state = 296
                    self.match(HogQLParser.INNER)
                    pass

                elif la_ == 2:
                    self.state = 297
                    self.match(HogQLParser.INNER)
                    self.state = 299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3F) == 0 and ((1 << _la) & 4368) != 0:
                        self.state = 298
                        _la = self._input.LA(1)
                        if not (((_la) & ~0x3F) == 0 and ((1 << _la) & 4368) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    pass

                elif la_ == 3:
                    self.state = 301
                    _la = self._input.LA(1)
                    if not (((_la) & ~0x3F) == 0 and ((1 << _la) & 4368) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass

                pass

            elif la_ == 2:
                localctx = HogQLParser.JoinOpLeftRightContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 37, self._ctx)
                if la_ == 1:
                    self.state = 305
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3F) == 0 and ((1 << _la) & 4496) != 0 or _la == 146:
                        self.state = 304
                        _la = self._input.LA(1)
                        if not (((_la) & ~0x3F) == 0 and ((1 << _la) & 4496) != 0 or _la == 146):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    self.state = 307
                    _la = self._input.LA(1)
                    if not (_la == 95 or _la == 139):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 309
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 122:
                        self.state = 308
                        self.match(HogQLParser.OUTER)

                    pass

                elif la_ == 2:
                    self.state = 311
                    _la = self._input.LA(1)
                    if not (_la == 95 or _la == 139):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 122:
                        self.state = 312
                        self.match(HogQLParser.OUTER)

                    self.state = 316
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3F) == 0 and ((1 << _la) & 4496) != 0 or _la == 146:
                        self.state = 315
                        _la = self._input.LA(1)
                        if not (((_la) & ~0x3F) == 0 and ((1 << _la) & 4496) != 0 or _la == 146):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    pass

                pass

            elif la_ == 3:
                localctx = HogQLParser.JoinOpFullContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 334
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 42, self._ctx)
                if la_ == 1:
                    self.state = 321
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 4 or _la == 8:
                        self.state = 320
                        _la = self._input.LA(1)
                        if not (_la == 4 or _la == 8):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    self.state = 323
                    self.match(HogQLParser.FULL)
                    self.state = 325
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 122:
                        self.state = 324
                        self.match(HogQLParser.OUTER)

                    pass

                elif la_ == 2:
                    self.state = 327
                    self.match(HogQLParser.FULL)
                    self.state = 329
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 122:
                        self.state = 328
                        self.match(HogQLParser.OUTER)

                    self.state = 332
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == 4 or _la == 8:
                        self.state = 331
                        _la = self._input.LA(1)
                        if not (_la == 4 or _la == 8):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    pass

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinOpCrossContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def GLOBAL(self):
            return self.getToken(HogQLParser.GLOBAL, 0)

        def LOCAL(self):
            return self.getToken(HogQLParser.LOCAL, 0)

        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinOpCross

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoinOpCross"):
                listener.enterJoinOpCross(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoinOpCross"):
                listener.exitJoinOpCross(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinOpCross"):
                return visitor.visitJoinOpCross(self)
            else:
                return visitor.visitChildren(self)

    def joinOpCross(self):

        localctx = HogQLParser.JoinOpCrossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_joinOpCross)
        self._la = 0  # Token type
        try:
            self.state = 344
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 70, 100]:
                self.enterOuterAlt(localctx, 1)
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 70 or _la == 100:
                    self.state = 338
                    _la = self._input.LA(1)
                    if not (_la == 70 or _la == 100):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                self.state = 341
                self.match(HogQLParser.CROSS)
                self.state = 342
                self.match(HogQLParser.JOIN)
                pass
            elif token in [204]:
                self.enterOuterAlt(localctx, 2)
                self.state = 343
                self.match(HogQLParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinConstraintClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext, 0)

        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_joinConstraintClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterJoinConstraintClause"):
                listener.enterJoinConstraintClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitJoinConstraintClause"):
                listener.exitJoinConstraintClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitJoinConstraintClause"):
                return visitor.visitJoinConstraintClause(self)
            else:
                return visitor.visitChildren(self)

    def joinConstraintClause(self):

        localctx = HogQLParser.JoinConstraintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_joinConstraintClause)
        try:
            self.state = 355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 46, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 346
                self.match(HogQLParser.ON)
                self.state = 347
                self.columnExprList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 348
                self.match(HogQLParser.USING)
                self.state = 349
                self.match(HogQLParser.LPAREN)
                self.state = 350
                self.columnExprList()
                self.state = 351
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 353
                self.match(HogQLParser.USING)
                self.state = 354
                self.columnExprList()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SampleClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def ratioExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.RatioExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.RatioExprContext, i)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_sampleClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSampleClause"):
                listener.enterSampleClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSampleClause"):
                listener.exitSampleClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSampleClause"):
                return visitor.visitSampleClause(self)
            else:
                return visitor.visitChildren(self)

    def sampleClause(self):

        localctx = HogQLParser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(HogQLParser.SAMPLE)
            self.state = 358
            self.ratioExpr()
            self.state = 361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 47, self._ctx)
            if la_ == 1:
                self.state = 359
                self.match(HogQLParser.OFFSET)
                self.state = 360
                self.ratioExpr()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LimitExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext, i)

        def COMMA(self):
            return self.getToken(HogQLParser.COMMA, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_limitExpr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLimitExpr"):
                listener.enterLimitExpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLimitExpr"):
                listener.exitLimitExpr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLimitExpr"):
                return visitor.visitLimitExpr(self)
            else:
                return visitor.visitChildren(self)

    def limitExpr(self):

        localctx = HogQLParser.LimitExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_limitExpr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.columnExpr(0)
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 117 or _la == 204:
                self.state = 364
                _la = self._input.LA(1)
                if not (_la == 117 or _la == 204):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 365
                self.columnExpr(0)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderExprListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.OrderExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.OrderExprContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExprList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrderExprList"):
                listener.enterOrderExprList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrderExprList"):
                listener.exitOrderExprList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOrderExprList"):
                return visitor.visitOrderExprList(self)
            else:
                return visitor.visitChildren(self)

    def orderExprList(self):

        localctx = HogQLParser.OrderExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_orderExprList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.orderExpr()
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 204:
                self.state = 369
                self.match(HogQLParser.COMMA)
                self.state = 370
                self.orderExpr()
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext, 0)

        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_orderExpr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOrderExpr"):
                listener.enterOrderExpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOrderExpr"):
                listener.exitOrderExpr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOrderExpr"):
                return visitor.visitOrderExpr(self)
            else:
                return visitor.visitChildren(self)

    def orderExpr(self):

        localctx = HogQLParser.OrderExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_orderExpr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.columnExpr(0)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and ((1 << _la) & 6597069768704) != 0:
                self.state = 377
                _la = self._input.LA(1)
                if not (((_la) & ~0x3F) == 0 and ((1 << _la) & 6597069768704) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 116:
                self.state = 380
                self.match(HogQLParser.NULLS)
                self.state = 381
                _la = self._input.LA(1)
                if not (_la == 61 or _la == 92):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 25:
                self.state = 384
                self.match(HogQLParser.COLLATE)
                self.state = 385
                self.match(HogQLParser.STRING_LITERAL)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RatioExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(HogQLParser.NumberLiteralContext, i)

        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_ratioExpr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRatioExpr"):
                listener.enterRatioExpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRatioExpr"):
                listener.exitRatioExpr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRatioExpr"):
                return visitor.visitRatioExpr(self)
            else:
                return visitor.visitChildren(self)

    def ratioExpr(self):

        localctx = HogQLParser.RatioExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_ratioExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.numberLiteral()
            self.state = 391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 53, self._ctx)
            if la_ == 1:
                self.state = 389
                self.match(HogQLParser.SLASH)
                self.state = 390
                self.numberLiteral()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SettingExprListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settingExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.SettingExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.SettingExprContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_settingExprList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSettingExprList"):
                listener.enterSettingExprList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSettingExprList"):
                listener.exitSettingExprList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSettingExprList"):
                return visitor.visitSettingExprList(self)
            else:
                return visitor.visitChildren(self)

    def settingExprList(self):

        localctx = HogQLParser.SettingExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_settingExprList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.settingExpr()
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 204:
                self.state = 394
                self.match(HogQLParser.COMMA)
                self.state = 395
                self.settingExpr()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SettingExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_settingExpr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSettingExpr"):
                listener.enterSettingExpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSettingExpr"):
                listener.exitSettingExpr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSettingExpr"):
                return visitor.visitSettingExpr(self)
            else:
                return visitor.visitChildren(self)

    def settingExpr(self):

        localctx = HogQLParser.SettingExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_settingExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.identifier()
            self.state = 402
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 403
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WindowExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winPartitionByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinPartitionByClauseContext, 0)

        def winOrderByClause(self):
            return self.getTypedRuleContext(HogQLParser.WinOrderByClauseContext, 0)

        def winFrameClause(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameClauseContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_windowExpr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWindowExpr"):
                listener.enterWindowExpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWindowExpr"):
                listener.exitWindowExpr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWindowExpr"):
                return visitor.visitWindowExpr(self)
            else:
                return visitor.visitChildren(self)

    def windowExpr(self):

        localctx = HogQLParser.WindowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_windowExpr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 125:
                self.state = 405
                self.winPartitionByClause()

            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 121:
                self.state = 408
                self.winOrderByClause()

            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 132 or _la == 142:
                self.state = 411
                self.winFrameClause()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WinPartitionByClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_winPartitionByClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWinPartitionByClause"):
                listener.enterWinPartitionByClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWinPartitionByClause"):
                listener.exitWinPartitionByClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWinPartitionByClause"):
                return visitor.visitWinPartitionByClause(self)
            else:
                return visitor.visitChildren(self)

    def winPartitionByClause(self):

        localctx = HogQLParser.WinPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_winPartitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(HogQLParser.PARTITION)
            self.state = 415
            self.match(HogQLParser.BY)
            self.state = 416
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WinOrderByClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(HogQLParser.OrderExprListContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_winOrderByClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWinOrderByClause"):
                listener.enterWinOrderByClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWinOrderByClause"):
                listener.exitWinOrderByClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWinOrderByClause"):
                return visitor.visitWinOrderByClause(self)
            else:
                return visitor.visitChildren(self)

    def winOrderByClause(self):

        localctx = HogQLParser.WinOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_winOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(HogQLParser.ORDER)
            self.state = 419
            self.match(HogQLParser.BY)
            self.state = 420
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WinFrameClauseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winFrameExtend(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameExtendContext, 0)

        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWinFrameClause"):
                listener.enterWinFrameClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWinFrameClause"):
                listener.exitWinFrameClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWinFrameClause"):
                return visitor.visitWinFrameClause(self)
            else:
                return visitor.visitChildren(self)

    def winFrameClause(self):

        localctx = HogQLParser.WinFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_winFrameClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            _la = self._input.LA(1)
            if not (_la == 132 or _la == 142):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 423
            self.winFrameExtend()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WinFrameExtendContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameExtend

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class FrameStartContext(WinFrameExtendContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def winFrameBound(self):
            return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFrameStart"):
                listener.enterFrameStart(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFrameStart"):
                listener.exitFrameStart(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFrameStart"):
                return visitor.visitFrameStart(self)
            else:
                return visitor.visitChildren(self)

    class FrameBetweenContext(WinFrameExtendContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)

        def winFrameBound(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.WinFrameBoundContext)
            else:
                return self.getTypedRuleContext(HogQLParser.WinFrameBoundContext, i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFrameBetween"):
                listener.enterFrameBetween(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFrameBetween"):
                listener.exitFrameBetween(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFrameBetween"):
                return visitor.visitFrameBetween(self)
            else:
                return visitor.visitChildren(self)

    def winFrameExtend(self):

        localctx = HogQLParser.WinFrameExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_winFrameExtend)
        try:
            self.state = 431
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32, 81, 112, 174, 193, 194, 195, 196, 206, 208, 220]:
                localctx = HogQLParser.FrameStartContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 425
                self.winFrameBound()
                pass
            elif token in [16]:
                localctx = HogQLParser.FrameBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 426
                self.match(HogQLParser.BETWEEN)
                self.state = 427
                self.winFrameBound()
                self.state = 428
                self.match(HogQLParser.AND)
                self.state = 429
                self.winFrameBound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WinFrameBoundContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_winFrameBound

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWinFrameBound"):
                listener.enterWinFrameBound(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWinFrameBound"):
                listener.exitWinFrameBound(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWinFrameBound"):
                return visitor.visitWinFrameBound(self)
            else:
                return visitor.visitChildren(self)

    def winFrameBound(self):

        localctx = HogQLParser.WinFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_winFrameBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 59, self._ctx)
            if la_ == 1:
                self.state = 433
                self.match(HogQLParser.CURRENT)
                self.state = 434
                self.match(HogQLParser.ROW)
                pass

            elif la_ == 2:
                self.state = 435
                self.match(HogQLParser.UNBOUNDED)
                self.state = 436
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 3:
                self.state = 437
                self.match(HogQLParser.UNBOUNDED)
                self.state = 438
                self.match(HogQLParser.FOLLOWING)
                pass

            elif la_ == 4:
                self.state = 439
                self.numberLiteral()
                self.state = 440
                self.match(HogQLParser.PRECEDING)
                pass

            elif la_ == 5:
                self.state = 442
                self.numberLiteral()
                self.state = 443
                self.match(HogQLParser.FOLLOWING)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnTypeExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return HogQLParser.RULE_columnTypeExpr

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ColumnTypeExprNestedContext(ColumnTypeExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext, i)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnTypeExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext, i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnTypeExprNested"):
                listener.enterColumnTypeExprNested(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnTypeExprNested"):
                listener.exitColumnTypeExprNested(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnTypeExprNested"):
                return visitor.visitColumnTypeExprNested(self)
            else:
                return visitor.visitChildren(self)

    class ColumnTypeExprParamContext(ColumnTypeExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnTypeExprParam"):
                listener.enterColumnTypeExprParam(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnTypeExprParam"):
                listener.exitColumnTypeExprParam(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnTypeExprParam"):
                return visitor.visitColumnTypeExprParam(self)
            else:
                return visitor.visitChildren(self)

    class ColumnTypeExprSimpleContext(ColumnTypeExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnTypeExprSimple"):
                listener.enterColumnTypeExprSimple(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnTypeExprSimple"):
                listener.exitColumnTypeExprSimple(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnTypeExprSimple"):
                return visitor.visitColumnTypeExprSimple(self)
            else:
                return visitor.visitChildren(self)

    class ColumnTypeExprComplexContext(ColumnTypeExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnTypeExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext, i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnTypeExprComplex"):
                listener.enterColumnTypeExprComplex(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnTypeExprComplex"):
                listener.exitColumnTypeExprComplex(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnTypeExprComplex"):
                return visitor.visitColumnTypeExprComplex(self)
            else:
                return visitor.visitChildren(self)

    class ColumnTypeExprEnumContext(ColumnTypeExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def enumValue(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(HogQLParser.EnumValueContext, i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnTypeExprEnum"):
                listener.enterColumnTypeExprEnum(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnTypeExprEnum"):
                listener.exitColumnTypeExprEnum(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnTypeExprEnum"):
                return visitor.visitColumnTypeExprEnum(self)
            else:
                return visitor.visitChildren(self)

    def columnTypeExpr(self):

        localctx = HogQLParser.ColumnTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_columnTypeExpr)
        self._la = 0  # Token type
        try:
            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 64, self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnTypeExprSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 447
                self.identifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnTypeExprNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 448
                self.identifier()
                self.state = 449
                self.match(HogQLParser.LPAREN)
                self.state = 450
                self.identifier()
                self.state = 451
                self.columnTypeExpr()
                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 204:
                    self.state = 452
                    self.match(HogQLParser.COMMA)
                    self.state = 453
                    self.identifier()
                    self.state = 454
                    self.columnTypeExpr()
                    self.state = 460
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 461
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnTypeExprEnumContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 463
                self.identifier()
                self.state = 464
                self.match(HogQLParser.LPAREN)
                self.state = 465
                self.enumValue()
                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 204:
                    self.state = 466
                    self.match(HogQLParser.COMMA)
                    self.state = 467
                    self.enumValue()
                    self.state = 472
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 473
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnTypeExprComplexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 475
                self.identifier()
                self.state = 476
                self.match(HogQLParser.LPAREN)
                self.state = 477
                self.columnTypeExpr()
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 204:
                    self.state = 478
                    self.match(HogQLParser.COMMA)
                    self.state = 479
                    self.columnTypeExpr()
                    self.state = 484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 485
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnTypeExprParamContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 487
                self.identifier()
                self.state = 488
                self.match(HogQLParser.LPAREN)
                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and ((1 << _la) & -4) != 0
                    or (((_la - 64)) & ~0x3F) == 0
                    and ((1 << (_la - 64)) & -1) != 0
                    or (((_la - 128)) & ~0x3F) == 0
                    and ((1 << (_la - 128)) & -5) != 0
                    or (((_la - 192)) & ~0x3F) == 0
                    and ((1 << (_la - 192)) & 289489247) != 0
                ):
                    self.state = 489
                    self.columnExprList()

                self.state = 492
                self.match(HogQLParser.RPAREN)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnExprListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnsExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnsExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnsExprContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnExprList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprList"):
                listener.enterColumnExprList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprList"):
                listener.exitColumnExprList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprList"):
                return visitor.visitColumnExprList(self)
            else:
                return visitor.visitChildren(self)

    def columnExprList(self):

        localctx = HogQLParser.ColumnExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_columnExprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.columnsExpr()
            self.state = 501
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 65, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 497
                    self.match(HogQLParser.COMMA)
                    self.state = 498
                    self.columnsExpr()
                self.state = 503
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 65, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnsExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return HogQLParser.RULE_columnsExpr

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ColumnsExprColumnContext(ColumnsExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnsExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnsExprColumn"):
                listener.enterColumnsExprColumn(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnsExprColumn"):
                listener.exitColumnsExprColumn(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnsExprColumn"):
                return visitor.visitColumnsExprColumn(self)
            else:
                return visitor.visitChildren(self)

    class ColumnsExprAsteriskContext(ColumnsExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnsExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnsExprAsterisk"):
                listener.enterColumnsExprAsterisk(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnsExprAsterisk"):
                listener.exitColumnsExprAsterisk(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnsExprAsterisk"):
                return visitor.visitColumnsExprAsterisk(self)
            else:
                return visitor.visitChildren(self)

    class ColumnsExprSubqueryContext(ColumnsExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnsExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnsExprSubquery"):
                listener.enterColumnsExprSubquery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnsExprSubquery"):
                listener.exitColumnsExprSubquery(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnsExprSubquery"):
                return visitor.visitColumnsExprSubquery(self)
            else:
                return visitor.visitChildren(self)

    def columnsExpr(self):

        localctx = HogQLParser.ColumnsExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_columnsExpr)
        self._la = 0  # Token type
        try:
            self.state = 515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 67, self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnsExprAsteriskContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (((_la - 2)) & ~0x3F) == 0
                    and ((1 << (_la - 2)) & -1) != 0
                    or (((_la - 66)) & ~0x3F) == 0
                    and ((1 << (_la - 66)) & -633318697631745) != 0
                    or (((_la - 131)) & ~0x3F) == 0
                    and ((1 << (_la - 131)) & 4611686018427387903) != 0
                ):
                    self.state = 504
                    self.tableIdentifier()
                    self.state = 505
                    self.match(HogQLParser.DOT)

                self.state = 509
                self.match(HogQLParser.ASTERISK)
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnsExprSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 510
                self.match(HogQLParser.LPAREN)
                self.state = 511
                self.selectUnionStmt()
                self.state = 512
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnsExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 514
                self.columnExpr(0)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return HogQLParser.RULE_columnExpr

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class ColumnExprTernaryOpContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext, i)

        def QUERY(self):
            return self.getToken(HogQLParser.QUERY, 0)

        def COLON(self):
            return self.getToken(HogQLParser.COLON, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprTernaryOp"):
                listener.enterColumnExprTernaryOp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprTernaryOp"):
                listener.exitColumnExprTernaryOp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprTernaryOp"):
                return visitor.visitColumnExprTernaryOp(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprAliasContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext, 0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext, 0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprAlias"):
                listener.enterColumnExprAlias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprAlias"):
                listener.exitColumnExprAlias(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprAlias"):
                return visitor.visitColumnExprAlias(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprExtractContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext, 0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprExtract"):
                listener.enterColumnExprExtract(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprExtract"):
                listener.exitColumnExprExtract(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprExtract"):
                return visitor.visitColumnExprExtract(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprNegateContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprNegate"):
                listener.enterColumnExprNegate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprNegate"):
                listener.exitColumnExprNegate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprNegate"):
                return visitor.visitColumnExprNegate(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprSubqueryContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprSubquery"):
                listener.enterColumnExprSubquery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprSubquery"):
                listener.exitColumnExprSubquery(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprSubquery"):
                return visitor.visitColumnExprSubquery(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprLiteralContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprLiteral"):
                listener.enterColumnExprLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprLiteral"):
                listener.exitColumnExprLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprLiteral"):
                return visitor.visitColumnExprLiteral(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprArrayContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprArray"):
                listener.enterColumnExprArray(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprArray"):
                listener.exitColumnExprArray(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprArray"):
                return visitor.visitColumnExprArray(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprSubstringContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext, i)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprSubstring"):
                listener.enterColumnExprSubstring(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprSubstring"):
                listener.exitColumnExprSubstring(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprSubstring"):
                return visitor.visitColumnExprSubstring(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprCastContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext, 0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def columnTypeExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnTypeExprContext, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprCast"):
                listener.enterColumnExprCast(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprCast"):
                listener.exitColumnExprCast(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprCast"):
                return visitor.visitColumnExprCast(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprOrContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext, i)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprOr"):
                listener.enterColumnExprOr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprOr"):
                listener.exitColumnExprOr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprOr"):
                return visitor.visitColumnExprOr(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprPrecedence1Context(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None  # ColumnExprContext
            self.operator = None  # Token
            self.right = None  # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext, i)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(HogQLParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(HogQLParser.PERCENT, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprPrecedence1"):
                listener.enterColumnExprPrecedence1(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprPrecedence1"):
                listener.exitColumnExprPrecedence1(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprPrecedence1"):
                return visitor.visitColumnExprPrecedence1(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprPrecedence2Context(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None  # ColumnExprContext
            self.operator = None  # Token
            self.right = None  # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext, i)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)

        def CONCAT(self):
            return self.getToken(HogQLParser.CONCAT, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprPrecedence2"):
                listener.enterColumnExprPrecedence2(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprPrecedence2"):
                listener.exitColumnExprPrecedence2(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprPrecedence2"):
                return visitor.visitColumnExprPrecedence2(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprPrecedence3Context(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.left = None  # ColumnExprContext
            self.operator = None  # Token
            self.right = None  # ColumnExprContext
            self.copyFrom(ctx)

        def columnExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext, i)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)

        def EQ_DOUBLE(self):
            return self.getToken(HogQLParser.EQ_DOUBLE, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def NOT_EQ(self):
            return self.getToken(HogQLParser.NOT_EQ, 0)

        def LE(self):
            return self.getToken(HogQLParser.LE, 0)

        def GE(self):
            return self.getToken(HogQLParser.GE, 0)

        def LT(self):
            return self.getToken(HogQLParser.LT, 0)

        def GT(self):
            return self.getToken(HogQLParser.GT, 0)

        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)

        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def GLOBAL(self):
            return self.getToken(HogQLParser.GLOBAL, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprPrecedence3"):
                listener.enterColumnExprPrecedence3(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprPrecedence3"):
                listener.exitColumnExprPrecedence3(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprPrecedence3"):
                return visitor.visitColumnExprPrecedence3(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprIntervalContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext, 0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprInterval"):
                listener.enterColumnExprInterval(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprInterval"):
                listener.exitColumnExprInterval(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprInterval"):
                return visitor.visitColumnExprInterval(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprIsNullContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext, 0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)

        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprIsNull"):
                listener.enterColumnExprIsNull(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprIsNull"):
                listener.exitColumnExprIsNull(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprIsNull"):
                return visitor.visitColumnExprIsNull(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprWinFunctionTargetContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext, i)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprWinFunctionTarget"):
                listener.enterColumnExprWinFunctionTarget(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprWinFunctionTarget"):
                listener.exitColumnExprWinFunctionTarget(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprWinFunctionTarget"):
                return visitor.visitColumnExprWinFunctionTarget(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprTrimContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)

        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprTrim"):
                listener.enterColumnExprTrim(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprTrim"):
                listener.exitColumnExprTrim(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprTrim"):
                return visitor.visitColumnExprTrim(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprTupleContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprTuple"):
                listener.enterColumnExprTuple(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprTuple"):
                listener.exitColumnExprTuple(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprTuple"):
                return visitor.visitColumnExprTuple(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprArrayAccessContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext, i)

        def LBRACKET(self):
            return self.getToken(HogQLParser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(HogQLParser.RBRACKET, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprArrayAccess"):
                listener.enterColumnExprArrayAccess(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprArrayAccess"):
                listener.exitColumnExprArrayAccess(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprArrayAccess"):
                return visitor.visitColumnExprArrayAccess(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprBetweenContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext, i)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprBetween"):
                listener.enterColumnExprBetween(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprBetween"):
                listener.exitColumnExprBetween(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprBetween"):
                return visitor.visitColumnExprBetween(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprParensContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprParens"):
                listener.enterColumnExprParens(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprParens"):
                listener.exitColumnExprParens(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprParens"):
                return visitor.visitColumnExprParens(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprTimestampContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprTimestamp"):
                listener.enterColumnExprTimestamp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprTimestamp"):
                listener.exitColumnExprTimestamp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprTimestamp"):
                return visitor.visitColumnExprTimestamp(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprAndContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext, i)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprAnd"):
                listener.enterColumnExprAnd(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprAnd"):
                listener.exitColumnExprAnd(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprAnd"):
                return visitor.visitColumnExprAnd(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprTupleAccessContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprTupleAccess"):
                listener.enterColumnExprTupleAccess(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprTupleAccess"):
                listener.exitColumnExprTupleAccess(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprTupleAccess"):
                return visitor.visitColumnExprTupleAccess(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprCaseContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.caseExpr = None  # ColumnExprContext
            self.whenExpr = None  # ColumnExprContext
            self.thenExpr = None  # ColumnExprContext
            self.elseExpr = None  # ColumnExprContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)

        def END(self):
            return self.getToken(HogQLParser.END, 0)

        def WHEN(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.WHEN)
            else:
                return self.getToken(HogQLParser.WHEN, i)

        def THEN(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.THEN)
            else:
                return self.getToken(HogQLParser.THEN, i)

        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def columnExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnExprContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprCase"):
                listener.enterColumnExprCase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprCase"):
                listener.exitColumnExprCase(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprCase"):
                return visitor.visitColumnExprCase(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprDateContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprDate"):
                listener.enterColumnExprDate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprDate"):
                listener.exitColumnExprDate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprDate"):
                return visitor.visitColumnExprDate(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprNotContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprNot"):
                listener.enterColumnExprNot(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprNot"):
                listener.exitColumnExprNot(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprNot"):
                return visitor.visitColumnExprNot(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprWinFunctionContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext, 0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)

        def LPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)

        def windowExpr(self):
            return self.getTypedRuleContext(HogQLParser.WindowExprContext, 0)

        def RPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprWinFunction"):
                listener.enterColumnExprWinFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprWinFunction"):
                listener.exitColumnExprWinFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprWinFunction"):
                return visitor.visitColumnExprWinFunction(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprIdentifierContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.ColumnIdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprIdentifier"):
                listener.enterColumnExprIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprIdentifier"):
                listener.exitColumnExprIdentifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprIdentifier"):
                return visitor.visitColumnExprIdentifier(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprFunctionContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext, 0)

        def LPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.LPAREN)
            else:
                return self.getToken(HogQLParser.LPAREN, i)

        def RPAREN(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.RPAREN)
            else:
                return self.getToken(HogQLParser.RPAREN, i)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def columnArgList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnArgListContext, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprFunction"):
                listener.enterColumnExprFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprFunction"):
                listener.exitColumnExprFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprFunction"):
                return visitor.visitColumnExprFunction(self)
            else:
                return visitor.visitChildren(self)

    class ColumnExprAsteriskContext(ColumnExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(HogQLParser.ASTERISK, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnExprAsterisk"):
                listener.enterColumnExprAsterisk(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnExprAsterisk"):
                listener.exitColumnExprAsterisk(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnExprAsterisk"):
                return visitor.visitColumnExprAsterisk(self)
            else:
                return visitor.visitChildren(self)

    def columnExpr(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.ColumnExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_columnExpr, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 80, self._ctx)
            if la_ == 1:
                localctx = HogQLParser.ColumnExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 518
                self.match(HogQLParser.CASE)
                self.state = 520
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 68, self._ctx)
                if la_ == 1:
                    self.state = 519
                    localctx.caseExpr = self.columnExpr(0)

                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 522
                    self.match(HogQLParser.WHEN)
                    self.state = 523
                    localctx.whenExpr = self.columnExpr(0)
                    self.state = 524
                    self.match(HogQLParser.THEN)
                    self.state = 525
                    localctx.thenExpr = self.columnExpr(0)
                    self.state = 529
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la == 185):
                        break

                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 51:
                    self.state = 531
                    self.match(HogQLParser.ELSE)
                    self.state = 532
                    localctx.elseExpr = self.columnExpr(0)

                self.state = 535
                self.match(HogQLParser.END)
                pass

            elif la_ == 2:
                localctx = HogQLParser.ColumnExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 537
                self.match(HogQLParser.CAST)
                self.state = 538
                self.match(HogQLParser.LPAREN)
                self.state = 539
                self.columnExpr(0)
                self.state = 540
                self.match(HogQLParser.AS)
                self.state = 541
                self.columnTypeExpr()
                self.state = 542
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = HogQLParser.ColumnExprDateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 544
                self.match(HogQLParser.DATE)
                self.state = 545
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                localctx = HogQLParser.ColumnExprExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 546
                self.match(HogQLParser.EXTRACT)
                self.state = 547
                self.match(HogQLParser.LPAREN)
                self.state = 548
                self.interval()
                self.state = 549
                self.match(HogQLParser.FROM)
                self.state = 550
                self.columnExpr(0)
                self.state = 551
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = HogQLParser.ColumnExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 553
                self.match(HogQLParser.INTERVAL)
                self.state = 554
                self.columnExpr(0)
                self.state = 555
                self.interval()
                pass

            elif la_ == 6:
                localctx = HogQLParser.ColumnExprSubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 557
                self.match(HogQLParser.SUBSTRING)
                self.state = 558
                self.match(HogQLParser.LPAREN)
                self.state = 559
                self.columnExpr(0)
                self.state = 560
                self.match(HogQLParser.FROM)
                self.state = 561
                self.columnExpr(0)
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 64:
                    self.state = 562
                    self.match(HogQLParser.FOR)
                    self.state = 563
                    self.columnExpr(0)

                self.state = 566
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 7:
                localctx = HogQLParser.ColumnExprTimestampContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 568
                self.match(HogQLParser.TIMESTAMP)
                self.state = 569
                self.match(HogQLParser.STRING_LITERAL)
                pass

            elif la_ == 8:
                localctx = HogQLParser.ColumnExprTrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 570
                self.match(HogQLParser.TRIM)
                self.state = 571
                self.match(HogQLParser.LPAREN)
                self.state = 572
                _la = self._input.LA(1)
                if not (_la == 17 or _la == 94 or _la == 169):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 573
                self.match(HogQLParser.STRING_LITERAL)
                self.state = 574
                self.match(HogQLParser.FROM)
                self.state = 575
                self.columnExpr(0)
                self.state = 576
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 9:
                localctx = HogQLParser.ColumnExprWinFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 578
                self.identifier()

                self.state = 579
                self.match(HogQLParser.LPAREN)
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and ((1 << _la) & -4) != 0
                    or (((_la - 64)) & ~0x3F) == 0
                    and ((1 << (_la - 64)) & -1) != 0
                    or (((_la - 128)) & ~0x3F) == 0
                    and ((1 << (_la - 128)) & -5) != 0
                    or (((_la - 192)) & ~0x3F) == 0
                    and ((1 << (_la - 192)) & 289489247) != 0
                ):
                    self.state = 580
                    self.columnExprList()

                self.state = 583
                self.match(HogQLParser.RPAREN)
                self.state = 585
                self.match(HogQLParser.OVER)
                self.state = 586
                self.match(HogQLParser.LPAREN)
                self.state = 587
                self.windowExpr()
                self.state = 588
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 10:
                localctx = HogQLParser.ColumnExprWinFunctionTargetContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 590
                self.identifier()

                self.state = 591
                self.match(HogQLParser.LPAREN)
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and ((1 << _la) & -4) != 0
                    or (((_la - 64)) & ~0x3F) == 0
                    and ((1 << (_la - 64)) & -1) != 0
                    or (((_la - 128)) & ~0x3F) == 0
                    and ((1 << (_la - 128)) & -5) != 0
                    or (((_la - 192)) & ~0x3F) == 0
                    and ((1 << (_la - 192)) & 289489247) != 0
                ):
                    self.state = 592
                    self.columnExprList()

                self.state = 595
                self.match(HogQLParser.RPAREN)
                self.state = 597
                self.match(HogQLParser.OVER)
                self.state = 598
                self.identifier()
                pass

            elif la_ == 11:
                localctx = HogQLParser.ColumnExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 600
                self.identifier()
                self.state = 606
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 75, self._ctx)
                if la_ == 1:
                    self.state = 601
                    self.match(HogQLParser.LPAREN)
                    self.state = 603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (
                        ((_la) & ~0x3F) == 0
                        and ((1 << _la) & -4) != 0
                        or (((_la - 64)) & ~0x3F) == 0
                        and ((1 << (_la - 64)) & -1) != 0
                        or (((_la - 128)) & ~0x3F) == 0
                        and ((1 << (_la - 128)) & -5) != 0
                        or (((_la - 192)) & ~0x3F) == 0
                        and ((1 << (_la - 192)) & 289489247) != 0
                    ):
                        self.state = 602
                        self.columnExprList()

                    self.state = 605
                    self.match(HogQLParser.RPAREN)

                self.state = 608
                self.match(HogQLParser.LPAREN)
                self.state = 610
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 76, self._ctx)
                if la_ == 1:
                    self.state = 609
                    self.match(HogQLParser.DISTINCT)

                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and ((1 << _la) & -4) != 0
                    or (((_la - 64)) & ~0x3F) == 0
                    and ((1 << (_la - 64)) & -1) != 0
                    or (((_la - 128)) & ~0x3F) == 0
                    and ((1 << (_la - 128)) & -5) != 0
                    or (((_la - 192)) & ~0x3F) == 0
                    and ((1 << (_la - 192)) & 289489247) != 0
                ):
                    self.state = 612
                    self.columnArgList()

                self.state = 615
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 12:
                localctx = HogQLParser.ColumnExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 617
                self.literal()
                pass

            elif la_ == 13:
                localctx = HogQLParser.ColumnExprNegateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 618
                self.match(HogQLParser.DASH)
                self.state = 619
                self.columnExpr(17)
                pass

            elif la_ == 14:
                localctx = HogQLParser.ColumnExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 620
                self.match(HogQLParser.NOT)
                self.state = 621
                self.columnExpr(12)
                pass

            elif la_ == 15:
                localctx = HogQLParser.ColumnExprAsteriskContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (((_la - 2)) & ~0x3F) == 0
                    and ((1 << (_la - 2)) & -1) != 0
                    or (((_la - 66)) & ~0x3F) == 0
                    and ((1 << (_la - 66)) & -633318697631745) != 0
                    or (((_la - 131)) & ~0x3F) == 0
                    and ((1 << (_la - 131)) & 4611686018427387903) != 0
                ):
                    self.state = 622
                    self.tableIdentifier()
                    self.state = 623
                    self.match(HogQLParser.DOT)

                self.state = 627
                self.match(HogQLParser.ASTERISK)
                pass

            elif la_ == 16:
                localctx = HogQLParser.ColumnExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 628
                self.match(HogQLParser.LPAREN)
                self.state = 629
                self.selectUnionStmt()
                self.state = 630
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 17:
                localctx = HogQLParser.ColumnExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 632
                self.match(HogQLParser.LPAREN)
                self.state = 633
                self.columnExpr(0)
                self.state = 634
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 18:
                localctx = HogQLParser.ColumnExprTupleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 636
                self.match(HogQLParser.LPAREN)
                self.state = 637
                self.columnExprList()
                self.state = 638
                self.match(HogQLParser.RPAREN)
                pass

            elif la_ == 19:
                localctx = HogQLParser.ColumnExprArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 640
                self.match(HogQLParser.LBRACKET)
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and ((1 << _la) & -4) != 0
                    or (((_la - 64)) & ~0x3F) == 0
                    and ((1 << (_la - 64)) & -1) != 0
                    or (((_la - 128)) & ~0x3F) == 0
                    and ((1 << (_la - 128)) & -5) != 0
                    or (((_la - 192)) & ~0x3F) == 0
                    and ((1 << (_la - 192)) & 289489247) != 0
                ):
                    self.state = 641
                    self.columnExprList()

                self.state = 644
                self.match(HogQLParser.RBRACKET)
                pass

            elif la_ == 20:
                localctx = HogQLParser.ColumnExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 645
                self.columnIdentifier()
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 729
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 91, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 727
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 90, self._ctx)
                    if la_ == 1:
                        localctx = HogQLParser.ColumnExprPrecedence1Context(
                            self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState)
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 648
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 652
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [200]:
                            self.state = 649
                            localctx.operator = self.match(HogQLParser.ASTERISK)
                            pass
                        elif token in [228]:
                            self.state = 650
                            localctx.operator = self.match(HogQLParser.SLASH)
                            pass
                        elif token in [219]:
                            self.state = 651
                            localctx.operator = self.match(HogQLParser.PERCENT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 654
                        localctx.right = self.columnExpr(17)
                        pass

                    elif la_ == 2:
                        localctx = HogQLParser.ColumnExprPrecedence2Context(
                            self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState)
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 655
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 659
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [220]:
                            self.state = 656
                            localctx.operator = self.match(HogQLParser.PLUS)
                            pass
                        elif token in [206]:
                            self.state = 657
                            localctx.operator = self.match(HogQLParser.DASH)
                            pass
                        elif token in [205]:
                            self.state = 658
                            localctx.operator = self.match(HogQLParser.CONCAT)
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 661
                        localctx.right = self.columnExpr(16)
                        pass

                    elif la_ == 3:
                        localctx = HogQLParser.ColumnExprPrecedence3Context(
                            self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState)
                        )
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 662
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 681
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 86, self._ctx)
                        if la_ == 1:
                            self.state = 663
                            localctx.operator = self.match(HogQLParser.EQ_DOUBLE)
                            pass

                        elif la_ == 2:
                            self.state = 664
                            localctx.operator = self.match(HogQLParser.EQ_SINGLE)
                            pass

                        elif la_ == 3:
                            self.state = 665
                            localctx.operator = self.match(HogQLParser.NOT_EQ)
                            pass

                        elif la_ == 4:
                            self.state = 666
                            localctx.operator = self.match(HogQLParser.LE)
                            pass

                        elif la_ == 5:
                            self.state = 667
                            localctx.operator = self.match(HogQLParser.GE)
                            pass

                        elif la_ == 6:
                            self.state = 668
                            localctx.operator = self.match(HogQLParser.LT)
                            pass

                        elif la_ == 7:
                            self.state = 669
                            localctx.operator = self.match(HogQLParser.GT)
                            pass

                        elif la_ == 8:
                            self.state = 671
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == 70:
                                self.state = 670
                                localctx.operator = self.match(HogQLParser.GLOBAL)

                            self.state = 674
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == 114:
                                self.state = 673
                                self.match(HogQLParser.NOT)

                            self.state = 676
                            self.match(HogQLParser.IN)
                            pass

                        elif la_ == 9:
                            self.state = 678
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la == 114:
                                self.state = 677
                                localctx.operator = self.match(HogQLParser.NOT)

                            self.state = 680
                            _la = self._input.LA(1)
                            if not (_la == 78 or _la == 97):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass

                        self.state = 683
                        localctx.right = self.columnExpr(15)
                        pass

                    elif la_ == 4:
                        localctx = HogQLParser.ColumnExprAndContext(
                            self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState)
                        )
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 684
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 685
                        self.match(HogQLParser.AND)
                        self.state = 686
                        self.columnExpr(12)
                        pass

                    elif la_ == 5:
                        localctx = HogQLParser.ColumnExprOrContext(
                            self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState)
                        )
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 687
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 688
                        self.match(HogQLParser.OR)
                        self.state = 689
                        self.columnExpr(11)
                        pass

                    elif la_ == 6:
                        localctx = HogQLParser.ColumnExprBetweenContext(
                            self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState)
                        )
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 690
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 692
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 114:
                            self.state = 691
                            self.match(HogQLParser.NOT)

                        self.state = 694
                        self.match(HogQLParser.BETWEEN)
                        self.state = 695
                        self.columnExpr(0)
                        self.state = 696
                        self.match(HogQLParser.AND)
                        self.state = 697
                        self.columnExpr(10)
                        pass

                    elif la_ == 7:
                        localctx = HogQLParser.ColumnExprTernaryOpContext(
                            self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState)
                        )
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 699
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 700
                        self.match(HogQLParser.QUERY)
                        self.state = 701
                        self.columnExpr(0)
                        self.state = 702
                        self.match(HogQLParser.COLON)
                        self.state = 703
                        self.columnExpr(8)
                        pass

                    elif la_ == 8:
                        localctx = HogQLParser.ColumnExprArrayAccessContext(
                            self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState)
                        )
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 705
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 706
                        self.match(HogQLParser.LBRACKET)
                        self.state = 707
                        self.columnExpr(0)
                        self.state = 708
                        self.match(HogQLParser.RBRACKET)
                        pass

                    elif la_ == 9:
                        localctx = HogQLParser.ColumnExprTupleAccessContext(
                            self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState)
                        )
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 710
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 711
                        self.match(HogQLParser.DOT)
                        self.state = 712
                        self.match(HogQLParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 10:
                        localctx = HogQLParser.ColumnExprIsNullContext(
                            self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState)
                        )
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 713
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 714
                        self.match(HogQLParser.IS)
                        self.state = 716
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la == 114:
                            self.state = 715
                            self.match(HogQLParser.NOT)

                        self.state = 718
                        self.match(HogQLParser.NULL_SQL)
                        pass

                    elif la_ == 11:
                        localctx = HogQLParser.ColumnExprAliasContext(
                            self, HogQLParser.ColumnExprContext(self, _parentctx, _parentState)
                        )
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 719
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 725
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 89, self._ctx)
                        if la_ == 1:
                            self.state = 720
                            self.alias()
                            pass

                        elif la_ == 2:
                            self.state = 721
                            self.match(HogQLParser.AS)
                            self.state = 722
                            self.identifier()
                            pass

                        elif la_ == 3:
                            self.state = 723
                            self.match(HogQLParser.AS)
                            self.state = 724
                            self.match(HogQLParser.STRING_LITERAL)
                            pass

                        pass

                self.state = 731
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 91, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ColumnArgListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnArgExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.ColumnArgExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.ColumnArgExprContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnArgList"):
                listener.enterColumnArgList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnArgList"):
                listener.exitColumnArgList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnArgList"):
                return visitor.visitColumnArgList(self)
            else:
                return visitor.visitChildren(self)

    def columnArgList(self):

        localctx = HogQLParser.ColumnArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_columnArgList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.columnArgExpr()
            self.state = 737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 204:
                self.state = 733
                self.match(HogQLParser.COMMA)
                self.state = 734
                self.columnArgExpr()
                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnArgExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnLambdaExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnLambdaExprContext, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnArgExpr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnArgExpr"):
                listener.enterColumnArgExpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnArgExpr"):
                listener.exitColumnArgExpr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnArgExpr"):
                return visitor.visitColumnArgExpr(self)
            else:
                return visitor.visitChildren(self)

    def columnArgExpr(self):

        localctx = HogQLParser.ColumnArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_columnArgExpr)
        try:
            self.state = 742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 93, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 740
                self.columnLambdaExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 741
                self.columnExpr(0)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnLambdaExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(HogQLParser.ARROW, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(HogQLParser.ColumnExprContext, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext, i)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnLambdaExpr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnLambdaExpr"):
                listener.enterColumnLambdaExpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnLambdaExpr"):
                listener.exitColumnLambdaExpr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnLambdaExpr"):
                return visitor.visitColumnLambdaExpr(self)
            else:
                return visitor.visitChildren(self)

    def columnLambdaExpr(self):

        localctx = HogQLParser.ColumnLambdaExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_columnLambdaExpr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [216]:
                self.state = 744
                self.match(HogQLParser.LPAREN)
                self.state = 745
                self.identifier()
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 204:
                    self.state = 746
                    self.match(HogQLParser.COMMA)
                    self.state = 747
                    self.identifier()
                    self.state = 752
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 753
                self.match(HogQLParser.RPAREN)
                pass
            elif token in [
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                113,
                114,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
            ]:
                self.state = 755
                self.identifier()
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 204:
                    self.state = 756
                    self.match(HogQLParser.COMMA)
                    self.state = 757
                    self.identifier()
                    self.state = 762
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 765
            self.match(HogQLParser.ARROW)
            self.state = 766
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_columnIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterColumnIdentifier"):
                listener.enterColumnIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitColumnIdentifier"):
                listener.exitColumnIdentifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitColumnIdentifier"):
                return visitor.visitColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)

    def columnIdentifier(self):

        localctx = HogQLParser.ColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_columnIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 97, self._ctx)
            if la_ == 1:
                self.state = 768
                self.tableIdentifier()
                self.state = 769
                self.match(HogQLParser.DOT)

            self.state = 773
            self.nestedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestedIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(HogQLParser.IdentifierContext, i)

        def DOT(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.DOT)
            else:
                return self.getToken(HogQLParser.DOT, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_nestedIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNestedIdentifier"):
                listener.enterNestedIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNestedIdentifier"):
                listener.exitNestedIdentifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNestedIdentifier"):
                return visitor.visitNestedIdentifier(self)
            else:
                return visitor.visitChildren(self)

    def nestedIdentifier(self):

        localctx = HogQLParser.NestedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_nestedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.identifier()
            self.state = 780
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 98, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 776
                    self.match(HogQLParser.DOT)
                    self.state = 777
                    self.identifier()
                self.state = 782
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 98, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return HogQLParser.RULE_tableExpr

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class TableExprIdentifierContext(TableExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.TableIdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableExprIdentifier"):
                listener.enterTableExprIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableExprIdentifier"):
                listener.exitTableExprIdentifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTableExprIdentifier"):
                return visitor.visitTableExprIdentifier(self)
            else:
                return visitor.visitChildren(self)

    class TableExprSubqueryContext(TableExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(HogQLParser.SelectUnionStmtContext, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableExprSubquery"):
                listener.enterTableExprSubquery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableExprSubquery"):
                listener.exitTableExprSubquery(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTableExprSubquery"):
                return visitor.visitTableExprSubquery(self)
            else:
                return visitor.visitChildren(self)

    class TableExprAliasContext(TableExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableExprContext, 0)

        def alias(self):
            return self.getTypedRuleContext(HogQLParser.AliasContext, 0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableExprAlias"):
                listener.enterTableExprAlias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableExprAlias"):
                listener.exitTableExprAlias(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTableExprAlias"):
                return visitor.visitTableExprAlias(self)
            else:
                return visitor.visitChildren(self)

    class TableExprFunctionContext(TableExprContext):
        def __init__(self, parser, ctx: ParserRuleContext):  # actually a HogQLParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableExprFunction"):
                listener.enterTableExprFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableExprFunction"):
                listener.exitTableExprFunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTableExprFunction"):
                return visitor.visitTableExprFunction(self)
            else:
                return visitor.visitChildren(self)

    def tableExpr(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = HogQLParser.TableExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_tableExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 99, self._ctx)
            if la_ == 1:
                localctx = HogQLParser.TableExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 784
                self.tableIdentifier()
                pass

            elif la_ == 2:
                localctx = HogQLParser.TableExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 785
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                localctx = HogQLParser.TableExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 786
                self.match(HogQLParser.LPAREN)
                self.state = 787
                self.selectUnionStmt()
                self.state = 788
                self.match(HogQLParser.RPAREN)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 800
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 101, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = HogQLParser.TableExprAliasContext(
                        self, HogQLParser.TableExprContext(self, _parentctx, _parentState)
                    )
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableExpr)
                    self.state = 792
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 796
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [35, 61, 76, 90, 192]:
                        self.state = 793
                        self.alias()
                        pass
                    elif token in [10]:
                        self.state = 794
                        self.match(HogQLParser.AS)
                        self.state = 795
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 802
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 101, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TableFunctionExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext, 0)

        def LPAREN(self):
            return self.getToken(HogQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(HogQLParser.RPAREN, 0)

        def tableArgList(self):
            return self.getTypedRuleContext(HogQLParser.TableArgListContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableFunctionExpr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableFunctionExpr"):
                listener.enterTableFunctionExpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableFunctionExpr"):
                listener.exitTableFunctionExpr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTableFunctionExpr"):
                return visitor.visitTableFunctionExpr(self)
            else:
                return visitor.visitChildren(self)

    def tableFunctionExpr(self):

        localctx = HogQLParser.TableFunctionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_tableFunctionExpr)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.identifier()
            self.state = 804
            self.match(HogQLParser.LPAREN)
            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and ((1 << _la) & -4) != 0
                or (((_la - 64)) & ~0x3F) == 0
                and ((1 << (_la - 64)) & -1) != 0
                or (((_la - 128)) & ~0x3F) == 0
                and ((1 << (_la - 128)) & -5) != 0
                or (((_la - 192)) & ~0x3F) == 0
                and ((1 << (_la - 192)) & 268517471) != 0
            ):
                self.state = 805
                self.tableArgList()

            self.state = 808
            self.match(HogQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext, 0)

        def databaseIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.DatabaseIdentifierContext, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableIdentifier"):
                listener.enterTableIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableIdentifier"):
                listener.exitTableIdentifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTableIdentifier"):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)

    def tableIdentifier(self):

        localctx = HogQLParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 103, self._ctx)
            if la_ == 1:
                self.state = 810
                self.databaseIdentifier()
                self.state = 811
                self.match(HogQLParser.DOT)

            self.state = 815
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableArgListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableArgExpr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(HogQLParser.TableArgExprContext)
            else:
                return self.getTypedRuleContext(HogQLParser.TableArgExprContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.COMMA)
            else:
                return self.getToken(HogQLParser.COMMA, i)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableArgList"):
                listener.enterTableArgList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableArgList"):
                listener.exitTableArgList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTableArgList"):
                return visitor.visitTableArgList(self)
            else:
                return visitor.visitChildren(self)

    def tableArgList(self):

        localctx = HogQLParser.TableArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_tableArgList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.tableArgExpr()
            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 204:
                self.state = 818
                self.match(HogQLParser.COMMA)
                self.state = 819
                self.tableArgExpr()
                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableArgExprContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(HogQLParser.NestedIdentifierContext, 0)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(HogQLParser.TableFunctionExprContext, 0)

        def literal(self):
            return self.getTypedRuleContext(HogQLParser.LiteralContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_tableArgExpr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTableArgExpr"):
                listener.enterTableArgExpr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTableArgExpr"):
                listener.exitTableArgExpr(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTableArgExpr"):
                return visitor.visitTableArgExpr(self)
            else:
                return visitor.visitChildren(self)

    def tableArgExpr(self):

        localctx = HogQLParser.TableArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_tableArgExpr)
        try:
            self.state = 828
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 105, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 825
                self.nestedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 826
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 827
                self.literal()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatabaseIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_databaseIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDatabaseIdentifier"):
                listener.enterDatabaseIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDatabaseIdentifier"):
                listener.exitDatabaseIdentifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDatabaseIdentifier"):
                return visitor.visitDatabaseIdentifier(self)
            else:
                return visitor.visitChildren(self)

    def databaseIdentifier(self):

        localctx = HogQLParser.DatabaseIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_databaseIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOATING_LITERAL(self):
            return self.getToken(HogQLParser.FLOATING_LITERAL, 0)

        def DOT(self):
            return self.getToken(HogQLParser.DOT, 0)

        def DECIMAL_LITERAL(self, i: int = None):
            if i is None:
                return self.getTokens(HogQLParser.DECIMAL_LITERAL)
            else:
                return self.getToken(HogQLParser.DECIMAL_LITERAL, i)

        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_floatingLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFloatingLiteral"):
                listener.enterFloatingLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFloatingLiteral"):
                listener.exitFloatingLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFloatingLiteral"):
                return visitor.visitFloatingLiteral(self)
            else:
                return visitor.visitChildren(self)

    def floatingLiteral(self):

        localctx = HogQLParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_floatingLiteral)
        self._la = 0  # Token type
        try:
            self.state = 840
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 832
                self.match(HogQLParser.FLOATING_LITERAL)
                pass
            elif token in [208]:
                self.enterOuterAlt(localctx, 2)
                self.state = 833
                self.match(HogQLParser.DOT)
                self.state = 834
                _la = self._input.LA(1)
                if not (_la == 194 or _la == 195):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [195]:
                self.enterOuterAlt(localctx, 3)
                self.state = 835
                self.match(HogQLParser.DECIMAL_LITERAL)
                self.state = 836
                self.match(HogQLParser.DOT)
                self.state = 838
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 106, self._ctx)
                if la_ == 1:
                    self.state = 837
                    _la = self._input.LA(1)
                    if not (_la == 194 or _la == 195):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatingLiteral(self):
            return self.getTypedRuleContext(HogQLParser.FloatingLiteralContext, 0)

        def OCTAL_LITERAL(self):
            return self.getToken(HogQLParser.OCTAL_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.DECIMAL_LITERAL, 0)

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(HogQLParser.HEXADECIMAL_LITERAL, 0)

        def INF(self):
            return self.getToken(HogQLParser.INF, 0)

        def NAN_SQL(self):
            return self.getToken(HogQLParser.NAN_SQL, 0)

        def PLUS(self):
            return self.getToken(HogQLParser.PLUS, 0)

        def DASH(self):
            return self.getToken(HogQLParser.DASH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_numberLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumberLiteral"):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumberLiteral"):
                listener.exitNumberLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumberLiteral"):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)

    def numberLiteral(self):

        localctx = HogQLParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_numberLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 206 or _la == 220:
                self.state = 842
                _la = self._input.LA(1)
                if not (_la == 206 or _la == 220):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

            self.state = 851
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 109, self._ctx)
            if la_ == 1:
                self.state = 845
                self.floatingLiteral()
                pass

            elif la_ == 2:
                self.state = 846
                self.match(HogQLParser.OCTAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 847
                self.match(HogQLParser.DECIMAL_LITERAL)
                pass

            elif la_ == 4:
                self.state = 848
                self.match(HogQLParser.HEXADECIMAL_LITERAL)
                pass

            elif la_ == 5:
                self.state = 849
                self.match(HogQLParser.INF)
                pass

            elif la_ == 6:
                self.state = 850
                self.match(HogQLParser.NAN_SQL)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext, 0)

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_literal

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLiteral"):
                listener.enterLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLiteral"):
                listener.exitLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLiteral"):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)

    def literal(self):

        localctx = HogQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_literal)
        try:
            self.state = 856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [81, 112, 193, 194, 195, 196, 206, 208, 220]:
                self.enterOuterAlt(localctx, 1)
                self.state = 853
                self.numberLiteral()
                pass
            elif token in [198]:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                self.match(HogQLParser.STRING_LITERAL)
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 3)
                self.state = 855
                self.match(HogQLParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(HogQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(HogQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(HogQLParser.HOUR, 0)

        def DAY(self):
            return self.getToken(HogQLParser.DAY, 0)

        def WEEK(self):
            return self.getToken(HogQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(HogQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(HogQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(HogQLParser.YEAR, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_interval

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInterval"):
                listener.enterInterval(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInterval"):
                listener.exitInterval(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInterval"):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)

    def interval(self):

        localctx = HogQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_interval)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            _la = self._input.LA(1)
            if not (
                _la == 36
                or (((_la - 75)) & ~0x3F) == 0
                and ((1 << (_la - 75)) & 72057615512764417) != 0
                or (((_la - 144)) & ~0x3F) == 0
                and ((1 << (_la - 144)) & 36283883716609) != 0
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AFTER(self):
            return self.getToken(HogQLParser.AFTER, 0)

        def ALIAS(self):
            return self.getToken(HogQLParser.ALIAS, 0)

        def ALL(self):
            return self.getToken(HogQLParser.ALL, 0)

        def ALTER(self):
            return self.getToken(HogQLParser.ALTER, 0)

        def AND(self):
            return self.getToken(HogQLParser.AND, 0)

        def ANTI(self):
            return self.getToken(HogQLParser.ANTI, 0)

        def ANY(self):
            return self.getToken(HogQLParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(HogQLParser.ARRAY, 0)

        def AS(self):
            return self.getToken(HogQLParser.AS, 0)

        def ASCENDING(self):
            return self.getToken(HogQLParser.ASCENDING, 0)

        def ASOF(self):
            return self.getToken(HogQLParser.ASOF, 0)

        def AST(self):
            return self.getToken(HogQLParser.AST, 0)

        def ASYNC(self):
            return self.getToken(HogQLParser.ASYNC, 0)

        def ATTACH(self):
            return self.getToken(HogQLParser.ATTACH, 0)

        def BETWEEN(self):
            return self.getToken(HogQLParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(HogQLParser.BOTH, 0)

        def BY(self):
            return self.getToken(HogQLParser.BY, 0)

        def CASE(self):
            return self.getToken(HogQLParser.CASE, 0)

        def CAST(self):
            return self.getToken(HogQLParser.CAST, 0)

        def CHECK(self):
            return self.getToken(HogQLParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(HogQLParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(HogQLParser.CLUSTER, 0)

        def CODEC(self):
            return self.getToken(HogQLParser.CODEC, 0)

        def COLLATE(self):
            return self.getToken(HogQLParser.COLLATE, 0)

        def COLUMN(self):
            return self.getToken(HogQLParser.COLUMN, 0)

        def COMMENT(self):
            return self.getToken(HogQLParser.COMMENT, 0)

        def CONSTRAINT(self):
            return self.getToken(HogQLParser.CONSTRAINT, 0)

        def CREATE(self):
            return self.getToken(HogQLParser.CREATE, 0)

        def CROSS(self):
            return self.getToken(HogQLParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(HogQLParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(HogQLParser.CURRENT, 0)

        def DATABASE(self):
            return self.getToken(HogQLParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(HogQLParser.DATABASES, 0)

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def DEDUPLICATE(self):
            return self.getToken(HogQLParser.DEDUPLICATE, 0)

        def DEFAULT(self):
            return self.getToken(HogQLParser.DEFAULT, 0)

        def DELAY(self):
            return self.getToken(HogQLParser.DELAY, 0)

        def DELETE(self):
            return self.getToken(HogQLParser.DELETE, 0)

        def DESCRIBE(self):
            return self.getToken(HogQLParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(HogQLParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(HogQLParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(HogQLParser.DETACH, 0)

        def DICTIONARIES(self):
            return self.getToken(HogQLParser.DICTIONARIES, 0)

        def DICTIONARY(self):
            return self.getToken(HogQLParser.DICTIONARY, 0)

        def DISK(self):
            return self.getToken(HogQLParser.DISK, 0)

        def DISTINCT(self):
            return self.getToken(HogQLParser.DISTINCT, 0)

        def DISTRIBUTED(self):
            return self.getToken(HogQLParser.DISTRIBUTED, 0)

        def DROP(self):
            return self.getToken(HogQLParser.DROP, 0)

        def ELSE(self):
            return self.getToken(HogQLParser.ELSE, 0)

        def END(self):
            return self.getToken(HogQLParser.END, 0)

        def ENGINE(self):
            return self.getToken(HogQLParser.ENGINE, 0)

        def EVENTS(self):
            return self.getToken(HogQLParser.EVENTS, 0)

        def EXISTS(self):
            return self.getToken(HogQLParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(HogQLParser.EXPLAIN, 0)

        def EXPRESSION(self):
            return self.getToken(HogQLParser.EXPRESSION, 0)

        def EXTRACT(self):
            return self.getToken(HogQLParser.EXTRACT, 0)

        def FETCHES(self):
            return self.getToken(HogQLParser.FETCHES, 0)

        def FINAL(self):
            return self.getToken(HogQLParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def FLUSH(self):
            return self.getToken(HogQLParser.FLUSH, 0)

        def FOR(self):
            return self.getToken(HogQLParser.FOR, 0)

        def FOLLOWING(self):
            return self.getToken(HogQLParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(HogQLParser.FORMAT, 0)

        def FREEZE(self):
            return self.getToken(HogQLParser.FREEZE, 0)

        def FROM(self):
            return self.getToken(HogQLParser.FROM, 0)

        def FULL(self):
            return self.getToken(HogQLParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(HogQLParser.FUNCTION, 0)

        def GLOBAL(self):
            return self.getToken(HogQLParser.GLOBAL, 0)

        def GRANULARITY(self):
            return self.getToken(HogQLParser.GRANULARITY, 0)

        def GROUP(self):
            return self.getToken(HogQLParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(HogQLParser.HAVING, 0)

        def HIERARCHICAL(self):
            return self.getToken(HogQLParser.HIERARCHICAL, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def IF(self):
            return self.getToken(HogQLParser.IF, 0)

        def ILIKE(self):
            return self.getToken(HogQLParser.ILIKE, 0)

        def IN(self):
            return self.getToken(HogQLParser.IN, 0)

        def INDEX(self):
            return self.getToken(HogQLParser.INDEX, 0)

        def INJECTIVE(self):
            return self.getToken(HogQLParser.INJECTIVE, 0)

        def INNER(self):
            return self.getToken(HogQLParser.INNER, 0)

        def INSERT(self):
            return self.getToken(HogQLParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(HogQLParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(HogQLParser.INTO, 0)

        def IS(self):
            return self.getToken(HogQLParser.IS, 0)

        def IS_OBJECT_ID(self):
            return self.getToken(HogQLParser.IS_OBJECT_ID, 0)

        def JOIN(self):
            return self.getToken(HogQLParser.JOIN, 0)

        def JSON_FALSE(self):
            return self.getToken(HogQLParser.JSON_FALSE, 0)

        def JSON_TRUE(self):
            return self.getToken(HogQLParser.JSON_TRUE, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def KILL(self):
            return self.getToken(HogQLParser.KILL, 0)

        def LAST(self):
            return self.getToken(HogQLParser.LAST, 0)

        def LAYOUT(self):
            return self.getToken(HogQLParser.LAYOUT, 0)

        def LEADING(self):
            return self.getToken(HogQLParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(HogQLParser.LEFT, 0)

        def LIFETIME(self):
            return self.getToken(HogQLParser.LIFETIME, 0)

        def LIKE(self):
            return self.getToken(HogQLParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(HogQLParser.LIMIT, 0)

        def LIVE(self):
            return self.getToken(HogQLParser.LIVE, 0)

        def LOCAL(self):
            return self.getToken(HogQLParser.LOCAL, 0)

        def LOGS(self):
            return self.getToken(HogQLParser.LOGS, 0)

        def MATERIALIZE(self):
            return self.getToken(HogQLParser.MATERIALIZE, 0)

        def MATERIALIZED(self):
            return self.getToken(HogQLParser.MATERIALIZED, 0)

        def MAX(self):
            return self.getToken(HogQLParser.MAX, 0)

        def MERGES(self):
            return self.getToken(HogQLParser.MERGES, 0)

        def MIN(self):
            return self.getToken(HogQLParser.MIN, 0)

        def MODIFY(self):
            return self.getToken(HogQLParser.MODIFY, 0)

        def MOVE(self):
            return self.getToken(HogQLParser.MOVE, 0)

        def MUTATION(self):
            return self.getToken(HogQLParser.MUTATION, 0)

        def NO(self):
            return self.getToken(HogQLParser.NO, 0)

        def NOT(self):
            return self.getToken(HogQLParser.NOT, 0)

        def NULLS(self):
            return self.getToken(HogQLParser.NULLS, 0)

        def OFFSET(self):
            return self.getToken(HogQLParser.OFFSET, 0)

        def ON(self):
            return self.getToken(HogQLParser.ON, 0)

        def OPTIMIZE(self):
            return self.getToken(HogQLParser.OPTIMIZE, 0)

        def OR(self):
            return self.getToken(HogQLParser.OR, 0)

        def ORDER(self):
            return self.getToken(HogQLParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(HogQLParser.OUTER, 0)

        def OUTFILE(self):
            return self.getToken(HogQLParser.OUTFILE, 0)

        def OVER(self):
            return self.getToken(HogQLParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(HogQLParser.PARTITION, 0)

        def POPULATE(self):
            return self.getToken(HogQLParser.POPULATE, 0)

        def PRECEDING(self):
            return self.getToken(HogQLParser.PRECEDING, 0)

        def PREWHERE(self):
            return self.getToken(HogQLParser.PREWHERE, 0)

        def PRIMARY(self):
            return self.getToken(HogQLParser.PRIMARY, 0)

        def RANGE(self):
            return self.getToken(HogQLParser.RANGE, 0)

        def RELOAD(self):
            return self.getToken(HogQLParser.RELOAD, 0)

        def REMOVE(self):
            return self.getToken(HogQLParser.REMOVE, 0)

        def RENAME(self):
            return self.getToken(HogQLParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(HogQLParser.REPLACE, 0)

        def REPLICA(self):
            return self.getToken(HogQLParser.REPLICA, 0)

        def REPLICATED(self):
            return self.getToken(HogQLParser.REPLICATED, 0)

        def RIGHT(self):
            return self.getToken(HogQLParser.RIGHT, 0)

        def ROLLUP(self):
            return self.getToken(HogQLParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(HogQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(HogQLParser.ROWS, 0)

        def SAMPLE(self):
            return self.getToken(HogQLParser.SAMPLE, 0)

        def SELECT(self):
            return self.getToken(HogQLParser.SELECT, 0)

        def SEMI(self):
            return self.getToken(HogQLParser.SEMI, 0)

        def SENDS(self):
            return self.getToken(HogQLParser.SENDS, 0)

        def SET(self):
            return self.getToken(HogQLParser.SET, 0)

        def SETTINGS(self):
            return self.getToken(HogQLParser.SETTINGS, 0)

        def SHOW(self):
            return self.getToken(HogQLParser.SHOW, 0)

        def SOURCE(self):
            return self.getToken(HogQLParser.SOURCE, 0)

        def START(self):
            return self.getToken(HogQLParser.START, 0)

        def STOP(self):
            return self.getToken(HogQLParser.STOP, 0)

        def SUBSTRING(self):
            return self.getToken(HogQLParser.SUBSTRING, 0)

        def SYNC(self):
            return self.getToken(HogQLParser.SYNC, 0)

        def SYNTAX(self):
            return self.getToken(HogQLParser.SYNTAX, 0)

        def SYSTEM(self):
            return self.getToken(HogQLParser.SYSTEM, 0)

        def TABLE(self):
            return self.getToken(HogQLParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(HogQLParser.TABLES, 0)

        def TEMPORARY(self):
            return self.getToken(HogQLParser.TEMPORARY, 0)

        def TEST(self):
            return self.getToken(HogQLParser.TEST, 0)

        def THEN(self):
            return self.getToken(HogQLParser.THEN, 0)

        def TIES(self):
            return self.getToken(HogQLParser.TIES, 0)

        def TIMEOUT(self):
            return self.getToken(HogQLParser.TIMEOUT, 0)

        def TIMESTAMP(self):
            return self.getToken(HogQLParser.TIMESTAMP, 0)

        def TOTALS(self):
            return self.getToken(HogQLParser.TOTALS, 0)

        def TRAILING(self):
            return self.getToken(HogQLParser.TRAILING, 0)

        def TRIM(self):
            return self.getToken(HogQLParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(HogQLParser.TRUNCATE, 0)

        def TO(self):
            return self.getToken(HogQLParser.TO, 0)

        def TOP(self):
            return self.getToken(HogQLParser.TOP, 0)

        def TTL(self):
            return self.getToken(HogQLParser.TTL, 0)

        def TYPE(self):
            return self.getToken(HogQLParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(HogQLParser.UNBOUNDED, 0)

        def UNION(self):
            return self.getToken(HogQLParser.UNION, 0)

        def UPDATE(self):
            return self.getToken(HogQLParser.UPDATE, 0)

        def USE(self):
            return self.getToken(HogQLParser.USE, 0)

        def USING(self):
            return self.getToken(HogQLParser.USING, 0)

        def UUID(self):
            return self.getToken(HogQLParser.UUID, 0)

        def VALUES(self):
            return self.getToken(HogQLParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(HogQLParser.VIEW, 0)

        def VOLUME(self):
            return self.getToken(HogQLParser.VOLUME, 0)

        def WATCH(self):
            return self.getToken(HogQLParser.WATCH, 0)

        def WHEN(self):
            return self.getToken(HogQLParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(HogQLParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(HogQLParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(HogQLParser.WITH, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keyword

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKeyword"):
                listener.enterKeyword(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKeyword"):
                listener.exitKeyword(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKeyword"):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)

    def keyword(self):

        localctx = HogQLParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_keyword)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            _la = self._input.LA(1)
            if not (
                ((_la) & ~0x3F) == 0
                and ((1 << _la) & -68719476740) != 0
                or (((_la - 64)) & ~0x3F) == 0
                and ((1 << (_la - 64)) & -2577255255640065) != 0
                or (((_la - 128)) & ~0x3F) == 0
                and ((1 << (_la - 128)) & -2377900603251687437) != 0
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordForAliasContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(HogQLParser.DATE, 0)

        def FIRST(self):
            return self.getToken(HogQLParser.FIRST, 0)

        def ID(self):
            return self.getToken(HogQLParser.ID, 0)

        def KEY(self):
            return self.getToken(HogQLParser.KEY, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_keywordForAlias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKeywordForAlias"):
                listener.enterKeywordForAlias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKeywordForAlias"):
                listener.exitKeywordForAlias(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKeywordForAlias"):
                return visitor.visitKeywordForAlias(self)
            else:
                return visitor.visitChildren(self)

    def keywordForAlias(self):

        localctx = HogQLParser.KeywordForAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_keywordForAlias)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            _la = self._input.LA(1)
            if not ((((_la - 35)) & ~0x3F) == 0 and ((1 << (_la - 35)) & 36030996109328385) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def keywordForAlias(self):
            return self.getTypedRuleContext(HogQLParser.KeywordForAliasContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_alias

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAlias"):
                listener.enterAlias(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAlias"):
                listener.exitAlias(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAlias"):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)

    def alias(self):

        localctx = HogQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_alias)
        try:
            self.state = 866
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192]:
                self.enterOuterAlt(localctx, 1)
                self.state = 864
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [35, 61, 76, 90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 865
                self.keywordForAlias()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(HogQLParser.IDENTIFIER, 0)

        def interval(self):
            return self.getTypedRuleContext(HogQLParser.IntervalContext, 0)

        def keyword(self):
            return self.getTypedRuleContext(HogQLParser.KeywordContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_identifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifier"):
                listener.enterIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifier"):
                listener.exitIdentifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIdentifier"):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)

    def identifier(self):

        localctx = HogQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_identifier)
        try:
            self.state = 871
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192]:
                self.enterOuterAlt(localctx, 1)
                self.state = 868
                self.match(HogQLParser.IDENTIFIER)
                pass
            elif token in [36, 75, 107, 109, 131, 144, 184, 189]:
                self.enterOuterAlt(localctx, 2)
                self.state = 869
                self.interval()
                pass
            elif token in [
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                76,
                77,
                78,
                79,
                80,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                108,
                110,
                111,
                113,
                114,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                185,
                186,
                187,
                188,
                190,
                191,
            ]:
                self.enterOuterAlt(localctx, 3)
                self.state = 870
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierOrNullContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(HogQLParser.IdentifierContext, 0)

        def NULL_SQL(self):
            return self.getToken(HogQLParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_identifierOrNull

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifierOrNull"):
                listener.enterIdentifierOrNull(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifierOrNull"):
                listener.exitIdentifierOrNull(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIdentifierOrNull"):
                return visitor.visitIdentifierOrNull(self)
            else:
                return visitor.visitChildren(self)

    def identifierOrNull(self):

        localctx = HogQLParser.IdentifierOrNullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_identifierOrNull)
        try:
            self.state = 875
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                113,
                114,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.identifier()
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.match(HogQLParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumValueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(HogQLParser.STRING_LITERAL, 0)

        def EQ_SINGLE(self):
            return self.getToken(HogQLParser.EQ_SINGLE, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(HogQLParser.NumberLiteralContext, 0)

        def getRuleIndex(self):
            return HogQLParser.RULE_enumValue

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumValue"):
                listener.enterEnumValue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumValue"):
                listener.exitEnumValue(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumValue"):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)

    def enumValue(self):

        localctx = HogQLParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(HogQLParser.STRING_LITERAL)
            self.state = 878
            self.match(HogQLParser.EQ_SINGLE)
            self.state = 879
            self.numberLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[18] = self.joinExpr_sempred
        self._predicates[38] = self.columnExpr_sempred
        self._predicates[44] = self.tableExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def joinExpr_sempred(self, localctx: JoinExprContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 3)

        if predIndex == 1:
            return self.precpred(self._ctx, 4)

    def columnExpr_sempred(self, localctx: ColumnExprContext, predIndex: int):
        if predIndex == 2:
            return self.precpred(self._ctx, 16)

        if predIndex == 3:
            return self.precpred(self._ctx, 15)

        if predIndex == 4:
            return self.precpred(self._ctx, 14)

        if predIndex == 5:
            return self.precpred(self._ctx, 11)

        if predIndex == 6:
            return self.precpred(self._ctx, 10)

        if predIndex == 7:
            return self.precpred(self._ctx, 9)

        if predIndex == 8:
            return self.precpred(self._ctx, 8)

        if predIndex == 9:
            return self.precpred(self._ctx, 19)

        if predIndex == 10:
            return self.precpred(self._ctx, 18)

        if predIndex == 11:
            return self.precpred(self._ctx, 13)

        if predIndex == 12:
            return self.precpred(self._ctx, 7)

    def tableExpr_sempred(self, localctx: TableExprContext, predIndex: int):
        if predIndex == 13:
            return self.precpred(self._ctx, 1)
